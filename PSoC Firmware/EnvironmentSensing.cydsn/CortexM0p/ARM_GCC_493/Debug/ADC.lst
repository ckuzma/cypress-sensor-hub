ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.global	ADC_selected
  24              		.type	ADC_selected, %object
  25              		.size	ADC_selected, 1
  26              	ADC_selected:
  27 0001 00       		.space	1
  28              		.comm	ADC_offset,14,4
  29              		.comm	ADC_countsPer10Volt,28,4
  30 0002 0000     		.align	2
  31              	ADC_currentConfig:
  32 0004 00000000 		.space	4
  33              		.align	2
  34              	ADC_channelEnMasks:
  35 0008 00000000 		.space	4
  36              		.section	.rodata
  37              		.align	2
  38              		.type	ADC_channelsConfig, %object
  39              		.size	ADC_channelsConfig, 28
  40              	ADC_channelsConfig:
  41 0000 00040000 		.word	1024
  42 0004 00140000 		.word	5120
  43 0008 00140000 		.word	5120
  44 000c 00150000 		.word	5376
  45 0010 00150000 		.word	5376
  46 0014 00140000 		.word	5120
  47 0018 00140000 		.word	5120
  48              		.section	.text.ADC_Start,"ax",%progbits
  49              		.align	2
  50              		.global	ADC_Start
  51              		.code	16
  52              		.thumb_func
  53              		.type	ADC_Start, %function
  54              	ADC_Start:
  55              	.LFB1:
  56              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /***************************************************************************//**
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 2


   2:Generated_Source\PSoC4/ADC.c **** * \file     ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * \version  1.10
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * \brief
   6:Generated_Source\PSoC4/ADC.c **** * Provides the source code to the API for the ADC Component.
   7:Generated_Source\PSoC4/ADC.c **** *
   8:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
   9:Generated_Source\PSoC4/ADC.c **** * \copyright
  10:Generated_Source\PSoC4/ADC.c **** * (c) 2015-2016, Cypress Semiconductor Corporation. All rights reserved.
  11:Generated_Source\PSoC4/ADC.c **** * This software, including source code, documentation and related
  12:Generated_Source\PSoC4/ADC.c **** * materials ("Software"), is owned by Cypress Semiconductor
  13:Generated_Source\PSoC4/ADC.c **** * Corporation ("Cypress") and is protected by and subject to worldwide
  14:Generated_Source\PSoC4/ADC.c **** * patent protection (United States and foreign), United States copyright
  15:Generated_Source\PSoC4/ADC.c **** * laws and international treaty provisions. Therefore, you may use this
  16:Generated_Source\PSoC4/ADC.c **** * Software only as provided in the license agreement accompanying the
  17:Generated_Source\PSoC4/ADC.c **** * software package from which you obtained this Software ("EULA").
  18:Generated_Source\PSoC4/ADC.c **** * If no EULA applies, Cypress hereby grants you a personal, nonexclusive,
  19:Generated_Source\PSoC4/ADC.c **** * non-transferable license to copy, modify, and compile the
  20:Generated_Source\PSoC4/ADC.c **** * Software source code solely for use in connection with Cypress's
  21:Generated_Source\PSoC4/ADC.c **** * integrated circuit products. Any reproduction, modification, translation,
  22:Generated_Source\PSoC4/ADC.c **** * compilation, or representation of this Software except as specified
  23:Generated_Source\PSoC4/ADC.c **** * above is prohibited without the express written permission of Cypress.
  24:Generated_Source\PSoC4/ADC.c **** * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO
  25:Generated_Source\PSoC4/ADC.c **** * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
  26:Generated_Source\PSoC4/ADC.c **** * BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
  27:Generated_Source\PSoC4/ADC.c **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  28:Generated_Source\PSoC4/ADC.c **** * PARTICULAR PURPOSE. Cypress reserves the right to make
  29:Generated_Source\PSoC4/ADC.c **** * changes to the Software without notice. Cypress does not assume any
  30:Generated_Source\PSoC4/ADC.c **** * liability arising out of the application or use of the Software or any
  31:Generated_Source\PSoC4/ADC.c **** * product or circuit described in the Software. Cypress does not
  32:Generated_Source\PSoC4/ADC.c **** * authorize its products for use in any products where a malfunction or
  33:Generated_Source\PSoC4/ADC.c **** * failure of the Cypress product may reasonably be expected to result in
  34:Generated_Source\PSoC4/ADC.c **** * significant property damage, injury or death ("High Risk Product"). By
  35:Generated_Source\PSoC4/ADC.c **** * including Cypress's product in a High Risk Product, the manufacturer
  36:Generated_Source\PSoC4/ADC.c **** * of such system or application assumes all risk of such use and in doing
  37:Generated_Source\PSoC4/ADC.c **** * so agrees to indemnify Cypress against all liability.
  38:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  39:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  40:Generated_Source\PSoC4/ADC.c **** 
  41:Generated_Source\PSoC4/ADC.c **** static int32 ADC_IsChannelSigned(uint32 chan);
  42:Generated_Source\PSoC4/ADC.c **** 
  43:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u; 
  44:Generated_Source\PSoC4/ADC.c **** 
  45:Generated_Source\PSoC4/ADC.c **** uint8 ADC_selected = 0u; /* 0 if no configuration selected. 1 otherwise. */
  46:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM]; 
  47:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM]; 
  48:Generated_Source\PSoC4/ADC.c **** 
  49:Generated_Source\PSoC4/ADC.c **** static uint32 ADC_currentConfig = 0u; /* Currently active configuration */
  50:Generated_Source\PSoC4/ADC.c **** static uint32 ADC_channelEnMasks[ADC_TOTAL_CONFIGS];
  51:Generated_Source\PSoC4/ADC.c **** 
  52:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  53:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  54:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  55:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  56:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400UL, 0x00001400UL, 0x00001400UL, 0x000
  57:Generated_Source\PSoC4/ADC.c **** 
  58:Generated_Source\PSoC4/ADC.c **** /* Filter init */
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 3


  59:Generated_Source\PSoC4/ADC.c **** #if(ADC_ANY_CONFIG_USES_FILTER	!= 0u)	
  60:Generated_Source\PSoC4/ADC.c ****     #define ADC_UABH_A_FILTER_INITPAIRSSIZE ((ADC_FILTERTYPE_USED == ADC_FILTERTOPOLOGY_LOW_Q) \
  61:Generated_Source\PSoC4/ADC.c ****                                                          ? 18u \
  62:Generated_Source\PSoC4/ADC.c ****                                                          : 18u)
  63:Generated_Source\PSoC4/ADC.c ****     static CyUAB_reg_pair ADC_UABH_A_FILTER_initPairs[ADC_UABH_A_FILTER_INITPAIRSSIZE] =
  64:Generated_Source\PSoC4/ADC.c ****     {
  65:Generated_Source\PSoC4/ADC.c ****     	/*OA_CTRL default always first element in initPairs*/
  66:Generated_Source\PSoC4/ADC.c ****         /* Topology-invariant registers */
  67:Generated_Source\PSoC4/ADC.c ****          {ADC_UABH_A_OA_CTRL_PTR        , ((uint32)ADC_UABH_A_DEFAULT_OA_CTRL)}
  68:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_A_SW_STATIC_PTR      , ((uint32)ADC_UABH_A_DEFAULT_SW_STATIC)}
  69:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_A_SW_MODBIT_SRC_PTR      , ((uint32)ADC_UABH_A_DEFAULT_SW_MODBIT_SRC)}
  70:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_A_SRAM_CTRL_PTR      , ((uint32)ADC_UABH_A_INVAR_SRAM_CTRL)} 
  71:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_A_STARTUP_DELAY_PTR  , ((uint32)ADC_UABH_A_INVAR_STARTUP_DELAY)}
  72:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_A_SW_BOOST_CTRL_PTR  , ((uint32)ADC_UABH_A_DEFAULT_SW_BOOST_CTRL)}
  73:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_A_SW_OTHER_PTR  , ((uint32)ADC_UABH_A_DEFAULT_SW_OTHER)}
  74:Generated_Source\PSoC4/ADC.c ****         
  75:Generated_Source\PSoC4/ADC.c ****         #if (ADC_FILTERTYPE_USED == ADC_FILTERTOPOLOGY_LOW_Q)
  76:Generated_Source\PSoC4/ADC.c ****             /* Filter-invariant registers */
  77:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CA_IN0_PTR      , ((uint32)ADC_UABH_A_LOWQSTAT_SW_CA_IN0)}
  78:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CA_TOP_PTR      , ((uint32)ADC_UABH_A_LOWQSTAT_SW_CA_TOP)}
  79:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CC_IN0_PTR      , ((uint32)ADC_UABH_A_LOWQSTAT_SW_CC_IN0)}
  80:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CC_IN1_PTR      , ((uint32)ADC_UABH_A_LOWQSTAT_SW_CC_IN1)}
  81:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CF_BOT_PTR      , ((uint32)ADC_UABH_A_LOWQSTAT_SW_CF_BOT)}
  82:Generated_Source\PSoC4/ADC.c **** 
  83:Generated_Source\PSoC4/ADC.c ****             /* Parameter-based registers */
  84:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_CAP_CTRL_PTR       , ((uint32)ADC_UABH_A_LOWQDYN_CAP_CTRL)}
  85:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CB_IN0_PTR      , ((uint32)ADC_UABH_A_LOWQDYN_SW_CB_IN0)}
  86:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CB_IN1_PTR      , ((uint32)ADC_UABH_A_LOWQDYN_SW_CB_IN1)}
  87:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CB_TOP_PTR      , ((uint32)ADC_UABH_A_LOWQDYN_SW_CB_TOP)}
  88:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CC_TOP_PTR      , ((uint32)ADC_UABH_A_LOWQDYN_SW_CC_TOP)}
  89:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_CAP_ABCF_VAL_PTR   , ((uint32)ADC_UABH_A_LOWQDYN_CAP_ABCF_VAL)}
  90:Generated_Source\PSoC4/ADC.c ****         #elif (ADC_FILTERTYPE_USED == ADC_FILTERTOPOLOGY_HIGH_Q)
  91:Generated_Source\PSoC4/ADC.c ****             /* Filter-invariant registers */
  92:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CA_IN0_PTR      , ((uint32)ADC_UABH_A_HIGHQSTAT_SW_CA_IN0)}
  93:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CA_TOP_PTR      , ((uint32)ADC_UABH_A_HIGHQSTAT_SW_CA_TOP)}
  94:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CB_IN0_PTR      , ((uint32)ADC_UABH_A_HIGHQSTAT_SW_CB_IN0)}
  95:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CB_IN1_PTR      , ((uint32)ADC_UABH_A_HIGHQSTAT_SW_CB_IN1)}
  96:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CC_IN0_PTR      , ((uint32)ADC_UABH_A_HIGHQSTAT_SW_CC_IN0)}
  97:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CC_IN1_PTR      , ((uint32)ADC_UABH_A_HIGHQSTAT_SW_CC_IN1)}
  98:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CC_TOP_PTR      , ((uint32)ADC_UABH_A_HIGHQSTAT_SW_CC_TOP)}
  99:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CF_BOT_PTR      , ((uint32)ADC_UABH_A_HIGHQSTAT_SW_CF_BOT)}
 100:Generated_Source\PSoC4/ADC.c **** 
 101:Generated_Source\PSoC4/ADC.c ****             /* Parameter-based registers */
 102:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_CAP_CTRL_PTR       , ((uint32)ADC_UABH_A_HIGHQDYN_CAP_CTRL)}
 103:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_SW_CB_TOP_PTR      , ((uint32)ADC_UABH_A_HIGHQDYN_SW_CB_TOP)}
 104:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_A_CAP_ABCF_VAL_PTR   , ((uint32)ADC_UABH_A_HIGHQDYN_CAP_ABCF_VAL)}
 105:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_FILTERTYPE_USED == ADC_FILTERTOPOLOGY_LOW_Q) */
 106:Generated_Source\PSoC4/ADC.c ****     };
 107:Generated_Source\PSoC4/ADC.c **** 
 108:Generated_Source\PSoC4/ADC.c ****     #define ADC_UABH_B_FILTER_INITPAIRSSIZE ((ADC_FILTERTYPE_USED == ADC_FILTERTOPOLOGY_LOW_Q) \
 109:Generated_Source\PSoC4/ADC.c ****                                                          ? 19u \
 110:Generated_Source\PSoC4/ADC.c ****                                                          : 19u)
 111:Generated_Source\PSoC4/ADC.c ****     static CyUAB_reg_pair ADC_UABH_B_FILTER_initPairs[ADC_UABH_B_FILTER_INITPAIRSSIZE] = 
 112:Generated_Source\PSoC4/ADC.c ****     {
 113:Generated_Source\PSoC4/ADC.c ****         /*OA_CTRL default always first element in initPairs*/
 114:Generated_Source\PSoC4/ADC.c ****         /* Topology-invariant registers */
 115:Generated_Source\PSoC4/ADC.c ****          {ADC_UABH_B_OA_CTRL_PTR        , ((uint32)ADC_UABH_B_DEFAULT_OA_CTRL)}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 4


 116:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_B_SW_STATIC_PTR      , ((uint32)ADC_UABH_B_DEFAULT_SW_STATIC)}
 117:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_B_SW_MODBIT_SRC_PTR      , ((uint32)ADC_UABH_B_DEFAULT_SW_MODBIT_SRC)}
 118:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_B_SRAM_CTRL_PTR      , ((uint32)ADC_UABH_B_INVAR_SRAM_CTRL)} 
 119:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_B_STARTUP_DELAY_PTR  , ((uint32)ADC_UABH_B_INVAR_STARTUP_DELAY)}
 120:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_B_SW_BOOST_CTRL_PTR  , ((uint32)ADC_UABH_B_DEFAULT_SW_BOOST_CTRL)}
 121:Generated_Source\PSoC4/ADC.c ****         ,{ADC_UABH_B_SW_OTHER_PTR  , ((uint32)ADC_UABH_B_DEFAULT_SW_OTHER)}
 122:Generated_Source\PSoC4/ADC.c ****         
 123:Generated_Source\PSoC4/ADC.c ****         #if (ADC_FILTERTYPE_USED == ADC_FILTERTOPOLOGY_LOW_Q)
 124:Generated_Source\PSoC4/ADC.c ****                 	/* Filter-invariant registers */
 125:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CA_IN0_PTR      , ((uint32)ADC_UABH_B_LOWQSTAT_SW_CA_IN0)}
 126:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CA_IN1_PTR      , ((uint32)ADC_UABH_B_LOWQSTAT_SW_CA_IN1)}
 127:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CA_TOP_PTR      , ((uint32)ADC_UABH_B_LOWQSTAT_SW_CA_TOP)}
 128:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CB_IN0_PTR      , ((uint32)ADC_UABH_B_LOWQSTAT_SW_CB_IN0)}
 129:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CB_IN1_PTR      , ((uint32)ADC_UABH_B_LOWQSTAT_SW_CB_IN1)}
 130:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CB_TOP_PTR      , ((uint32)ADC_UABH_B_LOWQSTAT_SW_CB_TOP)}
 131:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CC_IN0_PTR      , ((uint32)ADC_UABH_B_LOWQSTAT_SW_CC_IN0)}
 132:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CC_IN1_PTR      , ((uint32)ADC_UABH_B_LOWQSTAT_SW_CC_IN1)}
 133:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CF_BOT_PTR      , ((uint32)ADC_UABH_B_LOWQSTAT_SW_CF_BOT)}
 134:Generated_Source\PSoC4/ADC.c ****             
 135:Generated_Source\PSoC4/ADC.c ****             /* Parameter-based registers */
 136:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_CAP_CTRL_PTR       , ((uint32)ADC_UABH_B_LOWQDYN_CAP_CTRL)}
 137:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CC_TOP_PTR      , ((uint32)ADC_UABH_B_LOWQDYN_SW_CC_TOP)}
 138:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_CAP_ABCF_VAL_PTR   , ((uint32)ADC_UABH_B_LOWQDYN_CAP_ABCF_VAL)}
 139:Generated_Source\PSoC4/ADC.c ****         #elif (ADC_FILTERTYPE_USED == ADC_FILTERTOPOLOGY_HIGH_Q)
 140:Generated_Source\PSoC4/ADC.c ****         	/* Filter-invariant registers */
 141:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CA_IN0_PTR      , ((uint32)ADC_UABH_B_HIGHQSTAT_SW_CA_IN0)}
 142:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CA_IN1_PTR      , ((uint32)ADC_UABH_B_HIGHQSTAT_SW_CA_IN1)}
 143:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CA_TOP_PTR      , ((uint32)ADC_UABH_B_HIGHQSTAT_SW_CA_TOP)}
 144:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CB_IN0_PTR      , ((uint32)ADC_UABH_B_HIGHQSTAT_SW_CB_IN0)}
 145:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CB_IN1_PTR      , ((uint32)ADC_UABH_B_HIGHQSTAT_SW_CB_IN1)}
 146:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CC_IN0_PTR      , ((uint32)ADC_UABH_B_HIGHQSTAT_SW_CC_IN0)}
 147:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CC_IN1_PTR      , ((uint32)ADC_UABH_B_HIGHQSTAT_SW_CC_IN1)}
 148:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CF_BOT_PTR      , ((uint32)ADC_UABH_B_HIGHQSTAT_SW_CF_BOT)}
 149:Generated_Source\PSoC4/ADC.c ****             
 150:Generated_Source\PSoC4/ADC.c ****             /* Parameter-based registers */
 151:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_CAP_CTRL_PTR       , ((uint32)ADC_UABH_B_HIGHQDYN_CAP_CTRL)}
 152:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CB_TOP_PTR      , ((uint32)ADC_UABH_B_HIGHQDYN_SW_CB_TOP)}
 153:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_SW_CC_TOP_PTR      , ((uint32)ADC_UABH_B_HIGHQDYN_SW_CC_TOP)}
 154:Generated_Source\PSoC4/ADC.c ****             ,{ADC_UABH_B_CAP_ABCF_VAL_PTR   , ((uint32)ADC_UABH_B_HIGHQDYN_CAP_ABCF_VAL)}
 155:Generated_Source\PSoC4/ADC.c ****         #endif /* #if (ADC_FILTERTYPE_USED == ADC_FILTERTOPOLOGY_LOW_Q) */
 156:Generated_Source\PSoC4/ADC.c ****     };
 157:Generated_Source\PSoC4/ADC.c **** 
 158:Generated_Source\PSoC4/ADC.c ****     static CyUAB_config ADC_UABH_A_FILTER_config = {
 159:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_A_waveConfig,
 160:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_A_FILTER_initPairs,
 161:Generated_Source\PSoC4/ADC.c ****         CyUAB_SHARED_SW_CFG(ADC_UABH_A_PARAM_REF_TIED,ADC_UABH_A_PARAM_AGND_TIED,
 162:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_A_PARAM_SW_CC,ADC_UABH_A_PARAM_SW_BB,ADC_UABH_A_PARAM_SW_AA),
 163:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_A_NUM_STEPS,
 164:Generated_Source\PSoC4/ADC.c ****         (uint8)(ADC_UABH_A_ELEMENT_COUNT(ADC_UABH_A_FILTER_initPairs))
 165:Generated_Source\PSoC4/ADC.c ****     };
 166:Generated_Source\PSoC4/ADC.c **** 
 167:Generated_Source\PSoC4/ADC.c ****     static CyUAB_config ADC_UABH_B_FILTER_config = {
 168:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_B_waveConfig,
 169:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_B_FILTER_initPairs,
 170:Generated_Source\PSoC4/ADC.c ****         CyUAB_SHARED_SW_CFG(ADC_UABH_B_PARAM_REF_TIED,ADC_UABH_B_PARAM_AGND_TIED,
 171:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_B_PARAM_SW_CC,ADC_UABH_B_PARAM_SW_BB,ADC_UABH_B_PARAM_SW_AA),
 172:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_B_NUM_STEPS,
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 5


 173:Generated_Source\PSoC4/ADC.c ****         (uint8)(ADC_UABH_B_ELEMENT_COUNT(ADC_UABH_B_FILTER_initPairs))
 174:Generated_Source\PSoC4/ADC.c ****     };
 175:Generated_Source\PSoC4/ADC.c **** #endif /* (ADC_ANY_CONFIG_USES_FILTER	!= 0u)	*/
 176:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 177:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
 178:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 179:Generated_Source\PSoC4/ADC.c **** *
 180:Generated_Source\PSoC4/ADC.c **** * \brief Performs all required initialization for this component and enables the 
 181:Generated_Source\PSoC4/ADC.c **** *  power. The power will be set to the appropriate power based on the clock 
 182:Generated_Source\PSoC4/ADC.c **** *  frequency.
 183:Generated_Source\PSoC4/ADC.c **** * 
 184:Generated_Source\PSoC4/ADC.c **** * \param None
 185:Generated_Source\PSoC4/ADC.c **** * 
 186:Generated_Source\PSoC4/ADC.c **** * \return None
 187:Generated_Source\PSoC4/ADC.c **** * 
 188:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 189:Generated_Source\PSoC4/ADC.c **** *
 190:Generated_Source\PSoC4/ADC.c **** * \globalvars
 191:Generated_Source\PSoC4/ADC.c **** *  \ref ADC_initVar (RW)
 192:Generated_Source\PSoC4/ADC.c **** *
 193:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 194:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_Start
 195:Generated_Source\PSoC4/ADC.c **** *
 196:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 197:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
 198:Generated_Source\PSoC4/ADC.c **** {
  57              		.loc 1 198 0
  58              		.cfi_startproc
  59 0000 80B5     		push	{r7, lr}
  60              		.cfi_def_cfa_offset 8
  61              		.cfi_offset 7, -8
  62              		.cfi_offset 14, -4
  63 0002 00AF     		add	r7, sp, #0
  64              		.cfi_def_cfa_register 7
 199:Generated_Source\PSoC4/ADC.c ****     if (1u != (1u & ADC_initVar))
  65              		.loc 1 199 0
  66 0004 0A4B     		ldr	r3, .L4
  67 0006 1B78     		ldrb	r3, [r3]
  68 0008 0122     		mov	r2, #1
  69 000a 1340     		and	r3, r2
  70 000c DBB2     		uxtb	r3, r3
  71 000e 002B     		cmp	r3, #0
  72 0010 08D1     		bne	.L2
 200:Generated_Source\PSoC4/ADC.c ****     {
 201:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  73              		.loc 1 201 0
  74 0012 FFF7FEFF 		bl	ADC_Init
 202:Generated_Source\PSoC4/ADC.c ****         ADC_initVar |= 1u;
  75              		.loc 1 202 0
  76 0016 064B     		ldr	r3, .L4
  77 0018 1B78     		ldrb	r3, [r3]
  78 001a 0122     		mov	r2, #1
  79 001c 1343     		orr	r3, r2
  80 001e DAB2     		uxtb	r2, r3
  81 0020 034B     		ldr	r3, .L4
  82 0022 1A70     		strb	r2, [r3]
  83              	.L2:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 6


 203:Generated_Source\PSoC4/ADC.c ****     }
 204:Generated_Source\PSoC4/ADC.c ****     
 205:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  84              		.loc 1 205 0
  85 0024 FFF7FEFF 		bl	ADC_Enable
 206:Generated_Source\PSoC4/ADC.c ****     
 207:Generated_Source\PSoC4/ADC.c ****     return;
  86              		.loc 1 207 0
  87 0028 C046     		mov	r8, r8
 208:Generated_Source\PSoC4/ADC.c **** }
  88              		.loc 1 208 0
  89 002a BD46     		mov	sp, r7
  90              		@ sp needed
  91 002c 80BD     		pop	{r7, pc}
  92              	.L5:
  93 002e C046     		.align	2
  94              	.L4:
  95 0030 00000000 		.word	ADC_initVar
  96              		.cfi_endproc
  97              	.LFE1:
  98              		.size	ADC_Start, .-ADC_Start
  99              		.section	.text.ADC_StartEx,"ax",%progbits
 100              		.align	2
 101              		.global	ADC_StartEx
 102              		.code	16
 103              		.thumb_func
 104              		.type	ADC_StartEx, %function
 105              	ADC_StartEx:
 106              	.LFB2:
 209:Generated_Source\PSoC4/ADC.c **** 
 210:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 211:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartEx
 212:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 213:Generated_Source\PSoC4/ADC.c **** *
 214:Generated_Source\PSoC4/ADC.c **** * \brief This function starts the ADC and sets the Interrupt 
 215:Generated_Source\PSoC4/ADC.c **** * Service Routine to the provided address using the 
 216:Generated_Source\PSoC4/ADC.c **** * ADC_IRQ_StartEx() function. Refer to the Interrupt component 
 217:Generated_Source\PSoC4/ADC.c **** * datasheet for more information on the ADC_IRQ_StartEx() function.
 218:Generated_Source\PSoC4/ADC.c **** * 
 219:Generated_Source\PSoC4/ADC.c **** * \param address This is the address of a user defined function for the ISR.
 220:Generated_Source\PSoC4/ADC.c **** * 
 221:Generated_Source\PSoC4/ADC.c **** * \return None
 222:Generated_Source\PSoC4/ADC.c **** * 
 223:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 224:Generated_Source\PSoC4/ADC.c **** *
 225:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 226:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_StartEx
 227:Generated_Source\PSoC4/ADC.c **** *
 228:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 229:Generated_Source\PSoC4/ADC.c **** void ADC_StartEx(cyisraddress address)
 230:Generated_Source\PSoC4/ADC.c **** {
 107              		.loc 1 230 0
 108              		.cfi_startproc
 109 0000 80B5     		push	{r7, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 7


 113 0002 82B0     		sub	sp, sp, #8
 114              		.cfi_def_cfa_offset 16
 115 0004 00AF     		add	r7, sp, #0
 116              		.cfi_def_cfa_register 7
 117 0006 7860     		str	r0, [r7, #4]
 231:Generated_Source\PSoC4/ADC.c ****     ADC_Start();
 118              		.loc 1 231 0
 119 0008 FFF7FEFF 		bl	ADC_Start
 232:Generated_Source\PSoC4/ADC.c ****     ADC_IRQ_StartEx(address);
 120              		.loc 1 232 0
 121 000c 7B68     		ldr	r3, [r7, #4]
 122 000e 181C     		mov	r0, r3
 123 0010 FFF7FEFF 		bl	ADC_IRQ_StartEx
 233:Generated_Source\PSoC4/ADC.c ****     return;
 124              		.loc 1 233 0
 125 0014 C046     		mov	r8, r8
 234:Generated_Source\PSoC4/ADC.c **** }
 126              		.loc 1 234 0
 127 0016 BD46     		mov	sp, r7
 128 0018 02B0     		add	sp, sp, #8
 129              		@ sp needed
 130 001a 80BD     		pop	{r7, pc}
 131              		.cfi_endproc
 132              	.LFE2:
 133              		.size	ADC_StartEx, .-ADC_StartEx
 134              		.section	.text.ADC_Stop,"ax",%progbits
 135              		.align	2
 136              		.global	ADC_Stop
 137              		.code	16
 138              		.thumb_func
 139              		.type	ADC_Stop, %function
 140              	ADC_Stop:
 141              	.LFB3:
 235:Generated_Source\PSoC4/ADC.c **** 
 236:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 237:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 238:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 239:Generated_Source\PSoC4/ADC.c **** *
 240:Generated_Source\PSoC4/ADC.c **** * \brief This function stops ADC conversions and puts the ADC into its lowest 
 241:Generated_Source\PSoC4/ADC.c **** * power mode.
 242:Generated_Source\PSoC4/ADC.c **** * 
 243:Generated_Source\PSoC4/ADC.c **** * \param None
 244:Generated_Source\PSoC4/ADC.c **** * 
 245:Generated_Source\PSoC4/ADC.c **** * \return None
 246:Generated_Source\PSoC4/ADC.c **** * 
 247:Generated_Source\PSoC4/ADC.c **** * \sideeffect
 248:Generated_Source\PSoC4/ADC.c **** * Do not use the ADC_Stop() API to halt conversions. Instead use the 
 249:Generated_Source\PSoC4/ADC.c **** * ADC_StopConvert() API. If you use the ADC_Stop() API 
 250:Generated_Source\PSoC4/ADC.c **** * to halt conversions then later use the ADC_Start() and 
 251:Generated_Source\PSoC4/ADC.c **** * ADC_StartConvert() APIs to resume conversions, the first channel 
 252:Generated_Source\PSoC4/ADC.c **** * of the scan may be corrupt. The ADC_StopConvert() API will enable 
 253:Generated_Source\PSoC4/ADC.c **** * the ADC to complete the current scan of channels. After the 
 254:Generated_Source\PSoC4/ADC.c **** * channel scan is complete, the ADC will stop all conversions, which 
 255:Generated_Source\PSoC4/ADC.c **** * can be detected by the use of an ISR or the ADC_IsEndConversion() 
 256:Generated_Source\PSoC4/ADC.c **** * flag.
 257:Generated_Source\PSoC4/ADC.c **** *
 258:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 8


 259:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_Stop
 260:Generated_Source\PSoC4/ADC.c **** *
 261:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 262:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 263:Generated_Source\PSoC4/ADC.c **** {	
 142              		.loc 1 263 0
 143              		.cfi_startproc
 144 0000 80B5     		push	{r7, lr}
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 7, -8
 147              		.cfi_offset 14, -4
 148 0002 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
 264:Generated_Source\PSoC4/ADC.c ****     #if(0u != ADC_ANY_CONFIG_USES_FILTER)	
 265:Generated_Source\PSoC4/ADC.c ****     	if((ADC_allConfigs[ADC_currentConfig].miscConfig 
 266:Generated_Source\PSoC4/ADC.c ****     	   & ADC_MISC_CONFIG_FILTER_PRESENT_MSK) 
 267:Generated_Source\PSoC4/ADC.c ****     	   == ADC_MISC_CONFIG_FILTER_PRESENT_MSK)
 268:Generated_Source\PSoC4/ADC.c ****     	{
 269:Generated_Source\PSoC4/ADC.c ****     		ADC_UABH_A_Stop();
 270:Generated_Source\PSoC4/ADC.c ****     		ADC_UABH_B_Stop();
 271:Generated_Source\PSoC4/ADC.c ****             ADC_FILTERAGND2SAR_BUFFER_Stop();
 272:Generated_Source\PSoC4/ADC.c ****     	}
 273:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_ANY_CONFIG_USES_FILTER != 0u */
 274:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_SAR_CTRL_ENABLED_MSK;
 150              		.loc 1 274 0
 151 0004 044B     		ldr	r3, .L10
 152 0006 044A     		ldr	r2, .L10
 153 0008 1268     		ldr	r2, [r2]
 154 000a 5200     		lsl	r2, r2, #1
 155 000c 5208     		lsr	r2, r2, #1
 156 000e 1A60     		str	r2, [r3]
 275:Generated_Source\PSoC4/ADC.c ****     return;
 157              		.loc 1 275 0
 158 0010 C046     		mov	r8, r8
 276:Generated_Source\PSoC4/ADC.c **** }
 159              		.loc 1 276 0
 160 0012 BD46     		mov	sp, r7
 161              		@ sp needed
 162 0014 80BD     		pop	{r7, pc}
 163              	.L11:
 164 0016 C046     		.align	2
 165              	.L10:
 166 0018 00003A40 		.word	1077542912
 167              		.cfi_endproc
 168              	.LFE3:
 169              		.size	ADC_Stop, .-ADC_Stop
 170              		.section	.text.ADC_InitConfig,"ax",%progbits
 171              		.align	2
 172              		.global	ADC_InitConfig
 173              		.code	16
 174              		.thumb_func
 175              		.type	ADC_InitConfig, %function
 176              	ADC_InitConfig:
 177              	.LFB4:
 277:Generated_Source\PSoC4/ADC.c **** 
 278:Generated_Source\PSoC4/ADC.c **** /* ****************************************************************************
 279:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_InitConfig
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 9


 280:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//*
 281:Generated_Source\PSoC4/ADC.c **** *
 282:Generated_Source\PSoC4/ADC.c **** * \brief Configures all of the registers for a given configuration for scanning.
 283:Generated_Source\PSoC4/ADC.c **** *
 284:Generated_Source\PSoC4/ADC.c **** * \param scan Number of scan defined in the ADC.
 285:Generated_Source\PSoC4/ADC.c **** *
 286:Generated_Source\PSoC4/ADC.c **** * \return None
 287:Generated_Source\PSoC4/ADC.c **** *
 288:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 289:Generated_Source\PSoC4/ADC.c **** *
 290:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 291:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_InitConfig
 292:Generated_Source\PSoC4/ADC.c **** *
 293:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 294:Generated_Source\PSoC4/ADC.c **** void ADC_InitConfig(const ADC_CONFIG_STRUCT *config)
 295:Generated_Source\PSoC4/ADC.c **** {
 178              		.loc 1 295 0
 179              		.cfi_startproc
 180 0000 80B5     		push	{r7, lr}
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 84B0     		sub	sp, sp, #16
 185              		.cfi_def_cfa_offset 24
 186 0004 00AF     		add	r7, sp, #0
 187              		.cfi_def_cfa_register 7
 188 0006 7860     		str	r0, [r7, #4]
 296:Generated_Source\PSoC4/ADC.c **** 	uint32 chNum;
 297:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
 298:Generated_Source\PSoC4/ADC.c **** 	
 299:Generated_Source\PSoC4/ADC.c ****     #if(0u != ADC_ANY_CONFIG_USES_FILTER)	        
 300:Generated_Source\PSoC4/ADC.c ****     	if((config->miscConfig & ADC_MISC_CONFIG_FILTER_PRESENT_MSK) 
 301:Generated_Source\PSoC4/ADC.c ****     	    == ADC_MISC_CONFIG_FILTER_PRESENT_MSK)
 302:Generated_Source\PSoC4/ADC.c ****     	{
 303:Generated_Source\PSoC4/ADC.c ****             ADC_intUabClock_SetFractionalDividerRegister(config->filterClkDivider, 0u);    		
 304:Generated_Source\PSoC4/ADC.c ****     	}
 305:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_ANY_CONFIG_USES_FILTER != 0u */
 306:Generated_Source\PSoC4/ADC.c ****     #if (ADC_CLOCK_INTERNAL)
 307:Generated_Source\PSoC4/ADC.c ****         ADC_intSarClock_SetFractionalDividerRegister(config->clkDivider, 0u);
 308:Generated_Source\PSoC4/ADC.c ****         
 309:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_CLOCK_INTERNAL */
 310:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 311:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_CTRL_REG |= config->ctrl
 189              		.loc 1 311 0
 190 0008 7B68     		ldr	r3, [r7, #4]
 191 000a 9A68     		ldr	r2, [r3, #8]
 312:Generated_Source\PSoC4/ADC.c ****    
 313:Generated_Source\PSoC4/ADC.c **** 	/* Enable the SAR internal pump when global pump is enabled */
 314:Generated_Source\PSoC4/ADC.c ****     | (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) 
 192              		.loc 1 314 0
 193 000c 474B     		ldr	r3, .L22
 194 000e 1B68     		ldr	r3, [r3]
 195 0010 002B     		cmp	r3, #0
 196 0012 02DA     		bge	.L13
 197              		.loc 1 314 0 is_stmt 0 discriminator 1
 198 0014 8023     		mov	r3, #128
 199 0016 5B03     		lsl	r3, r3, #13
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 10


 200 0018 00E0     		b	.L14
 201              	.L13:
 202              		.loc 1 314 0 discriminator 2
 203 001a 0023     		mov	r3, #0
 204              	.L14:
 205              		.loc 1 314 0 discriminator 4
 206 001c 1A43     		orr	r2, r3
 207 001e 111C     		mov	r1, r2
 311:Generated_Source\PSoC4/ADC.c ****    
 208              		.loc 1 311 0 is_stmt 1 discriminator 4
 209 0020 434B     		ldr	r3, .L22+4
 210 0022 434A     		ldr	r2, .L22+4
 211 0024 1268     		ldr	r2, [r2]
 212 0026 0A43     		orr	r2, r1
 213 0028 1A60     		str	r2, [r3]
 315:Generated_Source\PSoC4/ADC.c ****     ? ADC_SAR_CTRL_BOOSTPUMP_EN_MSK : 0u);
 316:Generated_Source\PSoC4/ADC.c **** 	
 317:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_SAMPLE_CTRL_REG = config->sampleCtrl;
 214              		.loc 1 317 0 discriminator 4
 215 002a 424A     		ldr	r2, .L22+8
 216 002c 7B68     		ldr	r3, [r7, #4]
 217 002e DB68     		ldr	r3, [r3, #12]
 218 0030 1360     		str	r3, [r2]
 318:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_RANGE_THRES_REG = config->rangeThres;	
 219              		.loc 1 318 0 discriminator 4
 220 0032 414A     		ldr	r2, .L22+12
 221 0034 7B68     		ldr	r3, [r7, #4]
 222 0036 9B69     		ldr	r3, [r3, #24]
 223 0038 1360     		str	r3, [r2]
 319:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_RANGE_COND_REG = config->rangeCond;
 224              		.loc 1 319 0 discriminator 4
 225 003a 404A     		ldr	r2, .L22+16
 226 003c 7B68     		ldr	r3, [r7, #4]
 227 003e DB69     		ldr	r3, [r3, #28]
 228 0040 1360     		str	r3, [r2]
 320:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_SAMPLE_TIME01_REG = config->sampleTime01;
 229              		.loc 1 320 0 discriminator 4
 230 0042 3F4A     		ldr	r2, .L22+20
 231 0044 7B68     		ldr	r3, [r7, #4]
 232 0046 1B69     		ldr	r3, [r3, #16]
 233 0048 1360     		str	r3, [r2]
 321:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_SAMPLE_TIME23_REG = config->sampleTime23;
 234              		.loc 1 321 0 discriminator 4
 235 004a 3E4A     		ldr	r2, .L22+24
 236 004c 7B68     		ldr	r3, [r7, #4]
 237 004e 5B69     		ldr	r3, [r3, #20]
 238 0050 1360     		str	r3, [r2]
 322:Generated_Source\PSoC4/ADC.c ****     
 323:Generated_Source\PSoC4/ADC.c **** 	/* Connect Vminus to VSSA when even one channel is single-ended or multiple channels configured */
 324:Generated_Source\PSoC4/ADC.c **** 	if(1u == ADC_MUX_SWITCH0_INIT)
 325:Generated_Source\PSoC4/ADC.c **** 	{
 326:Generated_Source\PSoC4/ADC.c **** 		ADC_MUX_SWITCH0_REG |= ADC_MUX_FW_VSSA_VMINUS;
 327:Generated_Source\PSoC4/ADC.c **** 		/* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 328:Generated_Source\PSoC4/ADC.c **** 		if(1ul < config->numChannels)
 329:Generated_Source\PSoC4/ADC.c **** 		{
 330:Generated_Source\PSoC4/ADC.c **** 			ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_MUX_FW_VSSA_VMINUS;
 331:Generated_Source\PSoC4/ADC.c **** 		}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 11


 332:Generated_Source\PSoC4/ADC.c **** 	}
 333:Generated_Source\PSoC4/ADC.c ****     
 334:Generated_Source\PSoC4/ADC.c **** 	/* Clear and set interrupt masks */
 335:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 239              		.loc 1 335 0 discriminator 4
 240 0052 3D4B     		ldr	r3, .L22+28
 241 0054 0022     		mov	r2, #0
 242 0056 1A60     		str	r2, [r3]
 336:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;	
 243              		.loc 1 336 0 discriminator 4
 244 0058 3C4B     		ldr	r3, .L22+32
 245 005a 0022     		mov	r2, #0
 246 005c 1A60     		str	r2, [r3]
 337:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_SATURATE_INTR_MASK_REG = config->satIntMask;
 247              		.loc 1 337 0 discriminator 4
 248 005e 3A4A     		ldr	r2, .L22+28
 249 0060 7B68     		ldr	r3, [r7, #4]
 250 0062 9B6A     		ldr	r3, [r3, #40]
 251 0064 1360     		str	r3, [r2]
 338:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_RANGE_INTR_MASK_REG = config->rangeIntMask;
 252              		.loc 1 338 0 discriminator 4
 253 0066 394A     		ldr	r2, .L22+32
 254 0068 7B68     		ldr	r3, [r7, #4]
 255 006a 5B6A     		ldr	r3, [r3, #36]
 256 006c 1360     		str	r3, [r2]
 339:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_INTR_MASK_REG = ADC_EOS_MASK;
 257              		.loc 1 339 0 discriminator 4
 258 006e 384B     		ldr	r3, .L22+36
 259 0070 0122     		mov	r2, #1
 260 0072 1A60     		str	r2, [r3]
 340:Generated_Source\PSoC4/ADC.c ****     
 341:Generated_Source\PSoC4/ADC.c **** 	/* Double the non-overlap delay and latch enable time when using */
 342:Generated_Source\PSoC4/ADC.c ****     /* internal reference without bypass cap */
 343:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 261              		.loc 1 343 0 discriminator 4
 262 0074 374B     		ldr	r3, .L22+40
 263 0076 1B68     		ldr	r3, [r3]
 264 0078 BB60     		str	r3, [r7, #8]
 344:Generated_Source\PSoC4/ADC.c **** 	if(((config->ctrl & ADC__SAR_CTRL_VREF_BYP_AND_SEL_MSK) 
 265              		.loc 1 344 0 discriminator 4
 266 007a 7B68     		ldr	r3, [r7, #4]
 267 007c 9B68     		ldr	r3, [r3, #8]
 268 007e F022     		mov	r2, #240
 269 0080 1340     		and	r3, r2
 270 0082 402B     		cmp	r3, #64
 271 0084 04D0     		beq	.L15
 345:Generated_Source\PSoC4/ADC.c **** 	    == ADC__INTERNAL1024) 
 346:Generated_Source\PSoC4/ADC.c **** 	    || ((config->ctrl & ADC__SAR_CTRL_VREF_BYP_AND_SEL_MSK) 
 272              		.loc 1 346 0
 273 0086 7B68     		ldr	r3, [r7, #4]
 274 0088 9B68     		ldr	r3, [r3, #8]
 275 008a F022     		mov	r2, #240
 276 008c 1340     		and	r3, r2
 277 008e 08D1     		bne	.L16
 278              	.L15:
 347:Generated_Source\PSoC4/ADC.c **** 	    == ADC__INTERNALVREF))
 348:Generated_Source\PSoC4/ADC.c **** 	{
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 12


 349:Generated_Source\PSoC4/ADC.c ****         tmpRegVal &= ~ADC_SAR_DFT_CTRL_DCEN_MSK;
 279              		.loc 1 349 0
 280 0090 BB68     		ldr	r3, [r7, #8]
 281 0092 314A     		ldr	r2, .L22+44
 282 0094 1340     		and	r3, r2
 283 0096 BB60     		str	r3, [r7, #8]
 350:Generated_Source\PSoC4/ADC.c **** 		tmpRegVal |= ADC_SAR_DFT_CTRL_DLY_INC_MSK;
 284              		.loc 1 350 0
 285 0098 BB68     		ldr	r3, [r7, #8]
 286 009a 0122     		mov	r2, #1
 287 009c 1343     		orr	r3, r2
 288 009e BB60     		str	r3, [r7, #8]
 289 00a0 08E0     		b	.L17
 290              	.L16:
 351:Generated_Source\PSoC4/ADC.c **** 	}
 352:Generated_Source\PSoC4/ADC.c **** 	else
 353:Generated_Source\PSoC4/ADC.c **** 	{
 354:Generated_Source\PSoC4/ADC.c **** 		tmpRegVal |= ADC_SAR_DFT_CTRL_DCEN_MSK;
 291              		.loc 1 354 0
 292 00a2 BB68     		ldr	r3, [r7, #8]
 293 00a4 8022     		mov	r2, #128
 294 00a6 9205     		lsl	r2, r2, #22
 295 00a8 1343     		orr	r3, r2
 296 00aa BB60     		str	r3, [r7, #8]
 355:Generated_Source\PSoC4/ADC.c ****         tmpRegVal &= (uint32)~ADC_SAR_DFT_CTRL_DLY_INC_MSK;
 297              		.loc 1 355 0
 298 00ac BB68     		ldr	r3, [r7, #8]
 299 00ae 0122     		mov	r2, #1
 300 00b0 9343     		bic	r3, r2
 301 00b2 BB60     		str	r3, [r7, #8]
 302              	.L17:
 356:Generated_Source\PSoC4/ADC.c **** 	}	
 357:Generated_Source\PSoC4/ADC.c **** 	ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 303              		.loc 1 357 0
 304 00b4 274B     		ldr	r3, .L22+40
 305 00b6 BA68     		ldr	r2, [r7, #8]
 306 00b8 1A60     		str	r2, [r3]
 358:Generated_Source\PSoC4/ADC.c **** 	
 359:Generated_Source\PSoC4/ADC.c **** 	for(chNum = 0u; chNum < config->numChannels; chNum++)
 307              		.loc 1 359 0
 308 00ba 0023     		mov	r3, #0
 309 00bc FB60     		str	r3, [r7, #12]
 310 00be 2CE0     		b	.L18
 311              	.L20:
 360:Generated_Source\PSoC4/ADC.c ****     {
 361:Generated_Source\PSoC4/ADC.c **** 		tmpRegVal = (ADC_channelsConfig[config->channelBase + chNum] 
 312              		.loc 1 361 0
 313 00c0 7B68     		ldr	r3, [r7, #4]
 314 00c2 1A68     		ldr	r2, [r3]
 315 00c4 FB68     		ldr	r3, [r7, #12]
 316 00c6 D218     		add	r2, r2, r3
 317 00c8 244B     		ldr	r3, .L22+48
 318 00ca 9200     		lsl	r2, r2, #2
 319 00cc D358     		ldr	r3, [r2, r3]
 320 00ce 244A     		ldr	r2, .L22+52
 321 00d0 1340     		and	r3, r2
 322 00d2 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 13


 362:Generated_Source\PSoC4/ADC.c **** 		& ADC_CHANNEL_CONFIG_MASK);
 363:Generated_Source\PSoC4/ADC.c ****         
 364:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1)
 365:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[config->channelBase + chNum];
 323              		.loc 1 365 0
 324 00d4 7B68     		ldr	r3, [r7, #4]
 325 00d6 1A68     		ldr	r2, [r3]
 326 00d8 FB68     		ldr	r3, [r7, #12]
 327 00da D218     		add	r2, r2, r3
 328 00dc 214B     		ldr	r3, .L22+56
 329 00de 9200     		lsl	r2, r2, #2
 330 00e0 D358     		ldr	r3, [r2, r3]
 331 00e2 BA68     		ldr	r2, [r7, #8]
 332 00e4 1343     		orr	r3, r2
 333 00e6 BB60     		str	r3, [r7, #8]
 366:Generated_Source\PSoC4/ADC.c ****             /*Non-paired differential channels set NEG_ADDR_EN and clear DIFFERENTIAL_EN */
 367:Generated_Source\PSoC4/ADC.c ****             if(0u != (ADC_InputsPlacement[config->channelBase + chNum] & ADC_CHANNEL_CONFIG_NEG_ADD
 334              		.loc 1 367 0
 335 00e8 7B68     		ldr	r3, [r7, #4]
 336 00ea 1A68     		ldr	r2, [r3]
 337 00ec FB68     		ldr	r3, [r7, #12]
 338 00ee D218     		add	r2, r2, r3
 339 00f0 1C4B     		ldr	r3, .L22+56
 340 00f2 9200     		lsl	r2, r2, #2
 341 00f4 D258     		ldr	r2, [r2, r3]
 342 00f6 8023     		mov	r3, #128
 343 00f8 5B04     		lsl	r3, r3, #17
 344 00fa 1340     		and	r3, r2
 345 00fc 03D0     		beq	.L19
 368:Generated_Source\PSoC4/ADC.c ****             {
 369:Generated_Source\PSoC4/ADC.c ****                 tmpRegVal &= ~ADC_SAR_CHAN_CONFIG_DIFFERENTIAL_EN_MSK;
 346              		.loc 1 369 0
 347 00fe BB68     		ldr	r3, [r7, #8]
 348 0100 194A     		ldr	r2, .L22+60
 349 0102 1340     		and	r3, r2
 350 0104 BB60     		str	r3, [r7, #8]
 351              	.L19:
 370:Generated_Source\PSoC4/ADC.c ****             }
 371:Generated_Source\PSoC4/ADC.c ****         #endif
 372:Generated_Source\PSoC4/ADC.c ****         
 373:Generated_Source\PSoC4/ADC.c **** 		CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 352              		.loc 1 373 0 discriminator 2
 353 0106 FB68     		ldr	r3, [r7, #12]
 354 0108 9B00     		lsl	r3, r3, #2
 355 010a 184A     		ldr	r2, .L22+64
 356 010c 9446     		mov	ip, r2
 357 010e 6344     		add	r3, r3, ip
 358 0110 BA68     		ldr	r2, [r7, #8]
 359 0112 1A60     		str	r2, [r3]
 359:Generated_Source\PSoC4/ADC.c ****     {
 360              		.loc 1 359 0 discriminator 2
 361 0114 FB68     		ldr	r3, [r7, #12]
 362 0116 0133     		add	r3, r3, #1
 363 0118 FB60     		str	r3, [r7, #12]
 364              	.L18:
 359:Generated_Source\PSoC4/ADC.c ****     {
 365              		.loc 1 359 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 14


 366 011a 7B68     		ldr	r3, [r7, #4]
 367 011c 5A68     		ldr	r2, [r3, #4]
 368 011e FB68     		ldr	r3, [r7, #12]
 369 0120 9A42     		cmp	r2, r3
 370 0122 CDD8     		bhi	.L20
 374:Generated_Source\PSoC4/ADC.c **** 	}
 375:Generated_Source\PSoC4/ADC.c **** 	
 376:Generated_Source\PSoC4/ADC.c ****     return;
 371              		.loc 1 376 0 is_stmt 1
 372 0124 C046     		mov	r8, r8
 377:Generated_Source\PSoC4/ADC.c **** }
 373              		.loc 1 377 0
 374 0126 BD46     		mov	sp, r7
 375 0128 04B0     		add	sp, sp, #16
 376              		@ sp needed
 377 012a 80BD     		pop	{r7, pc}
 378              	.L23:
 379              		.align	2
 380              	.L22:
 381 012c 80033A40 		.word	1077543808
 382 0130 00003A40 		.word	1077542912
 383 0134 04003A40 		.word	1077542916
 384 0138 18003A40 		.word	1077542936
 385 013c 1C003A40 		.word	1077542940
 386 0140 10003A40 		.word	1077542928
 387 0144 14003A40 		.word	1077542932
 388 0148 28023A40 		.word	1077543464
 389 014c 38023A40 		.word	1077543480
 390 0150 18023A40 		.word	1077543448
 391 0154 30003A40 		.word	1077542960
 392 0158 FFFFFFDF 		.word	-536870913
 393 015c 00000000 		.word	ADC_channelsConfig
 394 0160 00370080 		.word	-2147469568
 395 0164 00000000 		.word	ADC_InputsPlacement
 396 0168 FFFEFFFF 		.word	-257
 397 016c 80003A40 		.word	1077543040
 398              		.cfi_endproc
 399              	.LFE4:
 400              		.size	ADC_InitConfig, .-ADC_InitConfig
 401              		.section	.text.ADC_SelectConfig,"ax",%progbits
 402              		.align	2
 403              		.global	ADC_SelectConfig
 404              		.code	16
 405              		.thumb_func
 406              		.type	ADC_SelectConfig, %function
 407              	ADC_SelectConfig:
 408              	.LFB5:
 378:Generated_Source\PSoC4/ADC.c **** 
 379:Generated_Source\PSoC4/ADC.c **** /* ****************************************************************************
 380:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SelectConfig
 381:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//* 
 382:Generated_Source\PSoC4/ADC.c **** *
 383:Generated_Source\PSoC4/ADC.c **** * \brief Selects the predefined configuration for scanning. Disables
 384:Generated_Source\PSoC4/ADC.c **** * and re-enables the SAR and filter (if filter used).
 385:Generated_Source\PSoC4/ADC.c **** * 
 386:Generated_Source\PSoC4/ADC.c **** * \param config Number of configuration  in the ADC.
 387:Generated_Source\PSoC4/ADC.c **** * 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 15


 388:Generated_Source\PSoC4/ADC.c **** * \param restart Determines if the ADC should be  restarted after 
 389:Generated_Source\PSoC4/ADC.c **** * selecting the configuration.
 390:Generated_Source\PSoC4/ADC.c **** *
 391:Generated_Source\PSoC4/ADC.c **** * \sideeffect Calls ADC_Init() to initialize 
 392:Generated_Source\PSoC4/ADC.c **** * ADC_channelEnMasks[]
 393:Generated_Source\PSoC4/ADC.c **** *
 394:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 395:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SelectConfig
 396:Generated_Source\PSoC4/ADC.c **** *
 397:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 398:Generated_Source\PSoC4/ADC.c **** void ADC_SelectConfig(uint32 config, uint32 restart)
 399:Generated_Source\PSoC4/ADC.c **** {
 409              		.loc 1 399 0
 410              		.cfi_startproc
 411 0000 80B5     		push	{r7, lr}
 412              		.cfi_def_cfa_offset 8
 413              		.cfi_offset 7, -8
 414              		.cfi_offset 14, -4
 415 0002 82B0     		sub	sp, sp, #8
 416              		.cfi_def_cfa_offset 16
 417 0004 00AF     		add	r7, sp, #0
 418              		.cfi_def_cfa_register 7
 419 0006 7860     		str	r0, [r7, #4]
 420 0008 3960     		str	r1, [r7]
 400:Generated_Source\PSoC4/ADC.c ****     /* Check whether the configuration number is valid or not */
 401:Generated_Source\PSoC4/ADC.c ****     if(ADC_TOTAL_CONFIGS > config)
 421              		.loc 1 401 0
 422 000a 7B68     		ldr	r3, [r7, #4]
 423 000c 002B     		cmp	r3, #0
 424 000e 22D1     		bne	.L25
 402:Generated_Source\PSoC4/ADC.c ****     {
 403:Generated_Source\PSoC4/ADC.c ****         /* Stop the ADC before changing configurations */
 404:Generated_Source\PSoC4/ADC.c **** 	    ADC_Stop();
 425              		.loc 1 404 0
 426 0010 FFF7FEFF 		bl	ADC_Stop
 405:Generated_Source\PSoC4/ADC.c ****         ADC_selected = 1u;
 427              		.loc 1 405 0
 428 0014 124B     		ldr	r3, .L28
 429 0016 0122     		mov	r2, #1
 430 0018 1A70     		strb	r2, [r3]
 406:Generated_Source\PSoC4/ADC.c ****         
 407:Generated_Source\PSoC4/ADC.c ****     	if(0u == ADC_initVar)
 431              		.loc 1 407 0
 432 001a 124B     		ldr	r3, .L28+4
 433 001c 1B78     		ldrb	r3, [r3]
 434 001e 002B     		cmp	r3, #0
 435 0020 01D1     		bne	.L26
 408:Generated_Source\PSoC4/ADC.c ****     	{
 409:Generated_Source\PSoC4/ADC.c ****             ADC_Init();
 436              		.loc 1 409 0
 437 0022 FFF7FEFF 		bl	ADC_Init
 438              	.L26:
 410:Generated_Source\PSoC4/ADC.c ****     	}
 411:Generated_Source\PSoC4/ADC.c ****         #if (ADC_VREF_ROUTED)
 412:Generated_Source\PSoC4/ADC.c ****         ADC_vrefAMux_Select((uint8)config);
 413:Generated_Source\PSoC4/ADC.c ****         #endif
 414:Generated_Source\PSoC4/ADC.c ****     	ADC_InitConfig(&ADC_allConfigs[config]);
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 16


 439              		.loc 1 414 0
 440 0026 7B68     		ldr	r3, [r7, #4]
 441 0028 3422     		mov	r2, #52
 442 002a 5A43     		mul	r2, r3
 443 002c 0E4B     		ldr	r3, .L28+8
 444 002e D318     		add	r3, r2, r3
 445 0030 181C     		mov	r0, r3
 446 0032 FFF7FEFF 		bl	ADC_InitConfig
 415:Generated_Source\PSoC4/ADC.c ****         #if(0u != ADC_ANY_CONFIG_USES_FILTER)
 416:Generated_Source\PSoC4/ADC.c ****         ADC_filterVinMux_Select((uint8)config);
 417:Generated_Source\PSoC4/ADC.c ****         #endif
 418:Generated_Source\PSoC4/ADC.c ****     	ADC_SAR_CHAN_EN_REG = ADC_channelEnMasks[config];
 447              		.loc 1 418 0
 448 0036 0D4B     		ldr	r3, .L28+12
 449 0038 0D4A     		ldr	r2, .L28+16
 450 003a 7968     		ldr	r1, [r7, #4]
 451 003c 8900     		lsl	r1, r1, #2
 452 003e 8A58     		ldr	r2, [r1, r2]
 453 0040 1A60     		str	r2, [r3]
 419:Generated_Source\PSoC4/ADC.c ****     	ADC_currentConfig = config;
 454              		.loc 1 419 0
 455 0042 0C4B     		ldr	r3, .L28+20
 456 0044 7A68     		ldr	r2, [r7, #4]
 457 0046 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/ADC.c ****         
 421:Generated_Source\PSoC4/ADC.c ****         if(1u == restart)
 458              		.loc 1 421 0
 459 0048 3B68     		ldr	r3, [r7]
 460 004a 012B     		cmp	r3, #1
 461 004c 03D1     		bne	.L25
 422:Generated_Source\PSoC4/ADC.c ****         {
 423:Generated_Source\PSoC4/ADC.c ****             /* Restart the ADC */    
 424:Generated_Source\PSoC4/ADC.c ****             ADC_Start();
 462              		.loc 1 424 0
 463 004e FFF7FEFF 		bl	ADC_Start
 425:Generated_Source\PSoC4/ADC.c ****             
 426:Generated_Source\PSoC4/ADC.c ****             /* Restart the scan */
 427:Generated_Source\PSoC4/ADC.c ****             ADC_StartConvert();
 464              		.loc 1 427 0
 465 0052 FFF7FEFF 		bl	ADC_StartConvert
 466              	.L25:
 428:Generated_Source\PSoC4/ADC.c ****         }
 429:Generated_Source\PSoC4/ADC.c ****     }
 430:Generated_Source\PSoC4/ADC.c ****     return;
 467              		.loc 1 430 0
 468 0056 C046     		mov	r8, r8
 431:Generated_Source\PSoC4/ADC.c **** }
 469              		.loc 1 431 0
 470 0058 BD46     		mov	sp, r7
 471 005a 02B0     		add	sp, sp, #8
 472              		@ sp needed
 473 005c 80BD     		pop	{r7, pc}
 474              	.L29:
 475 005e C046     		.align	2
 476              	.L28:
 477 0060 00000000 		.word	ADC_selected
 478 0064 00000000 		.word	ADC_initVar
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 17


 479 0068 00000000 		.word	ADC_allConfigs
 480 006c 20003A40 		.word	1077542944
 481 0070 08000000 		.word	ADC_channelEnMasks
 482 0074 04000000 		.word	ADC_currentConfig
 483              		.cfi_endproc
 484              	.LFE5:
 485              		.size	ADC_SelectConfig, .-ADC_SelectConfig
 486              		.section	.text.ADC_StartConvert,"ax",%progbits
 487              		.align	2
 488              		.global	ADC_StartConvert
 489              		.code	16
 490              		.thumb_func
 491              		.type	ADC_StartConvert, %function
 492              	ADC_StartConvert:
 493              	.LFB6:
 432:Generated_Source\PSoC4/ADC.c **** 
 433:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 434:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 435:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * \brief In continuous mode, this API starts the conversion process and it runs 
 438:Generated_Source\PSoC4/ADC.c **** * continuously. 
 439:Generated_Source\PSoC4/ADC.c **** 
 440:Generated_Source\PSoC4/ADC.c **** * In Single Shot mode, the function triggers a single scan and 
 441:Generated_Source\PSoC4/ADC.c **** * every scan requires a call of this function. The mode is set with the 
 442:Generated_Source\PSoC4/ADC.c **** * Sample Mode parameter in the customizer. The customizer setting can be 
 443:Generated_Source\PSoC4/ADC.c **** * overridden at run time with the ADC_SetConvertMode() function.
 444:Generated_Source\PSoC4/ADC.c **** * 
 445:Generated_Source\PSoC4/ADC.c **** * \param None
 446:Generated_Source\PSoC4/ADC.c **** * 
 447:Generated_Source\PSoC4/ADC.c **** * \return None
 448:Generated_Source\PSoC4/ADC.c **** * 
 449:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 450:Generated_Source\PSoC4/ADC.c **** *
 451:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 452:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_StartConvert
 453:Generated_Source\PSoC4/ADC.c **** *
 454:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 455:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 456:Generated_Source\PSoC4/ADC.c **** {
 494              		.loc 1 456 0
 495              		.cfi_startproc
 496 0000 80B5     		push	{r7, lr}
 497              		.cfi_def_cfa_offset 8
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 500 0002 00AF     		add	r7, sp, #0
 501              		.cfi_def_cfa_register 7
 457:Generated_Source\PSoC4/ADC.c **** 	/* Freerunning mode */
 458:Generated_Source\PSoC4/ADC.c **** 	if((ADC_SAR_SAMPLE_CTRL_REG 
 502              		.loc 1 458 0
 503 0004 094B     		ldr	r3, .L34
 504 0006 1A68     		ldr	r2, [r3]
 459:Generated_Source\PSoC4/ADC.c **** 		& ADC_SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_MSK) 
 505              		.loc 1 459 0
 506 0008 8023     		mov	r3, #128
 507 000a DB02     		lsl	r3, r3, #11
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 18


 508 000c 1340     		and	r3, r2
 458:Generated_Source\PSoC4/ADC.c **** 		& ADC_SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_MSK) 
 509              		.loc 1 458 0
 510 000e 07D0     		beq	.L31
 460:Generated_Source\PSoC4/ADC.c **** 		== ADC_SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_MSK)
 461:Generated_Source\PSoC4/ADC.c ****     {
 462:Generated_Source\PSoC4/ADC.c **** 		ADC_SAR_SAMPLE_CTRL_REG |= ADC_SAR_SAMPLE_CTRL_CONTINUOUS_MSK ; 
 511              		.loc 1 462 0
 512 0010 064B     		ldr	r3, .L34
 513 0012 064A     		ldr	r2, .L34
 514 0014 1268     		ldr	r2, [r2]
 515 0016 8021     		mov	r1, #128
 516 0018 4902     		lsl	r1, r1, #9
 517 001a 0A43     		orr	r2, r1
 518 001c 1A60     		str	r2, [r3]
 519 001e 02E0     		b	.L32
 520              	.L31:
 463:Generated_Source\PSoC4/ADC.c ****         #if (ADC_ANY_CONFIG_USES_FILTER)
 464:Generated_Source\PSoC4/ADC.c ****             if (0u == (ADC_initVar & 0x2u))
 465:Generated_Source\PSoC4/ADC.c ****             {
 466:Generated_Source\PSoC4/ADC.c ****                 ADC_initVar |= 0x2u;
 467:Generated_Source\PSoC4/ADC.c ****                 ADC_TrimOffset();
 468:Generated_Source\PSoC4/ADC.c ****             }
 469:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_ANY_CONFIG_USES_FILTER && (CFG0_FILTER_TYPE == LOW_PASS)) */
 470:Generated_Source\PSoC4/ADC.c **** 	}
 471:Generated_Source\PSoC4/ADC.c **** 	else /* Firmware trigger */
 472:Generated_Source\PSoC4/ADC.c **** 	{
 473:Generated_Source\PSoC4/ADC.c **** 		ADC_SAR_START_CTRL_REG = ADC_SAR_START_CTRL_FW_TRIGGER_MSK;
 521              		.loc 1 473 0
 522 0020 034B     		ldr	r3, .L34+4
 523 0022 0122     		mov	r2, #1
 524 0024 1A60     		str	r2, [r3]
 525              	.L32:
 474:Generated_Source\PSoC4/ADC.c **** 	}
 475:Generated_Source\PSoC4/ADC.c ****     
 476:Generated_Source\PSoC4/ADC.c ****     return;
 526              		.loc 1 476 0
 527 0026 C046     		mov	r8, r8
 477:Generated_Source\PSoC4/ADC.c **** }
 528              		.loc 1 477 0
 529 0028 BD46     		mov	sp, r7
 530              		@ sp needed
 531 002a 80BD     		pop	{r7, pc}
 532              	.L35:
 533              		.align	2
 534              	.L34:
 535 002c 04003A40 		.word	1077542916
 536 0030 24003A40 		.word	1077542948
 537              		.cfi_endproc
 538              	.LFE6:
 539              		.size	ADC_StartConvert, .-ADC_StartConvert
 540              		.section	.text.ADC_StopConvert,"ax",%progbits
 541              		.align	2
 542              		.global	ADC_StopConvert
 543              		.code	16
 544              		.thumb_func
 545              		.type	ADC_StopConvert, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 19


 546              	ADC_StopConvert:
 547              	.LFB7:
 478:Generated_Source\PSoC4/ADC.c **** 
 479:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 480:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 481:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 482:Generated_Source\PSoC4/ADC.c **** *
 483:Generated_Source\PSoC4/ADC.c **** * \brief Forces the ADC to stop conversions. If a conversion is 
 484:Generated_Source\PSoC4/ADC.c **** * currently executing, that conversion will complete, but no further conversions 
 485:Generated_Source\PSoC4/ADC.c **** * will occur.
 486:Generated_Source\PSoC4/ADC.c **** * 
 487:Generated_Source\PSoC4/ADC.c **** * \param None
 488:Generated_Source\PSoC4/ADC.c **** *
 489:Generated_Source\PSoC4/ADC.c **** * \return None
 490:Generated_Source\PSoC4/ADC.c **** *
 491:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 494:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_StopConvert
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 497:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 498:Generated_Source\PSoC4/ADC.c **** {
 548              		.loc 1 498 0
 549              		.cfi_startproc
 550 0000 80B5     		push	{r7, lr}
 551              		.cfi_def_cfa_offset 8
 552              		.cfi_offset 7, -8
 553              		.cfi_offset 14, -4
 554 0002 00AF     		add	r7, sp, #0
 555              		.cfi_def_cfa_register 7
 499:Generated_Source\PSoC4/ADC.c ****     if((ADC_SAR_SAMPLE_CTRL_REG  
 556              		.loc 1 499 0
 557 0004 0E4B     		ldr	r3, .L39
 558 0006 1A68     		ldr	r2, [r3]
 500:Generated_Source\PSoC4/ADC.c **** 		& ADC_SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_MSK) 
 559              		.loc 1 500 0
 560 0008 8023     		mov	r3, #128
 561 000a DB02     		lsl	r3, r3, #11
 562 000c 1340     		and	r3, r2
 499:Generated_Source\PSoC4/ADC.c ****     if((ADC_SAR_SAMPLE_CTRL_REG  
 563              		.loc 1 499 0
 564 000e 14D0     		beq	.L37
 501:Generated_Source\PSoC4/ADC.c **** 		== ADC_SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_MSK)
 502:Generated_Source\PSoC4/ADC.c **** 	{
 503:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= ~ADC_SAR_SAMPLE_CTRL_CONTINUOUS_MSK;
 565              		.loc 1 503 0
 566 0010 0B4B     		ldr	r3, .L39
 567 0012 0B4A     		ldr	r2, .L39
 568 0014 1268     		ldr	r2, [r2]
 569 0016 0B49     		ldr	r1, .L39+4
 570 0018 0A40     		and	r2, r1
 571 001a 1A60     		str	r2, [r3]
 504:Generated_Source\PSoC4/ADC.c ****         
 505:Generated_Source\PSoC4/ADC.c ****         if((ADC_allConfigs[ADC_currentConfig].miscConfig 
 572              		.loc 1 505 0
 573 001c 0A4B     		ldr	r3, .L39+8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 20


 574 001e 1B68     		ldr	r3, [r3]
 575 0020 0A4A     		ldr	r2, .L39+12
 576 0022 3421     		mov	r1, #52
 577 0024 4B43     		mul	r3, r1
 578 0026 D318     		add	r3, r2, r3
 579 0028 3033     		add	r3, r3, #48
 580 002a 1B68     		ldr	r3, [r3]
 506:Generated_Source\PSoC4/ADC.c ****             & ADC_MISC_CONFIG_FILTER_PRESENT_MSK) 
 581              		.loc 1 506 0
 582 002c 0222     		mov	r2, #2
 583 002e 1340     		and	r3, r2
 505:Generated_Source\PSoC4/ADC.c ****             & ADC_MISC_CONFIG_FILTER_PRESENT_MSK) 
 584              		.loc 1 505 0
 585 0030 03D0     		beq	.L37
 507:Generated_Source\PSoC4/ADC.c ****     	    == ADC_MISC_CONFIG_FILTER_PRESENT_MSK)
 508:Generated_Source\PSoC4/ADC.c ****         {
 509:Generated_Source\PSoC4/ADC.c ****             /* Re-synchronize the Filter if a filter is present */
 510:Generated_Source\PSoC4/ADC.c ****             ADC_Stop();
 586              		.loc 1 510 0
 587 0032 FFF7FEFF 		bl	ADC_Stop
 511:Generated_Source\PSoC4/ADC.c ****             ADC_Start();
 588              		.loc 1 511 0
 589 0036 FFF7FEFF 		bl	ADC_Start
 590              	.L37:
 512:Generated_Source\PSoC4/ADC.c ****         }
 513:Generated_Source\PSoC4/ADC.c **** 	}
 514:Generated_Source\PSoC4/ADC.c ****     
 515:Generated_Source\PSoC4/ADC.c ****     return;
 591              		.loc 1 515 0
 592 003a C046     		mov	r8, r8
 516:Generated_Source\PSoC4/ADC.c **** }
 593              		.loc 1 516 0
 594 003c BD46     		mov	sp, r7
 595              		@ sp needed
 596 003e 80BD     		pop	{r7, pc}
 597              	.L40:
 598              		.align	2
 599              	.L39:
 600 0040 04003A40 		.word	1077542916
 601 0044 FFFFFEFF 		.word	-65537
 602 0048 04000000 		.word	ADC_currentConfig
 603 004c 00000000 		.word	ADC_allConfigs
 604              		.cfi_endproc
 605              	.LFE7:
 606              		.size	ADC_StopConvert, .-ADC_StopConvert
 607              		.section	.text.ADC_SetConvertMode,"ax",%progbits
 608              		.align	2
 609              		.global	ADC_SetConvertMode
 610              		.code	16
 611              		.thumb_func
 612              		.type	ADC_SetConvertMode, %function
 613              	ADC_SetConvertMode:
 614              	.LFB8:
 517:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 518:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetConvertMode
 519:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 520:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 21


 521:Generated_Source\PSoC4/ADC.c **** * \brief Sets the conversion mode to either Single-Shot or continuous. This 
 522:Generated_Source\PSoC4/ADC.c **** * function overrides the settings applied in the customizer. Changing 
 523:Generated_Source\PSoC4/ADC.c **** * configurations will restore the values set in the customizer.
 524:Generated_Source\PSoC4/ADC.c **** *
 525:Generated_Source\PSoC4/ADC.c **** * \param mode Sets the conversion mode. See table below for details.
 526:Generated_Source\PSoC4/ADC.c **** * | Options                          | Description                             |
 527:Generated_Source\PSoC4/ADC.c **** * | :------------------------------- | :-------------------------------------- |
 528:Generated_Source\PSoC4/ADC.c **** * | ADC_SINGLE_SHOT     | Calling the ADC_StartConvert() function after setting mode this will trig
 529:Generated_Source\PSoC4/ADC.c **** * | ADC_CONTINUOUS      | Calling the ADC_StartConvert() function after setting this mode trigger c
 530:Generated_Source\PSoC4/ADC.c **** *
 531:Generated_Source\PSoC4/ADC.c **** * \return None
 532:Generated_Source\PSoC4/ADC.c **** * 
 533:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 534:Generated_Source\PSoC4/ADC.c **** *
 535:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 536:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SetConvertMode
 537:Generated_Source\PSoC4/ADC.c **** *
 538:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 539:Generated_Source\PSoC4/ADC.c **** void ADC_SetConvertMode(uint32 mode)
 540:Generated_Source\PSoC4/ADC.c **** {
 615              		.loc 1 540 0
 616              		.cfi_startproc
 617 0000 80B5     		push	{r7, lr}
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 621 0002 82B0     		sub	sp, sp, #8
 622              		.cfi_def_cfa_offset 16
 623 0004 00AF     		add	r7, sp, #0
 624              		.cfi_def_cfa_register 7
 625 0006 7860     		str	r0, [r7, #4]
 541:Generated_Source\PSoC4/ADC.c ****     if(ADC_CONTINUOUS == mode)
 626              		.loc 1 541 0
 627 0008 7B68     		ldr	r3, [r7, #4]
 628 000a 012B     		cmp	r3, #1
 629 000c 07D1     		bne	.L42
 542:Generated_Source\PSoC4/ADC.c ****     {
 543:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_MSK;       
 630              		.loc 1 543 0
 631 000e 084B     		ldr	r3, .L44
 632 0010 074A     		ldr	r2, .L44
 633 0012 1268     		ldr	r2, [r2]
 634 0014 8021     		mov	r1, #128
 635 0016 C902     		lsl	r1, r1, #11
 636 0018 0A43     		orr	r2, r1
 637 001a 1A60     		str	r2, [r3]
 638 001c 05E0     		b	.L41
 639              	.L42:
 544:Generated_Source\PSoC4/ADC.c ****     }
 545:Generated_Source\PSoC4/ADC.c ****     else
 546:Generated_Source\PSoC4/ADC.c ****     {
 547:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= ~ADC_SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_MSK;       
 640              		.loc 1 547 0
 641 001e 044B     		ldr	r3, .L44
 642 0020 034A     		ldr	r2, .L44
 643 0022 1268     		ldr	r2, [r2]
 644 0024 0349     		ldr	r1, .L44+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 22


 645 0026 0A40     		and	r2, r1
 646 0028 1A60     		str	r2, [r3]
 647              	.L41:
 548:Generated_Source\PSoC4/ADC.c ****     }
 549:Generated_Source\PSoC4/ADC.c **** }
 648              		.loc 1 549 0
 649 002a BD46     		mov	sp, r7
 650 002c 02B0     		add	sp, sp, #8
 651              		@ sp needed
 652 002e 80BD     		pop	{r7, pc}
 653              	.L45:
 654              		.align	2
 655              	.L44:
 656 0030 04003A40 		.word	1077542916
 657 0034 FFFFFBFF 		.word	-262145
 658              		.cfi_endproc
 659              	.LFE8:
 660              		.size	ADC_SetConvertMode, .-ADC_SetConvertMode
 661              		.section	.text.ADC_SetEosMask,"ax",%progbits
 662              		.align	2
 663              		.global	ADC_SetEosMask
 664              		.code	16
 665              		.thumb_func
 666              		.type	ADC_SetEosMask, %function
 667              	ADC_SetEosMask:
 668              	.LFB9:
 550:Generated_Source\PSoC4/ADC.c **** /* ****************************************************************************
 551:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IRQ_Enable
 552:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//*
 553:Generated_Source\PSoC4/ADC.c **** *
 554:Generated_Source\PSoC4/ADC.c **** * \brief Enables interrupts to occur at the end of a conversion. Global 
 555:Generated_Source\PSoC4/ADC.c **** * interrupts must also be enabled for the ADC interrupts to occur.
 556:Generated_Source\PSoC4/ADC.c **** *
 557:Generated_Source\PSoC4/ADC.c **** * \param None
 558:Generated_Source\PSoC4/ADC.c **** *
 559:Generated_Source\PSoC4/ADC.c **** * \return None
 560:Generated_Source\PSoC4/ADC.c **** *
 561:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 562:Generated_Source\PSoC4/ADC.c **** *
 563:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 564:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_IRQ_Enable
 565:Generated_Source\PSoC4/ADC.c **** *
 566:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 567:Generated_Source\PSoC4/ADC.c **** 
 568:Generated_Source\PSoC4/ADC.c **** 
 569:Generated_Source\PSoC4/ADC.c **** /* ****************************************************************************
 570:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IRQ_Disable
 571:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//* 
 572:Generated_Source\PSoC4/ADC.c **** *
 573:Generated_Source\PSoC4/ADC.c **** * \brief Disables end of conversion interrupts. 
 574:Generated_Source\PSoC4/ADC.c **** *
 575:Generated_Source\PSoC4/ADC.c **** * \param None
 576:Generated_Source\PSoC4/ADC.c **** * 
 577:Generated_Source\PSoC4/ADC.c **** * \return None
 578:Generated_Source\PSoC4/ADC.c **** * 
 579:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 580:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 23


 581:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 582:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_IRQ_Disable
 583:Generated_Source\PSoC4/ADC.c **** *
 584:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 585:Generated_Source\PSoC4/ADC.c **** 
 586:Generated_Source\PSoC4/ADC.c **** 
 587:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 588:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetEosMask
 589:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 590:Generated_Source\PSoC4/ADC.c **** *
 591:Generated_Source\PSoC4/ADC.c **** * \brief Sets of clears the End of Scan (EOS) interrupt mask. 
 592:Generated_Source\PSoC4/ADC.c **** *
 593:Generated_Source\PSoC4/ADC.c **** * \param mask 1 to set the mask, 0 to clear the mask.
 594:Generated_Source\PSoC4/ADC.c **** *
 595:Generated_Source\PSoC4/ADC.c **** * \return None
 596:Generated_Source\PSoC4/ADC.c **** * 
 597:Generated_Source\PSoC4/ADC.c **** * \sideeffect All other bits in the INTR register are cleared by this function.
 598:Generated_Source\PSoC4/ADC.c **** *
 599:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 600:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SetEosMask
 601:Generated_Source\PSoC4/ADC.c **** *
 602:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 603:Generated_Source\PSoC4/ADC.c **** void ADC_SetEosMask(uint32 mask)
 604:Generated_Source\PSoC4/ADC.c **** {
 669              		.loc 1 604 0
 670              		.cfi_startproc
 671 0000 80B5     		push	{r7, lr}
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 7, -8
 674              		.cfi_offset 14, -4
 675 0002 82B0     		sub	sp, sp, #8
 676              		.cfi_def_cfa_offset 16
 677 0004 00AF     		add	r7, sp, #0
 678              		.cfi_def_cfa_register 7
 679 0006 7860     		str	r0, [r7, #4]
 605:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = mask & ADC_EOS_MASK;
 680              		.loc 1 605 0
 681 0008 044B     		ldr	r3, .L48
 682 000a 7A68     		ldr	r2, [r7, #4]
 683 000c 0121     		mov	r1, #1
 684 000e 0A40     		and	r2, r1
 685 0010 1A60     		str	r2, [r3]
 606:Generated_Source\PSoC4/ADC.c ****     
 607:Generated_Source\PSoC4/ADC.c ****     return;
 686              		.loc 1 607 0
 687 0012 C046     		mov	r8, r8
 608:Generated_Source\PSoC4/ADC.c **** }
 688              		.loc 1 608 0
 689 0014 BD46     		mov	sp, r7
 690 0016 02B0     		add	sp, sp, #8
 691              		@ sp needed
 692 0018 80BD     		pop	{r7, pc}
 693              	.L49:
 694 001a C046     		.align	2
 695              	.L48:
 696 001c 18023A40 		.word	1077543448
 697              		.cfi_endproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 24


 698              	.LFE9:
 699              		.size	ADC_SetEosMask, .-ADC_SetEosMask
 700              		.section	.text.ADC_SetChanMask,"ax",%progbits
 701              		.align	2
 702              		.global	ADC_SetChanMask
 703              		.code	16
 704              		.thumb_func
 705              		.type	ADC_SetChanMask, %function
 706              	ADC_SetChanMask:
 707              	.LFB10:
 609:Generated_Source\PSoC4/ADC.c **** 
 610:Generated_Source\PSoC4/ADC.c **** /* ****************************************************************************
 611:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 612:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//*
 613:Generated_Source\PSoC4/ADC.c **** *
 614:Generated_Source\PSoC4/ADC.c **** * \brief Sets enable/disable mask for all channels.
 615:Generated_Source\PSoC4/ADC.c **** *
 616:Generated_Source\PSoC4/ADC.c **** *
 617:Generated_Source\PSoC4/ADC.c **** * \param chanMask
 618:Generated_Source\PSoC4/ADC.c **** *  Channel mask.
 619:Generated_Source\PSoC4/ADC.c **** *
 620:Generated_Source\PSoC4/ADC.c **** * \sideeffect
 621:Generated_Source\PSoC4/ADC.c **** *  None.
 622:Generated_Source\PSoC4/ADC.c **** *
 623:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 624:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SetChanMask
 625:Generated_Source\PSoC4/ADC.c **** *
 626:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 627:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 chanMask)
 628:Generated_Source\PSoC4/ADC.c **** {
 708              		.loc 1 628 0
 709              		.cfi_startproc
 710 0000 80B5     		push	{r7, lr}
 711              		.cfi_def_cfa_offset 8
 712              		.cfi_offset 7, -8
 713              		.cfi_offset 14, -4
 714 0002 82B0     		sub	sp, sp, #8
 715              		.cfi_def_cfa_offset 16
 716 0004 00AF     		add	r7, sp, #0
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 629:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = chanMask & ADC_MAX_CHANNELS_EN_MASK;
 719              		.loc 1 629 0
 720 0008 084B     		ldr	r3, .L52
 721 000a 7A68     		ldr	r2, [r7, #4]
 722 000c 7F21     		mov	r1, #127
 723 000e 0A40     		and	r2, r1
 724 0010 1A60     		str	r2, [r3]
 630:Generated_Source\PSoC4/ADC.c ****     ADC_channelEnMasks[ADC_currentConfig] = chanMask & ADC_MAX_CHANNELS_EN_MASK;
 725              		.loc 1 630 0
 726 0012 074B     		ldr	r3, .L52+4
 727 0014 1A68     		ldr	r2, [r3]
 728 0016 7B68     		ldr	r3, [r7, #4]
 729 0018 7F21     		mov	r1, #127
 730 001a 1940     		and	r1, r3
 731 001c 054B     		ldr	r3, .L52+8
 732 001e 9200     		lsl	r2, r2, #2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 25


 733 0020 D150     		str	r1, [r2, r3]
 631:Generated_Source\PSoC4/ADC.c ****     return;
 734              		.loc 1 631 0
 735 0022 C046     		mov	r8, r8
 632:Generated_Source\PSoC4/ADC.c **** }
 736              		.loc 1 632 0
 737 0024 BD46     		mov	sp, r7
 738 0026 02B0     		add	sp, sp, #8
 739              		@ sp needed
 740 0028 80BD     		pop	{r7, pc}
 741              	.L53:
 742 002a C046     		.align	2
 743              	.L52:
 744 002c 20003A40 		.word	1077542944
 745 0030 04000000 		.word	ADC_currentConfig
 746 0034 08000000 		.word	ADC_channelEnMasks
 747              		.cfi_endproc
 748              	.LFE10:
 749              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 750              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 751              		.align	2
 752              		.global	ADC_IsEndConversion
 753              		.code	16
 754              		.thumb_func
 755              		.type	ADC_IsEndConversion, %function
 756              	ADC_IsEndConversion:
 757              	.LFB11:
 633:Generated_Source\PSoC4/ADC.c **** 
 634:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 635:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 636:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 637:Generated_Source\PSoC4/ADC.c **** *
 638:Generated_Source\PSoC4/ADC.c **** * \brief Immediately returns the status of the conversion or does not return 
 639:Generated_Source\PSoC4/ADC.c **** * (blocking) until the conversion completes, depending on the retMode parameter.
 640:Generated_Source\PSoC4/ADC.c **** *
 641:Generated_Source\PSoC4/ADC.c **** * \param retMode Check conversion return mode. See the following table for 
 642:Generated_Source\PSoC4/ADC.c **** * options.
 643:Generated_Source\PSoC4/ADC.c **** * | Options                              | Description                             |
 644:Generated_Source\PSoC4/ADC.c **** * | :-------------------------------     | :-------------------------------------- |
 645:Generated_Source\PSoC4/ADC.c **** * | ADC_RETURN_STATUS       | Immediately returns the conversion status for sequential channels. If
 646:Generated_Source\PSoC4/ADC.c **** * | ADC_WAIT_FOR_RESULT     | Does not return a result until the ADC conversion of all sequential c
 647:Generated_Source\PSoC4/ADC.c **** * | ADC_RETURN_STATUS_INJ   | Immediately returns the conversion status for the injection channel. 
 648:Generated_Source\PSoC4/ADC.c **** * | ADC_WAIT_FOR_RESULT_INJ | Does not return a result until the ADC completes injection channel co
 649:Generated_Source\PSoC4/ADC.c **** * 
 650:Generated_Source\PSoC4/ADC.c **** * \return uint8: If a nonzero value is returned, the last conversion is complete. 
 651:Generated_Source\PSoC4/ADC.c **** * If the returned value is zero, the ADC is still calculating the last result.
 652:Generated_Source\PSoC4/ADC.c **** *
 653:Generated_Source\PSoC4/ADC.c **** * \sideeffect This function reads the end of conversion status, and clears it afterward.
 654:Generated_Source\PSoC4/ADC.c **** * 
 655:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 656:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_IsEndConversion
 657:Generated_Source\PSoC4/ADC.c **** *
 658:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 659:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 660:Generated_Source\PSoC4/ADC.c **** {
 758              		.loc 1 660 0
 759              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 26


 760 0000 80B5     		push	{r7, lr}
 761              		.cfi_def_cfa_offset 8
 762              		.cfi_offset 7, -8
 763              		.cfi_offset 14, -4
 764 0002 84B0     		sub	sp, sp, #16
 765              		.cfi_def_cfa_offset 24
 766 0004 00AF     		add	r7, sp, #0
 767              		.cfi_def_cfa_register 7
 768 0006 7860     		str	r0, [r7, #4]
 661:Generated_Source\PSoC4/ADC.c ****     uint32 endOfConversion = 0u;
 769              		.loc 1 661 0
 770 0008 0023     		mov	r3, #0
 771 000a FB60     		str	r3, [r7, #12]
 662:Generated_Source\PSoC4/ADC.c ****     uint32 wdt = 0x3FFFFFFuL; /* Watchdog timer for blocking while loop */
 772              		.loc 1 662 0
 773 000c 124B     		ldr	r3, .L59
 774 000e BB60     		str	r3, [r7, #8]
 663:Generated_Source\PSoC4/ADC.c ****     if((ADC_RETURN_STATUS == retMode) || (ADC_WAIT_FOR_RESULT == retMode))
 775              		.loc 1 663 0
 776 0010 7B68     		ldr	r3, [r7, #4]
 777 0012 012B     		cmp	r3, #1
 778 0014 02D0     		beq	.L55
 779              		.loc 1 663 0 is_stmt 0 discriminator 1
 780 0016 7B68     		ldr	r3, [r7, #4]
 781 0018 022B     		cmp	r3, #2
 782 001a 17D1     		bne	.L56
 783              	.L55:
 664:Generated_Source\PSoC4/ADC.c ****     {
 665:Generated_Source\PSoC4/ADC.c ****         do
 666:Generated_Source\PSoC4/ADC.c ****         {
 667:Generated_Source\PSoC4/ADC.c ****             endOfConversion = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 784              		.loc 1 667 0 is_stmt 1 discriminator 1
 785 001c 0F4B     		ldr	r3, .L59+4
 786 001e 1B68     		ldr	r3, [r3]
 787 0020 0122     		mov	r2, #1
 788 0022 1340     		and	r3, r2
 789 0024 FB60     		str	r3, [r7, #12]
 668:Generated_Source\PSoC4/ADC.c ****             wdt--;
 790              		.loc 1 668 0 discriminator 1
 791 0026 BB68     		ldr	r3, [r7, #8]
 792 0028 013B     		sub	r3, r3, #1
 793 002a BB60     		str	r3, [r7, #8]
 669:Generated_Source\PSoC4/ADC.c ****         }while(((0u == endOfConversion) 
 670:Generated_Source\PSoC4/ADC.c ****             && (((uint32) retMode & ADC_WAIT_FOR_RESULT) != 0u))
 671:Generated_Source\PSoC4/ADC.c ****             && (0uL != wdt));
 794              		.loc 1 671 0 discriminator 1
 795 002c FB68     		ldr	r3, [r7, #12]
 796 002e 002B     		cmp	r3, #0
 797 0030 06D1     		bne	.L57
 670:Generated_Source\PSoC4/ADC.c ****             && (0uL != wdt));
 798              		.loc 1 670 0
 799 0032 7B68     		ldr	r3, [r7, #4]
 800 0034 0222     		mov	r2, #2
 801 0036 1340     		and	r3, r2
 802 0038 02D0     		beq	.L57
 803              		.loc 1 671 0
 804 003a BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 27


 805 003c 002B     		cmp	r3, #0
 806 003e EDD1     		bne	.L55
 807              	.L57:
 672:Generated_Source\PSoC4/ADC.c **** 
 673:Generated_Source\PSoC4/ADC.c ****         if(0u != endOfConversion)
 808              		.loc 1 673 0
 809 0040 FB68     		ldr	r3, [r7, #12]
 810 0042 002B     		cmp	r3, #0
 811 0044 02D0     		beq	.L56
 674:Generated_Source\PSoC4/ADC.c ****         {
 675:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 676:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 812              		.loc 1 676 0
 813 0046 054B     		ldr	r3, .L59+4
 814 0048 0122     		mov	r2, #1
 815 004a 1A60     		str	r2, [r3]
 816              	.L56:
 677:Generated_Source\PSoC4/ADC.c ****         }
 678:Generated_Source\PSoC4/ADC.c ****     }
 679:Generated_Source\PSoC4/ADC.c ****     
 680:Generated_Source\PSoC4/ADC.c ****     return endOfConversion;
 817              		.loc 1 680 0
 818 004c FB68     		ldr	r3, [r7, #12]
 681:Generated_Source\PSoC4/ADC.c **** }
 819              		.loc 1 681 0
 820 004e 181C     		mov	r0, r3
 821 0050 BD46     		mov	sp, r7
 822 0052 04B0     		add	sp, sp, #16
 823              		@ sp needed
 824 0054 80BD     		pop	{r7, pc}
 825              	.L60:
 826 0056 C046     		.align	2
 827              	.L59:
 828 0058 FFFFFF03 		.word	67108863
 829 005c 10023A40 		.word	1077543440
 830              		.cfi_endproc
 831              	.LFE11:
 832              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 833              		.section	.text.ADC_IsChannelSigned,"ax",%progbits
 834              		.align	2
 835              		.code	16
 836              		.thumb_func
 837              		.type	ADC_IsChannelSigned, %function
 838              	ADC_IsChannelSigned:
 839              	.LFB12:
 682:Generated_Source\PSoC4/ADC.c ****  
 683:Generated_Source\PSoC4/ADC.c **** /* ****************************************************************************
 684:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsChannelSigned(uint32 chan)
 685:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//*
 686:Generated_Source\PSoC4/ADC.c **** *
 687:Generated_Source\PSoC4/ADC.c **** * Determines if the provided channel is in signed format. 
 688:Generated_Source\PSoC4/ADC.c **** *
 689:Generated_Source\PSoC4/ADC.c **** * \param chan The ADC channel to check. 
 690:Generated_Source\PSoC4/ADC.c **** *
 691:Generated_Source\PSoC4/ADC.c **** * \return None
 692:Generated_Source\PSoC4/ADC.c **** * 
 693:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 28


 694:Generated_Source\PSoC4/ADC.c **** *
 695:Generated_Source\PSoC4/ADC.c **** *
 696:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 697:Generated_Source\PSoC4/ADC.c **** static int32 ADC_IsChannelSigned(uint32 chan)
 698:Generated_Source\PSoC4/ADC.c **** {
 840              		.loc 1 698 0
 841              		.cfi_startproc
 842 0000 80B5     		push	{r7, lr}
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 7, -8
 845              		.cfi_offset 14, -4
 846 0002 84B0     		sub	sp, sp, #16
 847              		.cfi_def_cfa_offset 24
 848 0004 00AF     		add	r7, sp, #0
 849              		.cfi_def_cfa_register 7
 850 0006 7860     		str	r0, [r7, #4]
 699:Generated_Source\PSoC4/ADC.c ****     int32 isSigned = 0;
 851              		.loc 1 699 0
 852 0008 0023     		mov	r3, #0
 853 000a FB60     		str	r3, [r7, #12]
 700:Generated_Source\PSoC4/ADC.c ****     uint32 chanConfig;
 701:Generated_Source\PSoC4/ADC.c ****     
 702:Generated_Source\PSoC4/ADC.c ****     chanConfig = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chan << 2u)));
 854              		.loc 1 702 0
 855 000c 7B68     		ldr	r3, [r7, #4]
 856 000e 9B00     		lsl	r3, r3, #2
 857 0010 144A     		ldr	r2, .L66
 858 0012 9446     		mov	ip, r2
 859 0014 6344     		add	r3, r3, ip
 860 0016 1B68     		ldr	r3, [r3]
 861 0018 BB60     		str	r3, [r7, #8]
 703:Generated_Source\PSoC4/ADC.c ****     /* If differential mode */
 704:Generated_Source\PSoC4/ADC.c ****     if(0u != (chanConfig & ADC_CHANNEL_CONFIG_DIFF_ALL_MSK))
 862              		.loc 1 704 0
 863 001a BB68     		ldr	r3, [r7, #8]
 864 001c 124A     		ldr	r2, .L66+4
 865 001e 1340     		and	r3, r2
 866 0020 0DD0     		beq	.L62
 705:Generated_Source\PSoC4/ADC.c ****     {
 706:Generated_Source\PSoC4/ADC.c ****         /*If signed differential */
 707:Generated_Source\PSoC4/ADC.c ****         if((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 867              		.loc 1 707 0
 868 0022 124B     		ldr	r3, .L66+8
 869 0024 1B68     		ldr	r3, [r3]
 870 0026 124A     		ldr	r2, .L66+12
 871 0028 3421     		mov	r1, #52
 872 002a 4B43     		mul	r3, r1
 873 002c D318     		add	r3, r2, r3
 874 002e 0833     		add	r3, r3, #8
 875 0030 5B68     		ldr	r3, [r3, #4]
 708:Generated_Source\PSoC4/ADC.c ****             & ADC_SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_MSK) != 0u)
 876              		.loc 1 708 0
 877 0032 0822     		mov	r2, #8
 878 0034 1340     		and	r3, r2
 707:Generated_Source\PSoC4/ADC.c ****             & ADC_SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_MSK) != 0u)
 879              		.loc 1 707 0
 880 0036 0FD0     		beq	.L64
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 29


 709:Generated_Source\PSoC4/ADC.c ****         {
 710:Generated_Source\PSoC4/ADC.c ****             isSigned = 1;
 881              		.loc 1 710 0
 882 0038 0123     		mov	r3, #1
 883 003a FB60     		str	r3, [r7, #12]
 884 003c 0CE0     		b	.L64
 885              	.L62:
 711:Generated_Source\PSoC4/ADC.c ****         }
 712:Generated_Source\PSoC4/ADC.c ****     }
 713:Generated_Source\PSoC4/ADC.c ****     else
 714:Generated_Source\PSoC4/ADC.c ****     {
 715:Generated_Source\PSoC4/ADC.c ****         if((ADC_allConfigs[ADC_currentConfig].sampleCtrl
 886              		.loc 1 715 0
 887 003e 0B4B     		ldr	r3, .L66+8
 888 0040 1B68     		ldr	r3, [r3]
 889 0042 0B4A     		ldr	r2, .L66+12
 890 0044 3421     		mov	r1, #52
 891 0046 4B43     		mul	r3, r1
 892 0048 D318     		add	r3, r2, r3
 893 004a 0833     		add	r3, r3, #8
 894 004c 5B68     		ldr	r3, [r3, #4]
 716:Generated_Source\PSoC4/ADC.c ****             & ADC_SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_MSK) != 0u)
 895              		.loc 1 716 0
 896 004e 0422     		mov	r2, #4
 897 0050 1340     		and	r3, r2
 715:Generated_Source\PSoC4/ADC.c ****             & ADC_SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_MSK) != 0u)
 898              		.loc 1 715 0
 899 0052 01D0     		beq	.L64
 717:Generated_Source\PSoC4/ADC.c ****         {
 718:Generated_Source\PSoC4/ADC.c ****             isSigned = 1;
 900              		.loc 1 718 0
 901 0054 0123     		mov	r3, #1
 902 0056 FB60     		str	r3, [r7, #12]
 903              	.L64:
 719:Generated_Source\PSoC4/ADC.c ****         }
 720:Generated_Source\PSoC4/ADC.c ****     }
 721:Generated_Source\PSoC4/ADC.c ****     return isSigned;
 904              		.loc 1 721 0
 905 0058 FB68     		ldr	r3, [r7, #12]
 722:Generated_Source\PSoC4/ADC.c **** }
 906              		.loc 1 722 0
 907 005a 181C     		mov	r0, r3
 908 005c BD46     		mov	sp, r7
 909 005e 04B0     		add	sp, sp, #16
 910              		@ sp needed
 911 0060 80BD     		pop	{r7, pc}
 912              	.L67:
 913 0062 C046     		.align	2
 914              	.L66:
 915 0064 80003A40 		.word	1077543040
 916 0068 00010001 		.word	16777472
 917 006c 04000000 		.word	ADC_currentConfig
 918 0070 00000000 		.word	ADC_allConfigs
 919              		.cfi_endproc
 920              	.LFE12:
 921              		.size	ADC_IsChannelSigned, .-ADC_IsChannelSigned
 922              		.section	.text.ADC_GetResult16,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 30


 923              		.align	2
 924              		.global	ADC_GetResult16
 925              		.code	16
 926              		.thumb_func
 927              		.type	ADC_GetResult16, %function
 928              	ADC_GetResult16:
 929              	.LFB13:
 723:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 724:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 725:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 726:Generated_Source\PSoC4/ADC.c **** *
 727:Generated_Source\PSoC4/ADC.c **** * \brief Gets the data available in the channel result data register
 728:Generated_Source\PSoC4/ADC.c **** *
 729:Generated_Source\PSoC4/ADC.c **** * \param chan The ADC channel to read the result from. The first 
 730:Generated_Source\PSoC4/ADC.c **** * channel is 0 and the injection channel if enabled is the number of valid 
 731:Generated_Source\PSoC4/ADC.c **** * channels.
 732:Generated_Source\PSoC4/ADC.c **** *
 733:Generated_Source\PSoC4/ADC.c **** * \return Returns converted data as a signed 16-bit integer.
 734:Generated_Source\PSoC4/ADC.c **** * 
 735:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 736:Generated_Source\PSoC4/ADC.c **** * 
 737:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 738:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_GetResult16
 739:Generated_Source\PSoC4/ADC.c **** *
 740:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 741:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 742:Generated_Source\PSoC4/ADC.c **** {
 930              		.loc 1 742 0
 931              		.cfi_startproc
 932 0000 80B5     		push	{r7, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 0002 84B0     		sub	sp, sp, #16
 937              		.cfi_def_cfa_offset 24
 938 0004 00AF     		add	r7, sp, #0
 939              		.cfi_def_cfa_register 7
 940 0006 7860     		str	r0, [r7, #4]
 743:Generated_Source\PSoC4/ADC.c ****     uint32 adcResult;
 744:Generated_Source\PSoC4/ADC.c ****     
 745:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 746:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 941              		.loc 1 746 0
 942 0008 7B68     		ldr	r3, [r7, #4]
 943 000a 062B     		cmp	r3, #6
 944 000c 02D9     		bls	.L69
 945              		.loc 1 746 0 is_stmt 0 discriminator 1
 946 000e 0020     		mov	r0, #0
 947 0010 FFF7FEFF 		bl	CyHalt
 948              	.L69:
 747:Generated_Source\PSoC4/ADC.c **** 
 748:Generated_Source\PSoC4/ADC.c ****     if(ADC_TOTAL_CHANNELS_NUM > chan)
 949              		.loc 1 748 0 is_stmt 1
 950 0014 7B68     		ldr	r3, [r7, #4]
 951 0016 062B     		cmp	r3, #6
 952 0018 09D8     		bhi	.L70
 749:Generated_Source\PSoC4/ADC.c ****     {   
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 31


 750:Generated_Source\PSoC4/ADC.c ****         adcResult = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 953              		.loc 1 750 0
 954 001a 7B68     		ldr	r3, [r7, #4]
 955 001c 9B00     		lsl	r3, r3, #2
 956 001e 084A     		ldr	r2, .L73
 957 0020 9446     		mov	ip, r2
 958 0022 6344     		add	r3, r3, ip
 959 0024 1B68     		ldr	r3, [r3]
 960 0026 1B04     		lsl	r3, r3, #16
 961 0028 1B0C     		lsr	r3, r3, #16
 962 002a FB60     		str	r3, [r7, #12]
 963 002c 01E0     		b	.L71
 964              	.L70:
 751:Generated_Source\PSoC4/ADC.c ****             ADC_RESULT_MASK; 
 752:Generated_Source\PSoC4/ADC.c ****     }
 753:Generated_Source\PSoC4/ADC.c ****     else
 754:Generated_Source\PSoC4/ADC.c ****     {
 755:Generated_Source\PSoC4/ADC.c **** 		adcResult = 0u;
 965              		.loc 1 755 0
 966 002e 0023     		mov	r3, #0
 967 0030 FB60     		str	r3, [r7, #12]
 968              	.L71:
 756:Generated_Source\PSoC4/ADC.c ****     }
 757:Generated_Source\PSoC4/ADC.c ****     
 758:Generated_Source\PSoC4/ADC.c ****     return (int16) adcResult;
 969              		.loc 1 758 0
 970 0032 FB68     		ldr	r3, [r7, #12]
 971 0034 9BB2     		uxth	r3, r3
 972 0036 1BB2     		sxth	r3, r3
 759:Generated_Source\PSoC4/ADC.c **** }
 973              		.loc 1 759 0
 974 0038 181C     		mov	r0, r3
 975 003a BD46     		mov	sp, r7
 976 003c 04B0     		add	sp, sp, #16
 977              		@ sp needed
 978 003e 80BD     		pop	{r7, pc}
 979              	.L74:
 980              		.align	2
 981              	.L73:
 982 0040 80013A40 		.word	1077543296
 983              		.cfi_endproc
 984              	.LFE13:
 985              		.size	ADC_GetResult16, .-ADC_GetResult16
 986              		.section	.text.ADC_GetResult32,"ax",%progbits
 987              		.align	2
 988              		.global	ADC_GetResult32
 989              		.code	16
 990              		.thumb_func
 991              		.type	ADC_GetResult32, %function
 992              	ADC_GetResult32:
 993              	.LFB14:
 760:Generated_Source\PSoC4/ADC.c **** 
 761:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 762:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult32
 763:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 764:Generated_Source\PSoC4/ADC.c **** *
 765:Generated_Source\PSoC4/ADC.c **** * \brief Gets the data available in the channel result data register. 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 32


 766:Generated_Source\PSoC4/ADC.c **** *
 767:Generated_Source\PSoC4/ADC.c **** * \param chan The ADC channel to read the result from. The first 
 768:Generated_Source\PSoC4/ADC.c **** * channel is 0 and the injection channel if enabled is the number of valid 
 769:Generated_Source\PSoC4/ADC.c **** * channels.
 770:Generated_Source\PSoC4/ADC.c **** *
 771:Generated_Source\PSoC4/ADC.c **** * \return Returns converted data as a signed 32-bit integer.
 772:Generated_Source\PSoC4/ADC.c **** * 
 773:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 774:Generated_Source\PSoC4/ADC.c **** *
 775:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 776:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_GetResult32
 777:Generated_Source\PSoC4/ADC.c **** *
 778:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 779:Generated_Source\PSoC4/ADC.c **** int32 ADC_GetResult32(uint32 chan)
 780:Generated_Source\PSoC4/ADC.c **** {
 994              		.loc 1 780 0
 995              		.cfi_startproc
 996 0000 80B5     		push	{r7, lr}
 997              		.cfi_def_cfa_offset 8
 998              		.cfi_offset 7, -8
 999              		.cfi_offset 14, -4
 1000 0002 86B0     		sub	sp, sp, #24
 1001              		.cfi_def_cfa_offset 32
 1002 0004 00AF     		add	r7, sp, #0
 1003              		.cfi_def_cfa_register 7
 1004 0006 7860     		str	r0, [r7, #4]
 781:Generated_Source\PSoC4/ADC.c ****     uint32 adcResult;
 782:Generated_Source\PSoC4/ADC.c ****     int16 adcResult16;
 783:Generated_Source\PSoC4/ADC.c ****     int32 finalResult;
 784:Generated_Source\PSoC4/ADC.c ****     
 785:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 786:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1005              		.loc 1 786 0
 1006 0008 7B68     		ldr	r3, [r7, #4]
 1007 000a 062B     		cmp	r3, #6
 1008 000c 02D9     		bls	.L76
 1009              		.loc 1 786 0 is_stmt 0 discriminator 1
 1010 000e 0020     		mov	r0, #0
 1011 0010 FFF7FEFF 		bl	CyHalt
 1012              	.L76:
 787:Generated_Source\PSoC4/ADC.c **** 
 788:Generated_Source\PSoC4/ADC.c ****     if(ADC_TOTAL_CHANNELS_NUM > chan)
 1013              		.loc 1 788 0 is_stmt 1
 1014 0014 7B68     		ldr	r3, [r7, #4]
 1015 0016 062B     		cmp	r3, #6
 1016 0018 09D8     		bhi	.L77
 789:Generated_Source\PSoC4/ADC.c ****     {
 790:Generated_Source\PSoC4/ADC.c ****         adcResult = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 1017              		.loc 1 790 0
 1018 001a 7B68     		ldr	r3, [r7, #4]
 1019 001c 9B00     		lsl	r3, r3, #2
 1020 001e 114A     		ldr	r2, .L82
 1021 0020 9446     		mov	ip, r2
 1022 0022 6344     		add	r3, r3, ip
 1023 0024 1B68     		ldr	r3, [r3]
 1024 0026 1B04     		lsl	r3, r3, #16
 1025 0028 1B0C     		lsr	r3, r3, #16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 33


 1026 002a 7B61     		str	r3, [r7, #20]
 1027 002c 01E0     		b	.L78
 1028              	.L77:
 791:Generated_Source\PSoC4/ADC.c ****             ADC_RESULT_MASK;
 792:Generated_Source\PSoC4/ADC.c ****     }
 793:Generated_Source\PSoC4/ADC.c ****     else
 794:Generated_Source\PSoC4/ADC.c ****     {
 795:Generated_Source\PSoC4/ADC.c ****         adcResult = 0u;
 1029              		.loc 1 795 0
 1030 002e 0023     		mov	r3, #0
 1031 0030 7B61     		str	r3, [r7, #20]
 1032              	.L78:
 796:Generated_Source\PSoC4/ADC.c ****     }
 797:Generated_Source\PSoC4/ADC.c ****     /* Sign extend if channel is signed format */
 798:Generated_Source\PSoC4/ADC.c ****     if(ADC_IsChannelSigned(chan) == 1)
 1033              		.loc 1 798 0
 1034 0032 7B68     		ldr	r3, [r7, #4]
 1035 0034 181C     		mov	r0, r3
 1036 0036 FFF7FEFF 		bl	ADC_IsChannelSigned
 1037 003a 031E     		sub	r3, r0, #0
 1038 003c 012B     		cmp	r3, #1
 1039 003e 09D1     		bne	.L79
 799:Generated_Source\PSoC4/ADC.c ****     {
 800:Generated_Source\PSoC4/ADC.c ****         adcResult16 = (int16) adcResult;
 1040              		.loc 1 800 0
 1041 0040 0E23     		mov	r3, #14
 1042 0042 FB18     		add	r3, r7, r3
 1043 0044 7A69     		ldr	r2, [r7, #20]
 1044 0046 1A80     		strh	r2, [r3]
 801:Generated_Source\PSoC4/ADC.c ****         finalResult = (int32) adcResult16;
 1045              		.loc 1 801 0
 1046 0048 0E23     		mov	r3, #14
 1047 004a FB18     		add	r3, r7, r3
 1048 004c 0022     		mov	r2, #0
 1049 004e 9B5E     		ldrsh	r3, [r3, r2]
 1050 0050 3B61     		str	r3, [r7, #16]
 1051 0052 01E0     		b	.L80
 1052              	.L79:
 802:Generated_Source\PSoC4/ADC.c ****     }
 803:Generated_Source\PSoC4/ADC.c ****     else
 804:Generated_Source\PSoC4/ADC.c ****     {
 805:Generated_Source\PSoC4/ADC.c ****         finalResult = (int32) adcResult;
 1053              		.loc 1 805 0
 1054 0054 7B69     		ldr	r3, [r7, #20]
 1055 0056 3B61     		str	r3, [r7, #16]
 1056              	.L80:
 806:Generated_Source\PSoC4/ADC.c ****     }
 807:Generated_Source\PSoC4/ADC.c ****     return finalResult;
 1057              		.loc 1 807 0
 1058 0058 3B69     		ldr	r3, [r7, #16]
 808:Generated_Source\PSoC4/ADC.c **** }
 1059              		.loc 1 808 0
 1060 005a 181C     		mov	r0, r3
 1061 005c BD46     		mov	sp, r7
 1062 005e 06B0     		add	sp, sp, #24
 1063              		@ sp needed
 1064 0060 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 34


 1065              	.L83:
 1066 0062 C046     		.align	2
 1067              	.L82:
 1068 0064 80013A40 		.word	1077543296
 1069              		.cfi_endproc
 1070              	.LFE14:
 1071              		.size	ADC_GetResult32, .-ADC_GetResult32
 1072              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 1073              		.align	2
 1074              		.global	ADC_SetLowLimit
 1075              		.code	16
 1076              		.thumb_func
 1077              		.type	ADC_SetLowLimit, %function
 1078              	ADC_SetLowLimit:
 1079              	.LFB15:
 809:Generated_Source\PSoC4/ADC.c **** 
 810:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 811:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 812:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 813:Generated_Source\PSoC4/ADC.c **** *
 814:Generated_Source\PSoC4/ADC.c **** * \brief Sets the low limit parameter for a limit condition.
 815:Generated_Source\PSoC4/ADC.c **** *
 816:Generated_Source\PSoC4/ADC.c **** * \param lowLimit The low limit for a limit condition.
 817:Generated_Source\PSoC4/ADC.c **** *
 818:Generated_Source\PSoC4/ADC.c **** * \return None
 819:Generated_Source\PSoC4/ADC.c **** * 
 820:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 821:Generated_Source\PSoC4/ADC.c **** *
 822:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 823:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SetLowLimit
 824:Generated_Source\PSoC4/ADC.c **** *
 825:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 826:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 827:Generated_Source\PSoC4/ADC.c **** {   
 1080              		.loc 1 827 0
 1081              		.cfi_startproc
 1082 0000 80B5     		push	{r7, lr}
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 7, -8
 1085              		.cfi_offset 14, -4
 1086 0002 82B0     		sub	sp, sp, #8
 1087              		.cfi_def_cfa_offset 16
 1088 0004 00AF     		add	r7, sp, #0
 1089              		.cfi_def_cfa_register 7
 1090 0006 7860     		str	r0, [r7, #4]
 828:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= ~(uint32)(ADC_SAR_RANGE_THRES_RANGE_LOW_MSK);
 1091              		.loc 1 828 0
 1092 0008 084B     		ldr	r3, .L86
 1093 000a 084A     		ldr	r2, .L86
 1094 000c 1268     		ldr	r2, [r2]
 1095 000e 120C     		lsr	r2, r2, #16
 1096 0010 1204     		lsl	r2, r2, #16
 1097 0012 1A60     		str	r2, [r3]
 829:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_RANGE_THRES_RANGE_LOW_MSK;
 1098              		.loc 1 829 0
 1099 0014 054B     		ldr	r3, .L86
 1100 0016 054A     		ldr	r2, .L86
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 35


 1101 0018 1168     		ldr	r1, [r2]
 1102 001a 7A68     		ldr	r2, [r7, #4]
 1103 001c 1204     		lsl	r2, r2, #16
 1104 001e 120C     		lsr	r2, r2, #16
 1105 0020 0A43     		orr	r2, r1
 1106 0022 1A60     		str	r2, [r3]
 830:Generated_Source\PSoC4/ADC.c ****     return;
 1107              		.loc 1 830 0
 1108 0024 C046     		mov	r8, r8
 831:Generated_Source\PSoC4/ADC.c **** }
 1109              		.loc 1 831 0
 1110 0026 BD46     		mov	sp, r7
 1111 0028 02B0     		add	sp, sp, #8
 1112              		@ sp needed
 1113 002a 80BD     		pop	{r7, pc}
 1114              	.L87:
 1115              		.align	2
 1116              	.L86:
 1117 002c 18003A40 		.word	1077542936
 1118              		.cfi_endproc
 1119              	.LFE15:
 1120              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 1121              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 1122              		.align	2
 1123              		.global	ADC_SetHighLimit
 1124              		.code	16
 1125              		.thumb_func
 1126              		.type	ADC_SetHighLimit, %function
 1127              	ADC_SetHighLimit:
 1128              	.LFB16:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 834:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 835:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 836:Generated_Source\PSoC4/ADC.c **** *
 837:Generated_Source\PSoC4/ADC.c **** * \brief Sets the high limit parameter for a limit condition.
 838:Generated_Source\PSoC4/ADC.c **** *
 839:Generated_Source\PSoC4/ADC.c **** * \param highLimit The high limit for a limit condition.
 840:Generated_Source\PSoC4/ADC.c **** *
 841:Generated_Source\PSoC4/ADC.c **** * \return None
 842:Generated_Source\PSoC4/ADC.c **** * 
 843:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 844:Generated_Source\PSoC4/ADC.c **** * 
 845:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 846:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SetHighLimit
 847:Generated_Source\PSoC4/ADC.c **** *
 848:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 849:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 850:Generated_Source\PSoC4/ADC.c **** {   
 1129              		.loc 1 850 0
 1130              		.cfi_startproc
 1131 0000 80B5     		push	{r7, lr}
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 7, -8
 1134              		.cfi_offset 14, -4
 1135 0002 82B0     		sub	sp, sp, #8
 1136              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 36


 1137 0004 00AF     		add	r7, sp, #0
 1138              		.cfi_def_cfa_register 7
 1139 0006 7860     		str	r0, [r7, #4]
 851:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= ~(uint32)(ADC_SAR_RANGE_THRES_RANGE_HIGH_MSK);
 1140              		.loc 1 851 0
 1141 0008 084B     		ldr	r3, .L90
 1142 000a 084A     		ldr	r2, .L90
 1143 000c 1268     		ldr	r2, [r2]
 1144 000e 1204     		lsl	r2, r2, #16
 1145 0010 120C     		lsr	r2, r2, #16
 1146 0012 1A60     		str	r2, [r3]
 852:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_RANGE_THRES_RANGE_HIGH_SHFT);
 1147              		.loc 1 852 0
 1148 0014 054B     		ldr	r3, .L90
 1149 0016 054A     		ldr	r2, .L90
 1150 0018 1168     		ldr	r1, [r2]
 1151 001a 7A68     		ldr	r2, [r7, #4]
 1152 001c 1204     		lsl	r2, r2, #16
 1153 001e 0A43     		orr	r2, r1
 1154 0020 1A60     		str	r2, [r3]
 853:Generated_Source\PSoC4/ADC.c ****     return;
 1155              		.loc 1 853 0
 1156 0022 C046     		mov	r8, r8
 854:Generated_Source\PSoC4/ADC.c **** }
 1157              		.loc 1 854 0
 1158 0024 BD46     		mov	sp, r7
 1159 0026 02B0     		add	sp, sp, #8
 1160              		@ sp needed
 1161 0028 80BD     		pop	{r7, pc}
 1162              	.L91:
 1163 002a C046     		.align	2
 1164              	.L90:
 1165 002c 18003A40 		.word	1077542936
 1166              		.cfi_endproc
 1167              	.LFE16:
 1168              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 1169              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 1170              		.align	2
 1171              		.global	ADC_SetLimitMask
 1172              		.code	16
 1173              		.thumb_func
 1174              		.type	ADC_SetLimitMask, %function
 1175              	ADC_SetLimitMask:
 1176              	.LFB17:
 855:Generated_Source\PSoC4/ADC.c **** 
 856:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 857:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 858:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 859:Generated_Source\PSoC4/ADC.c **** *
 860:Generated_Source\PSoC4/ADC.c **** * \brief Sets the channel limit condition mask.
 861:Generated_Source\PSoC4/ADC.c **** *
 862:Generated_Source\PSoC4/ADC.c **** *
 863:Generated_Source\PSoC4/ADC.c **** * \param mask Sets which channels that may cause a limit condition interrupt. 
 864:Generated_Source\PSoC4/ADC.c **** * Setting bits for channels that do not exist will have no effect. For example, 
 865:Generated_Source\PSoC4/ADC.c **** * if only 6  channels were enabled, setting a mask of 0x0103 would only enable 
 866:Generated_Source\PSoC4/ADC.c **** * the last two channels (0 and 1).
 867:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 37


 868:Generated_Source\PSoC4/ADC.c **** * \return None
 869:Generated_Source\PSoC4/ADC.c **** * 
 870:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 871:Generated_Source\PSoC4/ADC.c **** *
 872:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 873:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SetLimitMask
 874:Generated_Source\PSoC4/ADC.c **** *
 875:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 876:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 877:Generated_Source\PSoC4/ADC.c **** {   
 1177              		.loc 1 877 0
 1178              		.cfi_startproc
 1179 0000 80B5     		push	{r7, lr}
 1180              		.cfi_def_cfa_offset 8
 1181              		.cfi_offset 7, -8
 1182              		.cfi_offset 14, -4
 1183 0002 82B0     		sub	sp, sp, #8
 1184              		.cfi_def_cfa_offset 16
 1185 0004 00AF     		add	r7, sp, #0
 1186              		.cfi_def_cfa_register 7
 1187 0006 7860     		str	r0, [r7, #4]
 878:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 1188              		.loc 1 878 0
 1189 0008 044B     		ldr	r3, .L94
 1190 000a 7A68     		ldr	r2, [r7, #4]
 1191 000c 7F21     		mov	r1, #127
 1192 000e 0A40     		and	r2, r1
 1193 0010 1A60     		str	r2, [r3]
 879:Generated_Source\PSoC4/ADC.c ****  
 880:Generated_Source\PSoC4/ADC.c ****     return;
 1194              		.loc 1 880 0
 1195 0012 C046     		mov	r8, r8
 881:Generated_Source\PSoC4/ADC.c **** }
 1196              		.loc 1 881 0
 1197 0014 BD46     		mov	sp, r7
 1198 0016 02B0     		add	sp, sp, #8
 1199              		@ sp needed
 1200 0018 80BD     		pop	{r7, pc}
 1201              	.L95:
 1202 001a C046     		.align	2
 1203              	.L94:
 1204 001c 38023A40 		.word	1077543480
 1205              		.cfi_endproc
 1206              	.LFE17:
 1207              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 1208              		.section	.text.ADC_SetSatMask,"ax",%progbits
 1209              		.align	2
 1210              		.global	ADC_SetSatMask
 1211              		.code	16
 1212              		.thumb_func
 1213              		.type	ADC_SetSatMask, %function
 1214              	ADC_SetSatMask:
 1215              	.LFB18:
 882:Generated_Source\PSoC4/ADC.c **** 
 883:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 884:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 885:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 38


 886:Generated_Source\PSoC4/ADC.c **** *
 887:Generated_Source\PSoC4/ADC.c **** * \brief Sets the channel saturation event mask.
 888:Generated_Source\PSoC4/ADC.c **** *
 889:Generated_Source\PSoC4/ADC.c **** * \param mask Sets which channels that may cause a saturation event interrupt. 
 890:Generated_Source\PSoC4/ADC.c **** * Setting bits for channels that do not exist will have no effect. For example, 
 891:Generated_Source\PSoC4/ADC.c **** * if only 8 channels were enabled, setting a mask of 0x01C0 would only enable two 
 892:Generated_Source\PSoC4/ADC.c **** * channels (6 and 7).
 893:Generated_Source\PSoC4/ADC.c **** *
 894:Generated_Source\PSoC4/ADC.c **** * \return None
 895:Generated_Source\PSoC4/ADC.c **** * 
 896:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 897:Generated_Source\PSoC4/ADC.c **** *
 898:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 899:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SetSatMask
 900:Generated_Source\PSoC4/ADC.c **** *
 901:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 902:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 903:Generated_Source\PSoC4/ADC.c **** {   
 1216              		.loc 1 903 0
 1217              		.cfi_startproc
 1218 0000 80B5     		push	{r7, lr}
 1219              		.cfi_def_cfa_offset 8
 1220              		.cfi_offset 7, -8
 1221              		.cfi_offset 14, -4
 1222 0002 82B0     		sub	sp, sp, #8
 1223              		.cfi_def_cfa_offset 16
 1224 0004 00AF     		add	r7, sp, #0
 1225              		.cfi_def_cfa_register 7
 1226 0006 7860     		str	r0, [r7, #4]
 904:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;    
 1227              		.loc 1 904 0
 1228 0008 044B     		ldr	r3, .L98
 1229 000a 7A68     		ldr	r2, [r7, #4]
 1230 000c 7F21     		mov	r1, #127
 1231 000e 0A40     		and	r2, r1
 1232 0010 1A60     		str	r2, [r3]
 905:Generated_Source\PSoC4/ADC.c ****     return;
 1233              		.loc 1 905 0
 1234 0012 C046     		mov	r8, r8
 906:Generated_Source\PSoC4/ADC.c **** }
 1235              		.loc 1 906 0
 1236 0014 BD46     		mov	sp, r7
 1237 0016 02B0     		add	sp, sp, #8
 1238              		@ sp needed
 1239 0018 80BD     		pop	{r7, pc}
 1240              	.L99:
 1241 001a C046     		.align	2
 1242              	.L98:
 1243 001c 28023A40 		.word	1077543464
 1244              		.cfi_endproc
 1245              	.LFE18:
 1246              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 1247              		.section	.text.ADC_SetOffset,"ax",%progbits
 1248              		.align	2
 1249              		.global	ADC_SetOffset
 1250              		.code	16
 1251              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 39


 1252              		.type	ADC_SetOffset, %function
 1253              	ADC_SetOffset:
 1254              	.LFB19:
 907:Generated_Source\PSoC4/ADC.c **** 
 908:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 909:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 910:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 911:Generated_Source\PSoC4/ADC.c **** *
 912:Generated_Source\PSoC4/ADC.c **** * \brief Sets the ADC offset which is used by the functions 
 913:Generated_Source\PSoC4/ADC.c **** * ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and 
 914:Generated_Source\PSoC4/ADC.c **** * ADC_CountsTo_Volts to subtract the offset from the given reading 
 915:Generated_Source\PSoC4/ADC.c **** * before calculating the voltage conversion.
 916:Generated_Source\PSoC4/ADC.c **** *
 917:Generated_Source\PSoC4/ADC.c **** * \param chan ADC channel number. 
 918:Generated_Source\PSoC4/ADC.c **** * 
 919:Generated_Source\PSoC4/ADC.c **** * \param offset This value is a measured value when the inputs are shorted or 
 920:Generated_Source\PSoC4/ADC.c **** * connected to the same input voltage.
 921:Generated_Source\PSoC4/ADC.c **** *
 922:Generated_Source\PSoC4/ADC.c **** * \return None
 923:Generated_Source\PSoC4/ADC.c **** * 
 924:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 925:Generated_Source\PSoC4/ADC.c **** *
 926:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 927:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SetOffset
 928:Generated_Source\PSoC4/ADC.c **** *
 929:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 930:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 931:Generated_Source\PSoC4/ADC.c **** {   
 1255              		.loc 1 931 0
 1256              		.cfi_startproc
 1257 0000 80B5     		push	{r7, lr}
 1258              		.cfi_def_cfa_offset 8
 1259              		.cfi_offset 7, -8
 1260              		.cfi_offset 14, -4
 1261 0002 82B0     		sub	sp, sp, #8
 1262              		.cfi_def_cfa_offset 16
 1263 0004 00AF     		add	r7, sp, #0
 1264              		.cfi_def_cfa_register 7
 1265 0006 7860     		str	r0, [r7, #4]
 1266 0008 0A1C     		mov	r2, r1
 1267 000a BB1C     		add	r3, r7, #2
 1268 000c 1A80     		strh	r2, [r3]
 932:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 933:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1269              		.loc 1 933 0
 1270 000e 7B68     		ldr	r3, [r7, #4]
 1271 0010 062B     		cmp	r3, #6
 1272 0012 02D9     		bls	.L101
 1273              		.loc 1 933 0 is_stmt 0 discriminator 1
 1274 0014 0020     		mov	r0, #0
 1275 0016 FFF7FEFF 		bl	CyHalt
 1276              	.L101:
 934:Generated_Source\PSoC4/ADC.c **** 
 935:Generated_Source\PSoC4/ADC.c ****     ADC_offset[ADC_allConfigs[ADC_currentConfig].channelBase + chan] = offset;
 1277              		.loc 1 935 0 is_stmt 1
 1278 001a 084B     		ldr	r3, .L103
 1279 001c 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 40


 1280 001e 084B     		ldr	r3, .L103+4
 1281 0020 3421     		mov	r1, #52
 1282 0022 4A43     		mul	r2, r1
 1283 0024 D258     		ldr	r2, [r2, r3]
 1284 0026 7B68     		ldr	r3, [r7, #4]
 1285 0028 D218     		add	r2, r2, r3
 1286 002a 064B     		ldr	r3, .L103+8
 1287 002c 5200     		lsl	r2, r2, #1
 1288 002e B91C     		add	r1, r7, #2
 1289 0030 0988     		ldrh	r1, [r1]
 1290 0032 D152     		strh	r1, [r2, r3]
 936:Generated_Source\PSoC4/ADC.c ****     return;
 1291              		.loc 1 936 0
 1292 0034 C046     		mov	r8, r8
 937:Generated_Source\PSoC4/ADC.c **** }
 1293              		.loc 1 937 0
 1294 0036 BD46     		mov	sp, r7
 1295 0038 02B0     		add	sp, sp, #8
 1296              		@ sp needed
 1297 003a 80BD     		pop	{r7, pc}
 1298              	.L104:
 1299              		.align	2
 1300              	.L103:
 1301 003c 04000000 		.word	ADC_currentConfig
 1302 0040 00000000 		.word	ADC_allConfigs
 1303 0044 00000000 		.word	ADC_offset
 1304              		.cfi_endproc
 1305              	.LFE19:
 1306              		.size	ADC_SetOffset, .-ADC_SetOffset
 1307              		.section	.text.ADC_SetGain,"ax",%progbits
 1308              		.align	2
 1309              		.global	ADC_SetGain
 1310              		.code	16
 1311              		.thumb_func
 1312              		.type	ADC_SetGain, %function
 1313              	ADC_SetGain:
 1314              	.LFB20:
 938:Generated_Source\PSoC4/ADC.c **** 
 939:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 940:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 941:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 942:Generated_Source\PSoC4/ADC.c **** *
 943:Generated_Source\PSoC4/ADC.c **** * \brief Sets the ADC gain in counts per 10 volt for the voltage 
 944:Generated_Source\PSoC4/ADC.c **** * conversion functions below. This value is set by default by the reference and 
 945:Generated_Source\PSoC4/ADC.c **** * input range settings. It should only be used to further calibrate the 
 946:Generated_Source\PSoC4/ADC.c **** * ADC with a known input or if an external reference is used. 
 947:Generated_Source\PSoC4/ADC.c **** * Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts 
 948:Generated_Source\PSoC4/ADC.c **** * and ADC_CountsTo_Volts functions by supplying the correct 
 949:Generated_Source\PSoC4/ADC.c **** * conversion between ADC counts and voltage.
 950:Generated_Source\PSoC4/ADC.c **** * 
 951:Generated_Source\PSoC4/ADC.c **** * \param chan ADC channel number.
 952:Generated_Source\PSoC4/ADC.c **** * 
 953:Generated_Source\PSoC4/ADC.c **** * \param adcGain ADC gain in counts per 10 volt.
 954:Generated_Source\PSoC4/ADC.c **** *
 955:Generated_Source\PSoC4/ADC.c **** * \return None
 956:Generated_Source\PSoC4/ADC.c **** * 
 957:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 41


 958:Generated_Source\PSoC4/ADC.c **** *
 959:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 960:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_SetGain
 961:Generated_Source\PSoC4/ADC.c **** *
 962:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 963:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 964:Generated_Source\PSoC4/ADC.c **** {   
 1315              		.loc 1 964 0
 1316              		.cfi_startproc
 1317 0000 80B5     		push	{r7, lr}
 1318              		.cfi_def_cfa_offset 8
 1319              		.cfi_offset 7, -8
 1320              		.cfi_offset 14, -4
 1321 0002 82B0     		sub	sp, sp, #8
 1322              		.cfi_def_cfa_offset 16
 1323 0004 00AF     		add	r7, sp, #0
 1324              		.cfi_def_cfa_register 7
 1325 0006 7860     		str	r0, [r7, #4]
 1326 0008 3960     		str	r1, [r7]
 965:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 966:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1327              		.loc 1 966 0
 1328 000a 7B68     		ldr	r3, [r7, #4]
 1329 000c 062B     		cmp	r3, #6
 1330 000e 02D9     		bls	.L106
 1331              		.loc 1 966 0 is_stmt 0 discriminator 1
 1332 0010 0020     		mov	r0, #0
 1333 0012 FFF7FEFF 		bl	CyHalt
 1334              	.L106:
 967:Generated_Source\PSoC4/ADC.c **** 
 968:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[ADC_allConfigs[ADC_currentConfig].channelBase + chan]
 1335              		.loc 1 968 0 is_stmt 1
 1336 0016 084B     		ldr	r3, .L108
 1337 0018 1A68     		ldr	r2, [r3]
 1338 001a 084B     		ldr	r3, .L108+4
 1339 001c 3421     		mov	r1, #52
 1340 001e 4A43     		mul	r2, r1
 1341 0020 D258     		ldr	r2, [r2, r3]
 1342 0022 7B68     		ldr	r3, [r7, #4]
 1343 0024 D218     		add	r2, r2, r3
 969:Generated_Source\PSoC4/ADC.c **** 	= adcGain;
 1344              		.loc 1 969 0
 1345 0026 064B     		ldr	r3, .L108+8
 1346 0028 9200     		lsl	r2, r2, #2
 1347 002a 3968     		ldr	r1, [r7]
 1348 002c D150     		str	r1, [r2, r3]
 970:Generated_Source\PSoC4/ADC.c ****     return;
 1349              		.loc 1 970 0
 1350 002e C046     		mov	r8, r8
 971:Generated_Source\PSoC4/ADC.c **** }
 1351              		.loc 1 971 0
 1352 0030 BD46     		mov	sp, r7
 1353 0032 02B0     		add	sp, sp, #8
 1354              		@ sp needed
 1355 0034 80BD     		pop	{r7, pc}
 1356              	.L109:
 1357 0036 C046     		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 42


 1358              	.L108:
 1359 0038 04000000 		.word	ADC_currentConfig
 1360 003c 00000000 		.word	ADC_allConfigs
 1361 0040 00000000 		.word	ADC_countsPer10Volt
 1362              		.cfi_endproc
 1363              	.LFE20:
 1364              		.size	ADC_SetGain, .-ADC_SetGain
 1365              		.global	__aeabi_uidiv
 1366              		.global	__aeabi_idiv
 1367              		.global	__aeabi_i2f
 1368              		.global	__aeabi_fmul
 1369              		.global	__aeabi_fdiv
 1370              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1371              		.align	2
 1372              		.global	ADC_CountsTo_Volts
 1373              		.code	16
 1374              		.thumb_func
 1375              		.type	ADC_CountsTo_Volts, %function
 1376              	ADC_CountsTo_Volts:
 1377              	.LFB21:
 972:Generated_Source\PSoC4/ADC.c **** 
 973:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 974:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_CountsTo_Volts
 975:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
 976:Generated_Source\PSoC4/ADC.c **** *
 977:Generated_Source\PSoC4/ADC.c **** * \brief Converts the ADC output to Volts as a floating point number. For 
 978:Generated_Source\PSoC4/ADC.c **** * example, if the ADC measured 0.534 volts, the return value would be 0.534. The 
 979:Generated_Source\PSoC4/ADC.c **** * calculation of voltage depends on the value of the voltage reference. When the 
 980:Generated_Source\PSoC4/ADC.c **** * Vref is based on Vdda, the value used for Vdda is set for the project in the 
 981:Generated_Source\PSoC4/ADC.c **** * System tab of the DWR.
 982:Generated_Source\PSoC4/ADC.c **** *
 983:Generated_Source\PSoC4/ADC.c **** * \param chan ADC channel number.   
 984:Generated_Source\PSoC4/ADC.c **** *
 985:Generated_Source\PSoC4/ADC.c **** * \param adcCounts Result from the ADC conversion.
 986:Generated_Source\PSoC4/ADC.c **** *
 987:Generated_Source\PSoC4/ADC.c **** * \return Result in Volts.
 988:Generated_Source\PSoC4/ADC.c **** * 
 989:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
 990:Generated_Source\PSoC4/ADC.c **** *
 991:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
 992:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_CountsTo_Volts
 993:Generated_Source\PSoC4/ADC.c **** *
 994:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 995:Generated_Source\PSoC4/ADC.c **** float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 996:Generated_Source\PSoC4/ADC.c **** {   
 1378              		.loc 1 996 0
 1379              		.cfi_startproc
 1380 0000 90B5     		push	{r4, r7, lr}
 1381              		.cfi_def_cfa_offset 12
 1382              		.cfi_offset 4, -12
 1383              		.cfi_offset 7, -8
 1384              		.cfi_offset 14, -4
 1385 0002 87B0     		sub	sp, sp, #28
 1386              		.cfi_def_cfa_offset 40
 1387 0004 00AF     		add	r7, sp, #0
 1388              		.cfi_def_cfa_register 7
 1389 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 43


 1390 0008 0A1C     		mov	r2, r1
 1391 000a BB1C     		add	r3, r7, #2
 1392 000c 1A80     		strh	r2, [r3]
 997:Generated_Source\PSoC4/ADC.c ****     float32 result_Volts = 0.0f;
 1393              		.loc 1 997 0
 1394 000e 0023     		mov	r3, #0
 1395 0010 7B61     		str	r3, [r7, #20]
 998:Generated_Source\PSoC4/ADC.c **** 	uint32 temp;
 999:Generated_Source\PSoC4/ADC.c **** 	uint32 averageAdcSamplesDiv;
1000:Generated_Source\PSoC4/ADC.c **** 	uint32 rawChannel;
1001:Generated_Source\PSoC4/ADC.c **** 	rawChannel = ADC_allConfigs[ADC_currentConfig].channelBase + chan;
 1396              		.loc 1 1001 0
 1397 0012 464B     		ldr	r3, .L116
 1398 0014 1A68     		ldr	r2, [r3]
 1399 0016 464B     		ldr	r3, .L116+4
 1400 0018 3421     		mov	r1, #52
 1401 001a 4A43     		mul	r2, r1
 1402 001c D258     		ldr	r2, [r2, r3]
 1403 001e 7B68     		ldr	r3, [r7, #4]
 1404 0020 D318     		add	r3, r2, r3
 1405 0022 3B61     		str	r3, [r7, #16]
1002:Generated_Source\PSoC4/ADC.c **** 	
1003:Generated_Source\PSoC4/ADC.c **** 	if((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 1406              		.loc 1 1003 0
 1407 0024 414B     		ldr	r3, .L116
 1408 0026 1B68     		ldr	r3, [r3]
 1409 0028 414A     		ldr	r2, .L116+4
 1410 002a 3421     		mov	r1, #52
 1411 002c 4B43     		mul	r3, r1
 1412 002e D318     		add	r3, r2, r3
 1413 0030 0833     		add	r3, r3, #8
 1414 0032 5B68     		ldr	r3, [r3, #4]
1004:Generated_Source\PSoC4/ADC.c **** 		& ADC_SAR_SAMPLE_CTRL_LEFT_ALIGN_MSK) 
 1415              		.loc 1 1004 0
 1416 0034 0222     		mov	r2, #2
 1417 0036 1340     		and	r3, r2
1003:Generated_Source\PSoC4/ADC.c **** 		& ADC_SAR_SAMPLE_CTRL_LEFT_ALIGN_MSK) 
 1418              		.loc 1 1003 0
 1419 0038 00D0     		beq	.LCB1213
 1420 003a 71E0     		b	.L111	@long jump
 1421              	.LCB1213:
1005:Generated_Source\PSoC4/ADC.c **** 		!= ADC_SAR_SAMPLE_CTRL_LEFT_ALIGN_MSK)
1006:Generated_Source\PSoC4/ADC.c **** 	{
1007:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
1008:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1422              		.loc 1 1008 0
 1423 003c 7B68     		ldr	r3, [r7, #4]
 1424 003e 062B     		cmp	r3, #6
 1425 0040 02D9     		bls	.L112
 1426              		.loc 1 1008 0 is_stmt 0 discriminator 1
 1427 0042 0020     		mov	r0, #0
 1428 0044 FFF7FEFF 		bl	CyHalt
 1429              	.L112:
1009:Generated_Source\PSoC4/ADC.c **** 
1010:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
1011:Generated_Source\PSoC4/ADC.c **** 		if((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 1430              		.loc 1 1011 0 is_stmt 1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 44


 1431 0048 384B     		ldr	r3, .L116
 1432 004a 1B68     		ldr	r3, [r3]
 1433 004c 384A     		ldr	r2, .L116+4
 1434 004e 3421     		mov	r1, #52
 1435 0050 4B43     		mul	r3, r1
 1436 0052 D318     		add	r3, r2, r3
 1437 0054 0833     		add	r3, r3, #8
 1438 0056 5B68     		ldr	r3, [r3, #4]
1012:Generated_Source\PSoC4/ADC.c **** 			& ADC_SAR_SAMPLE_CTRL_AVG_SHIFT_MSK) 
 1439              		.loc 1 1012 0
 1440 0058 8022     		mov	r2, #128
 1441 005a 1340     		and	r3, r2
1011:Generated_Source\PSoC4/ADC.c **** 			& ADC_SAR_SAMPLE_CTRL_AVG_SHIFT_MSK) 
 1442              		.loc 1 1011 0
 1443 005c 39D1     		bne	.L113
1013:Generated_Source\PSoC4/ADC.c **** 			!= ADC_SAR_SAMPLE_CTRL_AVG_SHIFT_MSK)
1014:Generated_Source\PSoC4/ADC.c **** 		{
1015:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[rawChannel] & ADC_SAR_CHAN_CONFIG_AVG_EN_MSK) != 0u)
 1444              		.loc 1 1015 0
 1445 005e 354B     		ldr	r3, .L116+8
 1446 0060 3A69     		ldr	r2, [r7, #16]
 1447 0062 9200     		lsl	r2, r2, #2
 1448 0064 D258     		ldr	r2, [r2, r3]
 1449 0066 8023     		mov	r3, #128
 1450 0068 DB00     		lsl	r3, r3, #3
 1451 006a 1340     		and	r3, r2
 1452 006c 31D0     		beq	.L113
1016:Generated_Source\PSoC4/ADC.c ****             {
1017:Generated_Source\PSoC4/ADC.c ****                 /* Divide by 2^(AVG_CNT + 1) */
1018:Generated_Source\PSoC4/ADC.c **** 				averageAdcSamplesDiv = ((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 1453              		.loc 1 1018 0
 1454 006e 2F4B     		ldr	r3, .L116
 1455 0070 1B68     		ldr	r3, [r3]
 1456 0072 2F4A     		ldr	r2, .L116+4
 1457 0074 3421     		mov	r1, #52
 1458 0076 4B43     		mul	r3, r1
 1459 0078 D318     		add	r3, r2, r3
 1460 007a 0833     		add	r3, r3, #8
 1461 007c 5B68     		ldr	r3, [r3, #4]
1019:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_AVG_CNT_MSK) 
 1462              		.loc 1 1019 0
 1463 007e 7022     		mov	r2, #112
 1464 0080 1340     		and	r3, r2
1018:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_AVG_CNT_MSK) 
 1465              		.loc 1 1018 0
 1466 0082 1B09     		lsr	r3, r3, #4
 1467 0084 FB60     		str	r3, [r7, #12]
1020:Generated_Source\PSoC4/ADC.c **** 					>> ADC_SAR_SAMPLE_CTRL_AVG_CNT_SHFT);
1021:Generated_Source\PSoC4/ADC.c ****                 averageAdcSamplesDiv = (1uL << (averageAdcSamplesDiv + 1uL));
 1468              		.loc 1 1021 0
 1469 0086 FB68     		ldr	r3, [r7, #12]
 1470 0088 0133     		add	r3, r3, #1
 1471 008a 1A1C     		mov	r2, r3
 1472 008c 0123     		mov	r3, #1
 1473 008e 9340     		lsl	r3, r3, r2
 1474 0090 FB60     		str	r3, [r7, #12]
1022:Generated_Source\PSoC4/ADC.c ****                 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 45


1023:Generated_Source\PSoC4/ADC.c ****                 /* If unsigned format, prevent sign extension */
1024:Generated_Source\PSoC4/ADC.c ****                 if(0 == ADC_IsChannelSigned(chan))
 1475              		.loc 1 1024 0
 1476 0092 7B68     		ldr	r3, [r7, #4]
 1477 0094 181C     		mov	r0, r3
 1478 0096 FFF7FEFF 		bl	ADC_IsChannelSigned
 1479 009a 031E     		sub	r3, r0, #0
 1480 009c 0BD1     		bne	.L114
1025:Generated_Source\PSoC4/ADC.c ****                 {
1026:Generated_Source\PSoC4/ADC.c **** 					temp = ((uint16) adcCounts / averageAdcSamplesDiv);
 1481              		.loc 1 1026 0
 1482 009e BB1C     		add	r3, r7, #2
 1483 00a0 1B88     		ldrh	r3, [r3]
 1484 00a2 181C     		mov	r0, r3
 1485 00a4 F968     		ldr	r1, [r7, #12]
 1486 00a6 FFF7FEFF 		bl	__aeabi_uidiv
 1487 00aa 031C     		mov	r3, r0
 1488 00ac BB60     		str	r3, [r7, #8]
1027:Generated_Source\PSoC4/ADC.c ****                     adcCounts = (int16) temp;
 1489              		.loc 1 1027 0
 1490 00ae BB1C     		add	r3, r7, #2
 1491 00b0 BA68     		ldr	r2, [r7, #8]
 1492 00b2 1A80     		strh	r2, [r3]
 1493 00b4 0DE0     		b	.L113
 1494              	.L114:
1028:Generated_Source\PSoC4/ADC.c ****                 }
1029:Generated_Source\PSoC4/ADC.c ****                 else
1030:Generated_Source\PSoC4/ADC.c ****                 {
1031:Generated_Source\PSoC4/ADC.c ****                     adcCounts /= (int16) averageAdcSamplesDiv;
 1495              		.loc 1 1031 0
 1496 00b6 BB1C     		add	r3, r7, #2
 1497 00b8 0022     		mov	r2, #0
 1498 00ba 9A5E     		ldrsh	r2, [r3, r2]
 1499 00bc FB68     		ldr	r3, [r7, #12]
 1500 00be 9BB2     		uxth	r3, r3
 1501 00c0 1BB2     		sxth	r3, r3
 1502 00c2 101C     		mov	r0, r2
 1503 00c4 191C     		mov	r1, r3
 1504 00c6 FFF7FEFF 		bl	__aeabi_idiv
 1505 00ca 031C     		mov	r3, r0
 1506 00cc 1A1C     		mov	r2, r3
 1507 00ce BB1C     		add	r3, r7, #2
 1508 00d0 1A80     		strh	r2, [r3]
 1509              	.L113:
1032:Generated_Source\PSoC4/ADC.c ****                 }
1033:Generated_Source\PSoC4/ADC.c ****             }
1034:Generated_Source\PSoC4/ADC.c **** 		}
1035:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
1036:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[rawChannel];
 1510              		.loc 1 1036 0
 1511 00d2 194B     		ldr	r3, .L116+12
 1512 00d4 3A69     		ldr	r2, [r7, #16]
 1513 00d6 5200     		lsl	r2, r2, #1
 1514 00d8 D35A     		ldrh	r3, [r2, r3]
 1515 00da 99B2     		uxth	r1, r3
 1516 00dc BB1C     		add	r3, r7, #2
 1517 00de 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 46


 1518 00e0 8BB2     		uxth	r3, r1
 1519 00e2 D31A     		sub	r3, r2, r3
 1520 00e4 9AB2     		uxth	r2, r3
 1521 00e6 BB1C     		add	r3, r7, #2
 1522 00e8 1A80     		strh	r2, [r3]
1037:Generated_Source\PSoC4/ADC.c **** 
1038:Generated_Source\PSoC4/ADC.c ****         result_Volts = ((float32)adcCounts * ADC_10V_COUNTS) 
 1523              		.loc 1 1038 0
 1524 00ea BB1C     		add	r3, r7, #2
 1525 00ec 0022     		mov	r2, #0
 1526 00ee 9B5E     		ldrsh	r3, [r3, r2]
 1527 00f0 181C     		mov	r0, r3
 1528 00f2 FFF7FEFF 		bl	__aeabi_i2f
 1529 00f6 031C     		add	r3, r0, #0
 1530 00f8 181C     		add	r0, r3, #0
 1531 00fa 1049     		ldr	r1, .L116+16
 1532 00fc FFF7FEFF 		bl	__aeabi_fmul
 1533 0100 031C     		add	r3, r0, #0
 1534 0102 1C1C     		add	r4, r3, #0
1039:Generated_Source\PSoC4/ADC.c **** 			/ (float32)ADC_countsPer10Volt[rawChannel];
 1535              		.loc 1 1039 0
 1536 0104 0E4B     		ldr	r3, .L116+20
 1537 0106 3A69     		ldr	r2, [r7, #16]
 1538 0108 9200     		lsl	r2, r2, #2
 1539 010a D358     		ldr	r3, [r2, r3]
 1540 010c 181C     		mov	r0, r3
 1541 010e FFF7FEFF 		bl	__aeabi_i2f
 1542 0112 031C     		add	r3, r0, #0
1038:Generated_Source\PSoC4/ADC.c **** 			/ (float32)ADC_countsPer10Volt[rawChannel];
 1543              		.loc 1 1038 0
 1544 0114 201C     		add	r0, r4, #0
 1545 0116 191C     		add	r1, r3, #0
 1546 0118 FFF7FEFF 		bl	__aeabi_fdiv
 1547 011c 031C     		add	r3, r0, #0
 1548 011e 7B61     		str	r3, [r7, #20]
 1549              	.L111:
1040:Generated_Source\PSoC4/ADC.c **** 	}
1041:Generated_Source\PSoC4/ADC.c **** 	return result_Volts;
 1550              		.loc 1 1041 0
 1551 0120 7B69     		ldr	r3, [r7, #20]
1042:Generated_Source\PSoC4/ADC.c **** }
 1552              		.loc 1 1042 0
 1553 0122 181C     		add	r0, r3, #0
 1554 0124 BD46     		mov	sp, r7
 1555 0126 07B0     		add	sp, sp, #28
 1556              		@ sp needed
 1557 0128 90BD     		pop	{r4, r7, pc}
 1558              	.L117:
 1559 012a C046     		.align	2
 1560              	.L116:
 1561 012c 04000000 		.word	ADC_currentConfig
 1562 0130 00000000 		.word	ADC_allConfigs
 1563 0134 00000000 		.word	ADC_channelsConfig
 1564 0138 00000000 		.word	ADC_offset
 1565 013c 00002041 		.word	1092616192
 1566 0140 00000000 		.word	ADC_countsPer10Volt
 1567              		.cfi_endproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 47


 1568              	.LFE21:
 1569              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1570              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 1571              		.align	2
 1572              		.global	ADC_CountsTo_mVolts
 1573              		.code	16
 1574              		.thumb_func
 1575              		.type	ADC_CountsTo_mVolts, %function
 1576              	ADC_CountsTo_mVolts:
 1577              	.LFB22:
1043:Generated_Source\PSoC4/ADC.c **** 
1044:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
1045:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_CountsTo_mVolts
1046:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
1047:Generated_Source\PSoC4/ADC.c **** *
1048:Generated_Source\PSoC4/ADC.c **** * \brief Converts the ADC output to millivolts as a 16-bit integer. 
1049:Generated_Source\PSoC4/ADC.c **** * For example, if the ADC measured 0.534 volts, the return value 
1050:Generated_Source\PSoC4/ADC.c **** * would be 534. The calculation of voltage depends on the value of the voltage 
1051:Generated_Source\PSoC4/ADC.c **** * reference. When the Vref is based on Vdda, the value used for Vdda is set for 
1052:Generated_Source\PSoC4/ADC.c **** * the project in the System tab of the DWR.
1053:Generated_Source\PSoC4/ADC.c **** *
1054:Generated_Source\PSoC4/ADC.c **** * \param chan ADC channel number. 
1055:Generated_Source\PSoC4/ADC.c **** *
1056:Generated_Source\PSoC4/ADC.c **** * \param adcCounts Result from the ADC conversion.
1057:Generated_Source\PSoC4/ADC.c **** * 
1058:Generated_Source\PSoC4/ADC.c **** * \return Result in mV.
1059:Generated_Source\PSoC4/ADC.c **** * 
1060:Generated_Source\PSoC4/ADC.c **** * \sideeffect None.
1061:Generated_Source\PSoC4/ADC.c **** *
1062:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
1063:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_CountsTo_mVolts
1064:Generated_Source\PSoC4/ADC.c **** *
1065:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
1066:Generated_Source\PSoC4/ADC.c **** int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
1067:Generated_Source\PSoC4/ADC.c **** {   
 1578              		.loc 1 1067 0
 1579              		.cfi_startproc
 1580 0000 80B5     		push	{r7, lr}
 1581              		.cfi_def_cfa_offset 8
 1582              		.cfi_offset 7, -8
 1583              		.cfi_offset 14, -4
 1584 0002 86B0     		sub	sp, sp, #24
 1585              		.cfi_def_cfa_offset 32
 1586 0004 00AF     		add	r7, sp, #0
 1587              		.cfi_def_cfa_register 7
 1588 0006 7860     		str	r0, [r7, #4]
 1589 0008 0A1C     		mov	r2, r1
 1590 000a BB1C     		add	r3, r7, #2
 1591 000c 1A80     		strh	r2, [r3]
1068:Generated_Source\PSoC4/ADC.c ****     int16 result_mVolts = 0;
 1592              		.loc 1 1068 0
 1593 000e 1623     		mov	r3, #22
 1594 0010 FB18     		add	r3, r7, r3
 1595 0012 0022     		mov	r2, #0
 1596 0014 1A80     		strh	r2, [r3]
1069:Generated_Source\PSoC4/ADC.c **** 	uint32 temp;
1070:Generated_Source\PSoC4/ADC.c **** 	uint32 averageAdcSamplesDiv;
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 48


1071:Generated_Source\PSoC4/ADC.c **** 	uint32 rawChannel;
1072:Generated_Source\PSoC4/ADC.c ****     
1073:Generated_Source\PSoC4/ADC.c **** 	rawChannel = ADC_allConfigs[ADC_currentConfig].channelBase + chan;
 1597              		.loc 1 1073 0
 1598 0016 4F4B     		ldr	r3, .L128
 1599 0018 1A68     		ldr	r2, [r3]
 1600 001a 4F4B     		ldr	r3, .L128+4
 1601 001c 3421     		mov	r1, #52
 1602 001e 4A43     		mul	r2, r1
 1603 0020 D258     		ldr	r2, [r2, r3]
 1604 0022 7B68     		ldr	r3, [r7, #4]
 1605 0024 D318     		add	r3, r2, r3
 1606 0026 3B61     		str	r3, [r7, #16]
1074:Generated_Source\PSoC4/ADC.c **** 	
1075:Generated_Source\PSoC4/ADC.c **** 	if((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 1607              		.loc 1 1075 0
 1608 0028 4A4B     		ldr	r3, .L128
 1609 002a 1B68     		ldr	r3, [r3]
 1610 002c 4A4A     		ldr	r2, .L128+4
 1611 002e 3421     		mov	r1, #52
 1612 0030 4B43     		mul	r3, r1
 1613 0032 D318     		add	r3, r2, r3
 1614 0034 0833     		add	r3, r3, #8
 1615 0036 5B68     		ldr	r3, [r3, #4]
1076:Generated_Source\PSoC4/ADC.c **** 		& ADC_SAR_SAMPLE_CTRL_LEFT_ALIGN_MSK) 
 1616              		.loc 1 1076 0
 1617 0038 0222     		mov	r2, #2
 1618 003a 1340     		and	r3, r2
1075:Generated_Source\PSoC4/ADC.c **** 		& ADC_SAR_SAMPLE_CTRL_LEFT_ALIGN_MSK) 
 1619              		.loc 1 1075 0
 1620 003c 00D0     		beq	.LCB1394
 1621 003e 80E0     		b	.L119	@long jump
 1622              	.LCB1394:
1077:Generated_Source\PSoC4/ADC.c **** 		!= ADC_SAR_SAMPLE_CTRL_LEFT_ALIGN_MSK)
1078:Generated_Source\PSoC4/ADC.c **** 	{
1079:Generated_Source\PSoC4/ADC.c **** 		/* Halt CPU in debug mode if channel is out of valid range */
1080:Generated_Source\PSoC4/ADC.c **** 	    CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1623              		.loc 1 1080 0
 1624 0040 7B68     		ldr	r3, [r7, #4]
 1625 0042 062B     		cmp	r3, #6
 1626 0044 02D9     		bls	.L120
 1627              		.loc 1 1080 0 is_stmt 0 discriminator 1
 1628 0046 0020     		mov	r0, #0
 1629 0048 FFF7FEFF 		bl	CyHalt
 1630              	.L120:
1081:Generated_Source\PSoC4/ADC.c **** 
1082:Generated_Source\PSoC4/ADC.c **** 	    /* Divide the adcCount when accumulate averaging mode selected */
1083:Generated_Source\PSoC4/ADC.c **** 		if((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 1631              		.loc 1 1083 0 is_stmt 1
 1632 004c 414B     		ldr	r3, .L128
 1633 004e 1B68     		ldr	r3, [r3]
 1634 0050 414A     		ldr	r2, .L128+4
 1635 0052 3421     		mov	r1, #52
 1636 0054 4B43     		mul	r3, r1
 1637 0056 D318     		add	r3, r2, r3
 1638 0058 0833     		add	r3, r3, #8
 1639 005a 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 49


1084:Generated_Source\PSoC4/ADC.c **** 			& ADC_SAR_SAMPLE_CTRL_AVG_SHIFT_MSK) 
 1640              		.loc 1 1084 0
 1641 005c 8022     		mov	r2, #128
 1642 005e 1340     		and	r3, r2
1083:Generated_Source\PSoC4/ADC.c **** 			& ADC_SAR_SAMPLE_CTRL_AVG_SHIFT_MSK) 
 1643              		.loc 1 1083 0
 1644 0060 39D1     		bne	.L121
1085:Generated_Source\PSoC4/ADC.c **** 			!= ADC_SAR_SAMPLE_CTRL_AVG_SHIFT_MSK)
1086:Generated_Source\PSoC4/ADC.c **** 		{
1087:Generated_Source\PSoC4/ADC.c **** 	        if((ADC_channelsConfig[rawChannel] 
 1645              		.loc 1 1087 0
 1646 0062 3E4B     		ldr	r3, .L128+8
 1647 0064 3A69     		ldr	r2, [r7, #16]
 1648 0066 9200     		lsl	r2, r2, #2
 1649 0068 D258     		ldr	r2, [r2, r3]
1088:Generated_Source\PSoC4/ADC.c **** 				& ADC_SAR_CHAN_CONFIG_AVG_EN_MSK) != 0u)
 1650              		.loc 1 1088 0
 1651 006a 8023     		mov	r3, #128
 1652 006c DB00     		lsl	r3, r3, #3
 1653 006e 1340     		and	r3, r2
1087:Generated_Source\PSoC4/ADC.c **** 				& ADC_SAR_CHAN_CONFIG_AVG_EN_MSK) != 0u)
 1654              		.loc 1 1087 0
 1655 0070 31D0     		beq	.L121
1089:Generated_Source\PSoC4/ADC.c **** 	        {
1090:Generated_Source\PSoC4/ADC.c ****                 /* Divide by 2^(AVG_CNT + 1) */
1091:Generated_Source\PSoC4/ADC.c **** 	            averageAdcSamplesDiv = ((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 1656              		.loc 1 1091 0
 1657 0072 384B     		ldr	r3, .L128
 1658 0074 1B68     		ldr	r3, [r3]
 1659 0076 384A     		ldr	r2, .L128+4
 1660 0078 3421     		mov	r1, #52
 1661 007a 4B43     		mul	r3, r1
 1662 007c D318     		add	r3, r2, r3
 1663 007e 0833     		add	r3, r3, #8
 1664 0080 5B68     		ldr	r3, [r3, #4]
1092:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_AVG_CNT_MSK) 
 1665              		.loc 1 1092 0
 1666 0082 7022     		mov	r2, #112
 1667 0084 1340     		and	r3, r2
1091:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_AVG_CNT_MSK) 
 1668              		.loc 1 1091 0
 1669 0086 1B09     		lsr	r3, r3, #4
 1670 0088 FB60     		str	r3, [r7, #12]
1093:Generated_Source\PSoC4/ADC.c **** 					>> ADC_SAR_SAMPLE_CTRL_AVG_CNT_SHFT);
1094:Generated_Source\PSoC4/ADC.c ****                 averageAdcSamplesDiv = (1uL << (averageAdcSamplesDiv + 1uL));
 1671              		.loc 1 1094 0
 1672 008a FB68     		ldr	r3, [r7, #12]
 1673 008c 0133     		add	r3, r3, #1
 1674 008e 1A1C     		mov	r2, r3
 1675 0090 0123     		mov	r3, #1
 1676 0092 9340     		lsl	r3, r3, r2
 1677 0094 FB60     		str	r3, [r7, #12]
1095:Generated_Source\PSoC4/ADC.c ****                 
1096:Generated_Source\PSoC4/ADC.c ****                 /* If unsigned format, prevent sign extension */
1097:Generated_Source\PSoC4/ADC.c ****                 if(0 == ADC_IsChannelSigned(chan))
 1678              		.loc 1 1097 0
 1679 0096 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 50


 1680 0098 181C     		mov	r0, r3
 1681 009a FFF7FEFF 		bl	ADC_IsChannelSigned
 1682 009e 031E     		sub	r3, r0, #0
 1683 00a0 0BD1     		bne	.L122
1098:Generated_Source\PSoC4/ADC.c ****                 {
1099:Generated_Source\PSoC4/ADC.c **** 					temp = ((uint16) adcCounts / averageAdcSamplesDiv);
 1684              		.loc 1 1099 0
 1685 00a2 BB1C     		add	r3, r7, #2
 1686 00a4 1B88     		ldrh	r3, [r3]
 1687 00a6 181C     		mov	r0, r3
 1688 00a8 F968     		ldr	r1, [r7, #12]
 1689 00aa FFF7FEFF 		bl	__aeabi_uidiv
 1690 00ae 031C     		mov	r3, r0
 1691 00b0 BB60     		str	r3, [r7, #8]
1100:Generated_Source\PSoC4/ADC.c ****                     adcCounts = (int16) temp;
 1692              		.loc 1 1100 0
 1693 00b2 BB1C     		add	r3, r7, #2
 1694 00b4 BA68     		ldr	r2, [r7, #8]
 1695 00b6 1A80     		strh	r2, [r3]
 1696 00b8 0DE0     		b	.L121
 1697              	.L122:
1101:Generated_Source\PSoC4/ADC.c ****                 }
1102:Generated_Source\PSoC4/ADC.c ****                 else
1103:Generated_Source\PSoC4/ADC.c ****                 {
1104:Generated_Source\PSoC4/ADC.c ****                     adcCounts /= (int16) averageAdcSamplesDiv;
 1698              		.loc 1 1104 0
 1699 00ba BB1C     		add	r3, r7, #2
 1700 00bc 0022     		mov	r2, #0
 1701 00be 9A5E     		ldrsh	r2, [r3, r2]
 1702 00c0 FB68     		ldr	r3, [r7, #12]
 1703 00c2 9BB2     		uxth	r3, r3
 1704 00c4 1BB2     		sxth	r3, r3
 1705 00c6 101C     		mov	r0, r2
 1706 00c8 191C     		mov	r1, r3
 1707 00ca FFF7FEFF 		bl	__aeabi_idiv
 1708 00ce 031C     		mov	r3, r0
 1709 00d0 1A1C     		mov	r2, r3
 1710 00d2 BB1C     		add	r3, r7, #2
 1711 00d4 1A80     		strh	r2, [r3]
 1712              	.L121:
1105:Generated_Source\PSoC4/ADC.c ****                 }
1106:Generated_Source\PSoC4/ADC.c **** 	        }
1107:Generated_Source\PSoC4/ADC.c **** 	    }
1108:Generated_Source\PSoC4/ADC.c **** 
1109:Generated_Source\PSoC4/ADC.c **** 	    /* Subtract ADC offset */
1110:Generated_Source\PSoC4/ADC.c **** 	    adcCounts -= ADC_offset[rawChannel];
 1713              		.loc 1 1110 0
 1714 00d6 224B     		ldr	r3, .L128+12
 1715 00d8 3A69     		ldr	r2, [r7, #16]
 1716 00da 5200     		lsl	r2, r2, #1
 1717 00dc D35A     		ldrh	r3, [r2, r3]
 1718 00de 99B2     		uxth	r1, r3
 1719 00e0 BB1C     		add	r3, r7, #2
 1720 00e2 1A88     		ldrh	r2, [r3]
 1721 00e4 8BB2     		uxth	r3, r1
 1722 00e6 D31A     		sub	r3, r2, r3
 1723 00e8 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 51


 1724 00ea BB1C     		add	r3, r7, #2
 1725 00ec 1A80     		strh	r2, [r3]
1111:Generated_Source\PSoC4/ADC.c **** 
1112:Generated_Source\PSoC4/ADC.c **** 	    result_mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ? 
 1726              		.loc 1 1112 0
 1727 00ee BB1C     		add	r3, r7, #2
 1728 00f0 0022     		mov	r2, #0
 1729 00f2 9B5E     		ldrsh	r3, [r3, r2]
 1730 00f4 1B4A     		ldr	r2, .L128+16
 1731 00f6 5A43     		mul	r2, r3
1113:Generated_Source\PSoC4/ADC.c **** 	             (ADC_countsPer10Volt[rawChannel] / 2) 
1114:Generated_Source\PSoC4/ADC.c **** 				: (-(ADC_countsPer10Volt[rawChannel] / 2)) )) 
 1732              		.loc 1 1114 0
 1733 00f8 BB1C     		add	r3, r7, #2
 1734 00fa 0021     		mov	r1, #0
 1735 00fc 5B5E     		ldrsh	r3, [r3, r1]
 1736 00fe 002B     		cmp	r3, #0
 1737 0100 08DD     		ble	.L123
1113:Generated_Source\PSoC4/ADC.c **** 	             (ADC_countsPer10Volt[rawChannel] / 2) 
 1738              		.loc 1 1113 0 discriminator 1
 1739 0102 194B     		ldr	r3, .L128+20
 1740 0104 3969     		ldr	r1, [r7, #16]
 1741 0106 8900     		lsl	r1, r1, #2
 1742 0108 CB58     		ldr	r3, [r1, r3]
 1743              		.loc 1 1114 0 discriminator 1
 1744 010a 002B     		cmp	r3, #0
 1745 010c 00DA     		bge	.L124
 1746 010e 0133     		add	r3, r3, #1
 1747              	.L124:
 1748 0110 5B10     		asr	r3, r3, #1
 1749 0112 08E0     		b	.L125
 1750              	.L123:
 1751              		.loc 1 1114 0 is_stmt 0 discriminator 2
 1752 0114 144B     		ldr	r3, .L128+20
 1753 0116 3969     		ldr	r1, [r7, #16]
 1754 0118 8900     		lsl	r1, r1, #2
 1755 011a CB58     		ldr	r3, [r1, r3]
 1756 011c 002B     		cmp	r3, #0
 1757 011e 00DA     		bge	.L126
 1758 0120 0133     		add	r3, r3, #1
 1759              	.L126:
 1760 0122 5B10     		asr	r3, r3, #1
 1761 0124 5B42     		neg	r3, r3
 1762              	.L125:
1112:Generated_Source\PSoC4/ADC.c **** 	             (ADC_countsPer10Volt[rawChannel] / 2) 
 1763              		.loc 1 1112 0 is_stmt 1
 1764 0126 D118     		add	r1, r2, r3
1115:Generated_Source\PSoC4/ADC.c **** 	             / ADC_countsPer10Volt[rawChannel]);
 1765              		.loc 1 1115 0
 1766 0128 0F4B     		ldr	r3, .L128+20
 1767 012a 3A69     		ldr	r2, [r7, #16]
 1768 012c 9200     		lsl	r2, r2, #2
 1769 012e D358     		ldr	r3, [r2, r3]
 1770 0130 081C     		mov	r0, r1
 1771 0132 191C     		mov	r1, r3
 1772 0134 FFF7FEFF 		bl	__aeabi_idiv
 1773 0138 031C     		mov	r3, r0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 52


 1774 013a 1A1C     		mov	r2, r3
1112:Generated_Source\PSoC4/ADC.c **** 	             (ADC_countsPer10Volt[rawChannel] / 2) 
 1775              		.loc 1 1112 0
 1776 013c 1623     		mov	r3, #22
 1777 013e FB18     		add	r3, r7, r3
 1778 0140 1A80     		strh	r2, [r3]
 1779              	.L119:
1116:Generated_Source\PSoC4/ADC.c **** 	}
1117:Generated_Source\PSoC4/ADC.c ****     return result_mVolts;
 1780              		.loc 1 1117 0
 1781 0142 1623     		mov	r3, #22
 1782 0144 FB18     		add	r3, r7, r3
 1783 0146 1B88     		ldrh	r3, [r3]
 1784 0148 1BB2     		sxth	r3, r3
1118:Generated_Source\PSoC4/ADC.c **** }
 1785              		.loc 1 1118 0
 1786 014a 181C     		mov	r0, r3
 1787 014c BD46     		mov	sp, r7
 1788 014e 06B0     		add	sp, sp, #24
 1789              		@ sp needed
 1790 0150 80BD     		pop	{r7, pc}
 1791              	.L129:
 1792 0152 C046     		.align	2
 1793              	.L128:
 1794 0154 04000000 		.word	ADC_currentConfig
 1795 0158 00000000 		.word	ADC_allConfigs
 1796 015c 00000000 		.word	ADC_channelsConfig
 1797 0160 00000000 		.word	ADC_offset
 1798 0164 10270000 		.word	10000
 1799 0168 00000000 		.word	ADC_countsPer10Volt
 1800              		.cfi_endproc
 1801              	.LFE22:
 1802              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1803              		.global	__aeabi_lmul
 1804              		.global	__aeabi_ldivmod
 1805              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1806              		.align	2
 1807              		.global	ADC_CountsTo_uVolts
 1808              		.code	16
 1809              		.thumb_func
 1810              		.type	ADC_CountsTo_uVolts, %function
 1811              	ADC_CountsTo_uVolts:
 1812              	.LFB23:
1119:Generated_Source\PSoC4/ADC.c **** 
1120:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
1121:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_CountsTo_uVolts
1122:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//**
1123:Generated_Source\PSoC4/ADC.c **** *
1124:Generated_Source\PSoC4/ADC.c **** * \brief Converts the ADC output to microvolts as a 32-bit integer. 
1125:Generated_Source\PSoC4/ADC.c **** * For example, if the ADC measured 0.534 volts, the return value 
1126:Generated_Source\PSoC4/ADC.c **** * would be 534000. The calculation of voltage depends on the value of the voltage 
1127:Generated_Source\PSoC4/ADC.c **** * reference. When the Vref is based on Vdda, the value used for Vdda is set for 
1128:Generated_Source\PSoC4/ADC.c **** * the project in the System tab of the DWR.
1129:Generated_Source\PSoC4/ADC.c **** *
1130:Generated_Source\PSoC4/ADC.c **** * \param chan ADC channel number.   
1131:Generated_Source\PSoC4/ADC.c **** *
1132:Generated_Source\PSoC4/ADC.c **** * \param adcCounts Result from the ADC conversion.
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 53


1133:Generated_Source\PSoC4/ADC.c **** *
1134:Generated_Source\PSoC4/ADC.c **** * \return Result in microvolts.
1135:Generated_Source\PSoC4/ADC.c **** * 
1136:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
1137:Generated_Source\PSoC4/ADC.c **** *
1138:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
1139:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_CountsTo_uVolts
1140:Generated_Source\PSoC4/ADC.c **** *
1141:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
1142:Generated_Source\PSoC4/ADC.c **** int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
1143:Generated_Source\PSoC4/ADC.c **** {   
 1813              		.loc 1 1143 0
 1814              		.cfi_startproc
 1815 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1816              		.cfi_def_cfa_offset 20
 1817              		.cfi_offset 4, -20
 1818              		.cfi_offset 5, -16
 1819              		.cfi_offset 6, -12
 1820              		.cfi_offset 7, -8
 1821              		.cfi_offset 14, -4
 1822 0002 8BB0     		sub	sp, sp, #44
 1823              		.cfi_def_cfa_offset 64
 1824 0004 00AF     		add	r7, sp, #0
 1825              		.cfi_def_cfa_register 7
 1826 0006 F860     		str	r0, [r7, #12]
 1827 0008 0A1C     		mov	r2, r1
 1828 000a 0A23     		mov	r3, #10
 1829 000c FB18     		add	r3, r7, r3
 1830 000e 1A80     		strh	r2, [r3]
1144:Generated_Source\PSoC4/ADC.c ****     int64 result_uVolts = 0;
 1831              		.loc 1 1144 0
 1832 0010 0023     		mov	r3, #0
 1833 0012 0024     		mov	r4, #0
 1834 0014 3B62     		str	r3, [r7, #32]
 1835 0016 7C62     		str	r4, [r7, #36]
1145:Generated_Source\PSoC4/ADC.c **** 	uint32 temp;
1146:Generated_Source\PSoC4/ADC.c **** 	uint32 averageAdcSamplesDiv;
1147:Generated_Source\PSoC4/ADC.c **** 	uint32 rawChannel;
1148:Generated_Source\PSoC4/ADC.c **** 	rawChannel = ADC_allConfigs[ADC_currentConfig].channelBase + chan;
 1836              		.loc 1 1148 0
 1837 0018 4B4B     		ldr	r3, .L136
 1838 001a 1A68     		ldr	r2, [r3]
 1839 001c 4B4B     		ldr	r3, .L136+4
 1840 001e 3421     		mov	r1, #52
 1841 0020 4A43     		mul	r2, r1
 1842 0022 D258     		ldr	r2, [r2, r3]
 1843 0024 FB68     		ldr	r3, [r7, #12]
 1844 0026 D318     		add	r3, r2, r3
 1845 0028 FB61     		str	r3, [r7, #28]
1149:Generated_Source\PSoC4/ADC.c **** 
1150:Generated_Source\PSoC4/ADC.c **** 	if((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 1846              		.loc 1 1150 0
 1847 002a 474B     		ldr	r3, .L136
 1848 002c 1B68     		ldr	r3, [r3]
 1849 002e 474A     		ldr	r2, .L136+4
 1850 0030 3421     		mov	r1, #52
 1851 0032 4B43     		mul	r3, r1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 54


 1852 0034 D318     		add	r3, r2, r3
 1853 0036 0833     		add	r3, r3, #8
 1854 0038 5B68     		ldr	r3, [r3, #4]
1151:Generated_Source\PSoC4/ADC.c **** 		& ADC_SAR_SAMPLE_CTRL_LEFT_ALIGN_MSK) 
 1855              		.loc 1 1151 0
 1856 003a 0222     		mov	r2, #2
 1857 003c 1340     		and	r3, r2
1150:Generated_Source\PSoC4/ADC.c **** 		& ADC_SAR_SAMPLE_CTRL_LEFT_ALIGN_MSK) 
 1858              		.loc 1 1150 0
 1859 003e 00D0     		beq	.LCB1606
 1860 0040 7CE0     		b	.L131	@long jump
 1861              	.LCB1606:
1152:Generated_Source\PSoC4/ADC.c **** 		!= ADC_SAR_SAMPLE_CTRL_LEFT_ALIGN_MSK)
1153:Generated_Source\PSoC4/ADC.c **** 	{
1154:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
1155:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1862              		.loc 1 1155 0
 1863 0042 FB68     		ldr	r3, [r7, #12]
 1864 0044 062B     		cmp	r3, #6
 1865 0046 02D9     		bls	.L132
 1866              		.loc 1 1155 0 is_stmt 0 discriminator 1
 1867 0048 0020     		mov	r0, #0
 1868 004a FFF7FEFF 		bl	CyHalt
 1869              	.L132:
1156:Generated_Source\PSoC4/ADC.c **** 
1157:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
1158:Generated_Source\PSoC4/ADC.c **** 		if((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 1870              		.loc 1 1158 0 is_stmt 1
 1871 004e 3E4B     		ldr	r3, .L136
 1872 0050 1B68     		ldr	r3, [r3]
 1873 0052 3E4A     		ldr	r2, .L136+4
 1874 0054 3421     		mov	r1, #52
 1875 0056 4B43     		mul	r3, r1
 1876 0058 D318     		add	r3, r2, r3
 1877 005a 0833     		add	r3, r3, #8
 1878 005c 5B68     		ldr	r3, [r3, #4]
1159:Generated_Source\PSoC4/ADC.c **** 			& ADC_SAR_SAMPLE_CTRL_AVG_SHIFT_MSK) 
 1879              		.loc 1 1159 0
 1880 005e 8022     		mov	r2, #128
 1881 0060 1340     		and	r3, r2
1158:Generated_Source\PSoC4/ADC.c **** 			& ADC_SAR_SAMPLE_CTRL_AVG_SHIFT_MSK) 
 1882              		.loc 1 1158 0
 1883 0062 3DD1     		bne	.L133
1160:Generated_Source\PSoC4/ADC.c **** 			!= ADC_SAR_SAMPLE_CTRL_AVG_SHIFT_MSK)
1161:Generated_Source\PSoC4/ADC.c **** 		{
1162:Generated_Source\PSoC4/ADC.c **** 	        if((ADC_channelsConfig[rawChannel] & ADC_SAR_CHAN_CONFIG_AVG_EN_MSK) != 0u)
 1884              		.loc 1 1162 0
 1885 0064 3A4B     		ldr	r3, .L136+8
 1886 0066 FA69     		ldr	r2, [r7, #28]
 1887 0068 9200     		lsl	r2, r2, #2
 1888 006a D258     		ldr	r2, [r2, r3]
 1889 006c 8023     		mov	r3, #128
 1890 006e DB00     		lsl	r3, r3, #3
 1891 0070 1340     		and	r3, r2
 1892 0072 35D0     		beq	.L133
1163:Generated_Source\PSoC4/ADC.c **** 	        {
1164:Generated_Source\PSoC4/ADC.c ****                 /* Divide by 2^(AVG_CNT + 1) */
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 55


1165:Generated_Source\PSoC4/ADC.c **** 				averageAdcSamplesDiv = ((ADC_allConfigs[ADC_currentConfig].sampleCtrl 
 1893              		.loc 1 1165 0
 1894 0074 344B     		ldr	r3, .L136
 1895 0076 1B68     		ldr	r3, [r3]
 1896 0078 344A     		ldr	r2, .L136+4
 1897 007a 3421     		mov	r1, #52
 1898 007c 4B43     		mul	r3, r1
 1899 007e D318     		add	r3, r2, r3
 1900 0080 0833     		add	r3, r3, #8
 1901 0082 5B68     		ldr	r3, [r3, #4]
1166:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_AVG_CNT_MSK) 
 1902              		.loc 1 1166 0
 1903 0084 7022     		mov	r2, #112
 1904 0086 1340     		and	r3, r2
1165:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_AVG_CNT_MSK) 
 1905              		.loc 1 1165 0
 1906 0088 1B09     		lsr	r3, r3, #4
 1907 008a BB61     		str	r3, [r7, #24]
1167:Generated_Source\PSoC4/ADC.c **** 					>> ADC_SAR_SAMPLE_CTRL_AVG_CNT_SHFT);
1168:Generated_Source\PSoC4/ADC.c ****                 averageAdcSamplesDiv = (1uL << (averageAdcSamplesDiv + 1uL));
 1908              		.loc 1 1168 0
 1909 008c BB69     		ldr	r3, [r7, #24]
 1910 008e 0133     		add	r3, r3, #1
 1911 0090 1A1C     		mov	r2, r3
 1912 0092 0123     		mov	r3, #1
 1913 0094 9340     		lsl	r3, r3, r2
 1914 0096 BB61     		str	r3, [r7, #24]
1169:Generated_Source\PSoC4/ADC.c ****                 
1170:Generated_Source\PSoC4/ADC.c ****                 /* If unsigned format, prevent sign extension */
1171:Generated_Source\PSoC4/ADC.c ****                 if(0 == ADC_IsChannelSigned(chan))
 1915              		.loc 1 1171 0
 1916 0098 FB68     		ldr	r3, [r7, #12]
 1917 009a 181C     		mov	r0, r3
 1918 009c FFF7FEFF 		bl	ADC_IsChannelSigned
 1919 00a0 031E     		sub	r3, r0, #0
 1920 00a2 0DD1     		bne	.L134
1172:Generated_Source\PSoC4/ADC.c ****                 {
1173:Generated_Source\PSoC4/ADC.c **** 					temp = ((uint16) adcCounts / averageAdcSamplesDiv);
 1921              		.loc 1 1173 0
 1922 00a4 0A23     		mov	r3, #10
 1923 00a6 FB18     		add	r3, r7, r3
 1924 00a8 1B88     		ldrh	r3, [r3]
 1925 00aa 181C     		mov	r0, r3
 1926 00ac B969     		ldr	r1, [r7, #24]
 1927 00ae FFF7FEFF 		bl	__aeabi_uidiv
 1928 00b2 031C     		mov	r3, r0
 1929 00b4 7B61     		str	r3, [r7, #20]
1174:Generated_Source\PSoC4/ADC.c ****                     adcCounts = (int16) temp;
 1930              		.loc 1 1174 0
 1931 00b6 0A23     		mov	r3, #10
 1932 00b8 FB18     		add	r3, r7, r3
 1933 00ba 7A69     		ldr	r2, [r7, #20]
 1934 00bc 1A80     		strh	r2, [r3]
 1935 00be 0FE0     		b	.L133
 1936              	.L134:
1175:Generated_Source\PSoC4/ADC.c ****                 }
1176:Generated_Source\PSoC4/ADC.c ****                 else
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 56


1177:Generated_Source\PSoC4/ADC.c ****                 {
1178:Generated_Source\PSoC4/ADC.c ****                     adcCounts /= (int16) averageAdcSamplesDiv;
 1937              		.loc 1 1178 0
 1938 00c0 0A23     		mov	r3, #10
 1939 00c2 FB18     		add	r3, r7, r3
 1940 00c4 0022     		mov	r2, #0
 1941 00c6 9A5E     		ldrsh	r2, [r3, r2]
 1942 00c8 BB69     		ldr	r3, [r7, #24]
 1943 00ca 9BB2     		uxth	r3, r3
 1944 00cc 1BB2     		sxth	r3, r3
 1945 00ce 101C     		mov	r0, r2
 1946 00d0 191C     		mov	r1, r3
 1947 00d2 FFF7FEFF 		bl	__aeabi_idiv
 1948 00d6 031C     		mov	r3, r0
 1949 00d8 1A1C     		mov	r2, r3
 1950 00da 0A23     		mov	r3, #10
 1951 00dc FB18     		add	r3, r7, r3
 1952 00de 1A80     		strh	r2, [r3]
 1953              	.L133:
1179:Generated_Source\PSoC4/ADC.c ****                 }
1180:Generated_Source\PSoC4/ADC.c ****             }
1181:Generated_Source\PSoC4/ADC.c ****         }
1182:Generated_Source\PSoC4/ADC.c **** 
1183:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
1184:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[rawChannel];
 1954              		.loc 1 1184 0
 1955 00e0 1C4B     		ldr	r3, .L136+12
 1956 00e2 FA69     		ldr	r2, [r7, #28]
 1957 00e4 5200     		lsl	r2, r2, #1
 1958 00e6 D35A     		ldrh	r3, [r2, r3]
 1959 00e8 99B2     		uxth	r1, r3
 1960 00ea 0A23     		mov	r3, #10
 1961 00ec FB18     		add	r3, r7, r3
 1962 00ee 1A88     		ldrh	r2, [r3]
 1963 00f0 8BB2     		uxth	r3, r1
 1964 00f2 D31A     		sub	r3, r2, r3
 1965 00f4 9AB2     		uxth	r2, r3
 1966 00f6 0A23     		mov	r3, #10
 1967 00f8 FB18     		add	r3, r7, r3
 1968 00fa 1A80     		strh	r2, [r3]
1185:Generated_Source\PSoC4/ADC.c **** 
1186:Generated_Source\PSoC4/ADC.c ****         result_uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) 
 1969              		.loc 1 1186 0
 1970 00fc 0A23     		mov	r3, #10
 1971 00fe FB18     		add	r3, r7, r3
 1972 0100 1B88     		ldrh	r3, [r3]
 1973 0102 1BB2     		sxth	r3, r3
 1974 0104 3B60     		str	r3, [r7]
 1975 0106 DB17     		asr	r3, r3, #31
 1976 0108 7B60     		str	r3, [r7, #4]
 1977 010a 3868     		ldr	r0, [r7]
 1978 010c 7968     		ldr	r1, [r7, #4]
 1979 010e 124A     		ldr	r2, .L136+16
 1980 0110 0023     		mov	r3, #0
 1981 0112 FFF7FEFF 		bl	__aeabi_lmul
 1982 0116 031C     		mov	r3, r0
 1983 0118 0C1C     		mov	r4, r1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 57


 1984 011a 181C     		mov	r0, r3
 1985 011c 211C     		mov	r1, r4
1187:Generated_Source\PSoC4/ADC.c **** 			/ ADC_countsPer10Volt[rawChannel];
 1986              		.loc 1 1187 0
 1987 011e 0F4B     		ldr	r3, .L136+20
 1988 0120 FA69     		ldr	r2, [r7, #28]
 1989 0122 9200     		lsl	r2, r2, #2
 1990 0124 D358     		ldr	r3, [r2, r3]
 1991 0126 1D1C     		mov	r5, r3
 1992 0128 DB17     		asr	r3, r3, #31
 1993 012a 1E1C     		mov	r6, r3
1186:Generated_Source\PSoC4/ADC.c **** 			/ ADC_countsPer10Volt[rawChannel];
 1994              		.loc 1 1186 0
 1995 012c 2A1C     		mov	r2, r5
 1996 012e 331C     		mov	r3, r6
 1997 0130 FFF7FEFF 		bl	__aeabi_ldivmod
 1998 0134 031C     		mov	r3, r0
 1999 0136 0C1C     		mov	r4, r1
 2000 0138 3B62     		str	r3, [r7, #32]
 2001 013a 7C62     		str	r4, [r7, #36]
 2002              	.L131:
1188:Generated_Source\PSoC4/ADC.c **** 	}
1189:Generated_Source\PSoC4/ADC.c **** 	return ( (int32)result_uVolts );
 2003              		.loc 1 1189 0
 2004 013c 3B6A     		ldr	r3, [r7, #32]
1190:Generated_Source\PSoC4/ADC.c **** }
 2005              		.loc 1 1190 0
 2006 013e 181C     		mov	r0, r3
 2007 0140 BD46     		mov	sp, r7
 2008 0142 0BB0     		add	sp, sp, #44
 2009              		@ sp needed
 2010 0144 F0BD     		pop	{r4, r5, r6, r7, pc}
 2011              	.L137:
 2012 0146 C046     		.align	2
 2013              	.L136:
 2014 0148 04000000 		.word	ADC_currentConfig
 2015 014c 00000000 		.word	ADC_allConfigs
 2016 0150 00000000 		.word	ADC_channelsConfig
 2017 0154 00000000 		.word	ADC_offset
 2018 0158 80969800 		.word	10000000
 2019 015c 00000000 		.word	ADC_countsPer10Volt
 2020              		.cfi_endproc
 2021              	.LFE23:
 2022              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 2023              		.section	.text.ADC_Init,"ax",%progbits
 2024              		.align	2
 2025              		.global	ADC_Init
 2026              		.code	16
 2027              		.thumb_func
 2028              		.type	ADC_Init, %function
 2029              	ADC_Init:
 2030              	.LFB24:
1191:Generated_Source\PSoC4/ADC.c **** 
1192:Generated_Source\PSoC4/ADC.c **** #if(0u != ADC_ANY_CONFIG_USES_FILTER)		
1193:Generated_Source\PSoC4/ADC.c ****     /* ****************************************************************************
1194:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_TrimOffset
1195:Generated_Source\PSoC4/ADC.c ****     ****************************************************************************//*
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 58


1196:Generated_Source\PSoC4/ADC.c ****     *
1197:Generated_Source\PSoC4/ADC.c ****     * \brief Runs an algorithm to reduce offset using the UAB's opamp trim.
1198:Generated_Source\PSoC4/ADC.c ****     *
1199:Generated_Source\PSoC4/ADC.c ****     * \param None
1200:Generated_Source\PSoC4/ADC.c ****     * 
1201:Generated_Source\PSoC4/ADC.c ****     * \return None
1202:Generated_Source\PSoC4/ADC.c ****     *
1203:Generated_Source\PSoC4/ADC.c ****     * \sideeffect None
1204:Generated_Source\PSoC4/ADC.c ****     *
1205:Generated_Source\PSoC4/ADC.c ****     * <b>Code Snippet</b>
1206:Generated_Source\PSoC4/ADC.c ****     *  \snippet main.c snippet_ADC_TrimOffset
1207:Generated_Source\PSoC4/ADC.c ****     *
1208:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
1209:Generated_Source\PSoC4/ADC.c ****     void ADC_TrimOffset(void)
1210:Generated_Source\PSoC4/ADC.c ****     {
1211:Generated_Source\PSoC4/ADC.c ****         uint32 curTrim = 0uL;
1212:Generated_Source\PSoC4/ADC.c ****         uint32 bestTrim = 0uL;
1213:Generated_Source\PSoC4/ADC.c ****         int16 curResult = 0;
1214:Generated_Source\PSoC4/ADC.c ****         int16 bestResult = (int16)0x7fff; /* Max positive 16-bit number */
1215:Generated_Source\PSoC4/ADC.c ****         int16 targResult = 0;
1216:Generated_Source\PSoC4/ADC.c **** 
1217:Generated_Source\PSoC4/ADC.c ****         ADC_Stop();
1218:Generated_Source\PSoC4/ADC.c ****         ADC_Start();
1219:Generated_Source\PSoC4/ADC.c ****         ADC_StartConvert();
1220:Generated_Source\PSoC4/ADC.c ****         /* Set firmware modbit. */
1221:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_A_CAP_ABCF_VAL_REG |= (0x1uL << CyUAB_SIGN_VAL_SHIFT);
1222:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_B_CAP_ABCF_VAL_REG |= (0x1uL << CyUAB_SIGN_VAL_SHIFT);
1223:Generated_Source\PSoC4/ADC.c ****         /* Unsigned mode zero is 0x800, signed mode zero is 0 */
1224:Generated_Source\PSoC4/ADC.c ****         targResult = (0u != (ADC_SAR_SAMPLE_CTRL_REG 
1225:Generated_Source\PSoC4/ADC.c ****                                  & ADC_SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_MSK))
1226:Generated_Source\PSoC4/ADC.c ****                            ? 0
1227:Generated_Source\PSoC4/ADC.c ****                            : (int16)0x0800;
1228:Generated_Source\PSoC4/ADC.c ****                         
1229:Generated_Source\PSoC4/ADC.c ****         /* Check each trim value. Remember trim that created smallest offset.*/
1230:Generated_Source\PSoC4/ADC.c ****         for(curTrim = 0uL; curTrim < 0x10uL; curTrim++)
1231:Generated_Source\PSoC4/ADC.c ****         {
1232:Generated_Source\PSoC4/ADC.c ****             /* Use defines from cydevice_trm to set trim. */
1233:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32(CYREG_UAB0_OA_TRIM0, 
1234:Generated_Source\PSoC4/ADC.c ****                 CY_GET_REG32(CYREG_UAB0_OA_TRIM0) & ~(0xfuL << CyUAB_OA_OFFSET_SHIFT));
1235:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32(CYREG_UAB0_OA_TRIM0, 
1236:Generated_Source\PSoC4/ADC.c ****                 CY_GET_REG32(CYREG_UAB0_OA_TRIM0) | (curTrim << CyUAB_OA_OFFSET_SHIFT));
1237:Generated_Source\PSoC4/ADC.c ****             CyDelayUs(100u);
1238:Generated_Source\PSoC4/ADC.c ****             (void)ADC_IsEndConversion(ADC_WAIT_FOR_RESULT);
1239:Generated_Source\PSoC4/ADC.c ****             curResult = ADC_GetResult16(0uL) - targResult;
1240:Generated_Source\PSoC4/ADC.c ****             if (curResult < 0)
1241:Generated_Source\PSoC4/ADC.c ****             {
1242:Generated_Source\PSoC4/ADC.c ****                 curResult *= -1;
1243:Generated_Source\PSoC4/ADC.c ****             }
1244:Generated_Source\PSoC4/ADC.c ****             if (curResult < bestResult)
1245:Generated_Source\PSoC4/ADC.c ****             {
1246:Generated_Source\PSoC4/ADC.c ****                 bestResult = curResult;
1247:Generated_Source\PSoC4/ADC.c ****                 bestTrim = curTrim;
1248:Generated_Source\PSoC4/ADC.c ****             }
1249:Generated_Source\PSoC4/ADC.c ****         }
1250:Generated_Source\PSoC4/ADC.c ****         
1251:Generated_Source\PSoC4/ADC.c ****         /* Set the best trim. */
1252:Generated_Source\PSoC4/ADC.c ****         CY_SET_REG32(CYREG_UAB0_OA_TRIM0, 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 59


1253:Generated_Source\PSoC4/ADC.c ****             CY_GET_REG32(CYREG_UAB0_OA_TRIM0) & ~(0xfuL << CyUAB_OA_OFFSET_SHIFT));
1254:Generated_Source\PSoC4/ADC.c ****         CY_SET_REG32(CYREG_UAB0_OA_TRIM0, 
1255:Generated_Source\PSoC4/ADC.c ****             CY_GET_REG32(CYREG_UAB0_OA_TRIM0) | (bestTrim << CyUAB_OA_OFFSET_SHIFT));
1256:Generated_Source\PSoC4/ADC.c ****         
1257:Generated_Source\PSoC4/ADC.c ****         /* Clear the modbit */
1258:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_A_CAP_ABCF_VAL_REG &= ~(0x1uL << CyUAB_SIGN_VAL_SHIFT);
1259:Generated_Source\PSoC4/ADC.c ****         ADC_UABH_B_CAP_ABCF_VAL_REG &= ~(0x1uL << CyUAB_SIGN_VAL_SHIFT);
1260:Generated_Source\PSoC4/ADC.c ****     }
1261:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_ANY_CONFIG_USES_FILTER != 0u */
1262:Generated_Source\PSoC4/ADC.c **** /* ****************************************************************************
1263:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
1264:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//*
1265:Generated_Source\PSoC4/ADC.c **** *
1266:Generated_Source\PSoC4/ADC.c **** * \brief Initialize the component according to parameters defined in the 
1267:Generated_Source\PSoC4/ADC.c **** * customizer.
1268:Generated_Source\PSoC4/ADC.c **** *
1269:Generated_Source\PSoC4/ADC.c **** * \param None
1270:Generated_Source\PSoC4/ADC.c **** * 
1271:Generated_Source\PSoC4/ADC.c **** * \return None
1272:Generated_Source\PSoC4/ADC.c **** *
1273:Generated_Source\PSoC4/ADC.c **** * \sideeffect None
1274:Generated_Source\PSoC4/ADC.c **** *
1275:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
1276:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_Init
1277:Generated_Source\PSoC4/ADC.c **** *
1278:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
1279:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
1280:Generated_Source\PSoC4/ADC.c **** {
 2031              		.loc 1 1280 0
 2032              		.cfi_startproc
 2033 0000 80B5     		push	{r7, lr}
 2034              		.cfi_def_cfa_offset 8
 2035              		.cfi_offset 7, -8
 2036              		.cfi_offset 14, -4
 2037 0002 84B0     		sub	sp, sp, #16
 2038              		.cfi_def_cfa_offset 24
 2039 0004 00AF     		add	r7, sp, #0
 2040              		.cfi_def_cfa_register 7
1281:Generated_Source\PSoC4/ADC.c **** 	uint32 chNum = 0ul;
 2041              		.loc 1 1281 0
 2042 0006 0023     		mov	r3, #0
 2043 0008 FB60     		str	r3, [r7, #12]
1282:Generated_Source\PSoC4/ADC.c **** 	uint32 configNum = 0u;
 2044              		.loc 1 1282 0
 2045 000a 0023     		mov	r3, #0
 2046 000c BB60     		str	r3, [r7, #8]
1283:Generated_Source\PSoC4/ADC.c **** 	int32 counts;
1284:Generated_Source\PSoC4/ADC.c **** 	
1285:Generated_Source\PSoC4/ADC.c **** 	if(0u == ADC_initVar)
 2047              		.loc 1 1285 0
 2048 000e 654B     		ldr	r3, .L155
 2049 0010 1B78     		ldrb	r3, [r3]
 2050 0012 002B     		cmp	r3, #0
 2051 0014 00D0     		beq	.LCB1780
 2052 0016 C0E0     		b	.L139	@long jump
 2053              	.LCB1780:
1286:Generated_Source\PSoC4/ADC.c **** 	{
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 60


1287:Generated_Source\PSoC4/ADC.c **** 		/* Set offset and countsPer10Volt for all channels */
1288:Generated_Source\PSoC4/ADC.c **** 		for(chNum = 0ul; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 2054              		.loc 1 1288 0
 2055 0018 0023     		mov	r3, #0
 2056 001a FB60     		str	r3, [r7, #12]
 2057 001c 85E0     		b	.L140
 2058              	.L151:
1289:Generated_Source\PSoC4/ADC.c **** 		{      
1290:Generated_Source\PSoC4/ADC.c **** 			if((ADC_channelsConfig[chNum] & ADC_SAR_CHAN_CONFIG_RESOLUTION_MSK) != 0u)
 2059              		.loc 1 1290 0
 2060 001e 624B     		ldr	r3, .L155+4
 2061 0020 FA68     		ldr	r2, [r7, #12]
 2062 0022 9200     		lsl	r2, r2, #2
 2063 0024 D258     		ldr	r2, [r2, r3]
 2064 0026 8023     		mov	r3, #128
 2065 0028 9B00     		lsl	r3, r3, #2
 2066 002a 1340     		and	r3, r2
 2067 002c 11D0     		beq	.L141
1291:Generated_Source\PSoC4/ADC.c ****         	{
1292:Generated_Source\PSoC4/ADC.c **** 				if((ADC_allConfigs[configNum].sampleCtrl 
 2068              		.loc 1 1292 0
 2069 002e 5F4A     		ldr	r2, .L155+8
 2070 0030 BB68     		ldr	r3, [r7, #8]
 2071 0032 3421     		mov	r1, #52
 2072 0034 4B43     		mul	r3, r1
 2073 0036 D318     		add	r3, r2, r3
 2074 0038 0833     		add	r3, r3, #8
 2075 003a 5B68     		ldr	r3, [r3, #4]
1293:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_SUB_RESOLUTION_MSK) 
 2076              		.loc 1 1293 0
 2077 003c 0122     		mov	r2, #1
 2078 003e 1340     		and	r3, r2
1292:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_SUB_RESOLUTION_MSK) 
 2079              		.loc 1 1292 0
 2080 0040 03D0     		beq	.L142
1294:Generated_Source\PSoC4/ADC.c **** 					== ADC_SUB_RESOLUTION_10B)
1295:Generated_Source\PSoC4/ADC.c **** 				{
1296:Generated_Source\PSoC4/ADC.c **** 					counts = (int32) ADC_SAR_WRK_MAX_10BIT;
 2081              		.loc 1 1296 0
 2082 0042 8023     		mov	r3, #128
 2083 0044 DB00     		lsl	r3, r3, #3
 2084 0046 7B60     		str	r3, [r7, #4]
 2085 0048 06E0     		b	.L144
 2086              	.L142:
1297:Generated_Source\PSoC4/ADC.c **** 				}
1298:Generated_Source\PSoC4/ADC.c **** 				else
1299:Generated_Source\PSoC4/ADC.c **** 				{
1300:Generated_Source\PSoC4/ADC.c **** 					counts = (int32) ADC_SAR_WRK_MAX_8BIT;
 2087              		.loc 1 1300 0
 2088 004a 8023     		mov	r3, #128
 2089 004c 5B00     		lsl	r3, r3, #1
 2090 004e 7B60     		str	r3, [r7, #4]
 2091 0050 02E0     		b	.L144
 2092              	.L141:
1301:Generated_Source\PSoC4/ADC.c **** 				}
1302:Generated_Source\PSoC4/ADC.c ****         	}
1303:Generated_Source\PSoC4/ADC.c ****         	else
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 61


1304:Generated_Source\PSoC4/ADC.c ****         	{
1305:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 2093              		.loc 1 1305 0
 2094 0052 8023     		mov	r3, #128
 2095 0054 5B01     		lsl	r3, r3, #5
 2096 0056 7B60     		str	r3, [r7, #4]
 2097              	.L144:
1306:Generated_Source\PSoC4/ADC.c ****         	}
1307:Generated_Source\PSoC4/ADC.c **** 			
1308:Generated_Source\PSoC4/ADC.c **** 			/* Single Ended Channel */
1309:Generated_Source\PSoC4/ADC.c **** 			if((ADC_channelsConfig[chNum] & ADC_SAR_CHAN_CONFIG_DIFFERENTIAL_EN_MSK) == 0u)
 2098              		.loc 1 1309 0
 2099 0058 534B     		ldr	r3, .L155+4
 2100 005a FA68     		ldr	r2, [r7, #12]
 2101 005c 9200     		lsl	r2, r2, #2
 2102 005e D258     		ldr	r2, [r2, r3]
 2103 0060 8023     		mov	r3, #128
 2104 0062 5B00     		lsl	r3, r3, #1
 2105 0064 1340     		and	r3, r2
 2106 0066 29D1     		bne	.L145
1310:Generated_Source\PSoC4/ADC.c ****         	{
1311:Generated_Source\PSoC4/ADC.c **** 				if(((ADC_allConfigs[configNum].sampleCtrl 
 2107              		.loc 1 1311 0
 2108 0068 504A     		ldr	r2, .L155+8
 2109 006a BB68     		ldr	r3, [r7, #8]
 2110 006c 3421     		mov	r1, #52
 2111 006e 4B43     		mul	r3, r1
 2112 0070 D318     		add	r3, r2, r3
 2113 0072 0833     		add	r3, r3, #8
 2114 0074 5B68     		ldr	r3, [r3, #4]
1312:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_MSK) 
 2115              		.loc 1 1312 0
 2116 0076 0422     		mov	r2, #4
 2117 0078 1340     		and	r3, r2
1311:Generated_Source\PSoC4/ADC.c **** 					& ADC_SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_MSK) 
 2118              		.loc 1 1311 0
 2119 007a 19D0     		beq	.L146
1313:Generated_Source\PSoC4/ADC.c **** 					== ADC_SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_MSK) && 
1314:Generated_Source\PSoC4/ADC.c **** 					((ADC_allConfigs[configNum].ctrl & ADC_SAR_CTRL_NEG_SEL_MSK) 
 2120              		.loc 1 1314 0
 2121 007c 4B4A     		ldr	r2, .L155+8
 2122 007e BB68     		ldr	r3, [r7, #8]
 2123 0080 3421     		mov	r1, #52
 2124 0082 4B43     		mul	r3, r1
 2125 0084 D318     		add	r3, r2, r3
 2126 0086 0833     		add	r3, r3, #8
 2127 0088 1A68     		ldr	r2, [r3]
 2128 008a E023     		mov	r3, #224
 2129 008c 1B01     		lsl	r3, r3, #4
 2130 008e 1A40     		and	r2, r3
1313:Generated_Source\PSoC4/ADC.c **** 					== ADC_SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_MSK) && 
 2131              		.loc 1 1313 0
 2132 0090 E023     		mov	r3, #224
 2133 0092 1B01     		lsl	r3, r3, #4
 2134 0094 9A42     		cmp	r2, r3
 2135 0096 0BD1     		bne	.L146
1315:Generated_Source\PSoC4/ADC.c **** 					== ADC_NEG_VREF_SHIFTED))
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 62


1316:Generated_Source\PSoC4/ADC.c **** 				{
1317:Generated_Source\PSoC4/ADC.c **** 					/* Set offset to the minus half scale to convert results to unsigned format */
1318:Generated_Source\PSoC4/ADC.c ****                 	ADC_offset[chNum] = (int16)(counts / -2);		
 2136              		.loc 1 1318 0
 2137 0098 7B68     		ldr	r3, [r7, #4]
 2138 009a 002B     		cmp	r3, #0
 2139 009c 00DA     		bge	.L147
 2140 009e 0133     		add	r3, r3, #1
 2141              	.L147:
 2142 00a0 5B10     		asr	r3, r3, #1
 2143 00a2 5B42     		neg	r3, r3
 2144 00a4 99B2     		uxth	r1, r3
 2145 00a6 424B     		ldr	r3, .L155+12
 2146 00a8 FA68     		ldr	r2, [r7, #12]
 2147 00aa 5200     		lsl	r2, r2, #1
 2148 00ac D152     		strh	r1, [r2, r3]
 2149 00ae 0AE0     		b	.L149
 2150              	.L146:
1319:Generated_Source\PSoC4/ADC.c ****             	}
1320:Generated_Source\PSoC4/ADC.c **** 				else
1321:Generated_Source\PSoC4/ADC.c **** 				{
1322:Generated_Source\PSoC4/ADC.c ****                 	ADC_offset[chNum] = 0;	
 2151              		.loc 1 1322 0
 2152 00b0 3F4B     		ldr	r3, .L155+12
 2153 00b2 FA68     		ldr	r2, [r7, #12]
 2154 00b4 5200     		lsl	r2, r2, #1
 2155 00b6 0021     		mov	r1, #0
 2156 00b8 D152     		strh	r1, [r2, r3]
 2157 00ba 04E0     		b	.L149
 2158              	.L145:
1323:Generated_Source\PSoC4/ADC.c **** 				}
1324:Generated_Source\PSoC4/ADC.c **** 			}
1325:Generated_Source\PSoC4/ADC.c **** 			else    /* Differential channel */
1326:Generated_Source\PSoC4/ADC.c ****         	{
1327:Generated_Source\PSoC4/ADC.c ****                	ADC_offset[chNum] = 0; 
 2159              		.loc 1 1327 0
 2160 00bc 3C4B     		ldr	r3, .L155+12
 2161 00be FA68     		ldr	r2, [r7, #12]
 2162 00c0 5200     		lsl	r2, r2, #1
 2163 00c2 0021     		mov	r1, #0
 2164 00c4 D152     		strh	r1, [r2, r3]
 2165              	.L149:
1328:Generated_Source\PSoC4/ADC.c **** 			}
1329:Generated_Source\PSoC4/ADC.c ****             
1330:Generated_Source\PSoC4/ADC.c **** 			/* Calculate gain in counts per 10 volts with rounding */
1331:Generated_Source\PSoC4/ADC.c ****         	ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) \
 2166              		.loc 1 1331 0
 2167 00c6 7B68     		ldr	r3, [r7, #4]
 2168 00c8 3A4A     		ldr	r2, .L155+16
 2169 00ca 5A43     		mul	r2, r3
1332:Generated_Source\PSoC4/ADC.c ****                             + ADC_allConfigs[configNum].vrefMvValue) \
 2170              		.loc 1 1332 0
 2171 00cc 3749     		ldr	r1, .L155+8
 2172 00ce BB68     		ldr	r3, [r7, #8]
 2173 00d0 3420     		mov	r0, #52
 2174 00d2 4343     		mul	r3, r0
 2175 00d4 CB18     		add	r3, r1, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 63


 2176 00d6 2833     		add	r3, r3, #40
 2177 00d8 5B68     		ldr	r3, [r3, #4]
 2178 00da D018     		add	r0, r2, r3
1333:Generated_Source\PSoC4/ADC.c **** 							/ (ADC_allConfigs[configNum].vrefMvValue * 2));
 2179              		.loc 1 1333 0
 2180 00dc 334A     		ldr	r2, .L155+8
 2181 00de BB68     		ldr	r3, [r7, #8]
 2182 00e0 3421     		mov	r1, #52
 2183 00e2 4B43     		mul	r3, r1
 2184 00e4 D318     		add	r3, r2, r3
 2185 00e6 2833     		add	r3, r3, #40
 2186 00e8 5B68     		ldr	r3, [r3, #4]
 2187 00ea 5B00     		lsl	r3, r3, #1
 2188 00ec 191C     		mov	r1, r3
 2189 00ee FFF7FEFF 		bl	__aeabi_idiv
 2190 00f2 031C     		mov	r3, r0
1331:Generated_Source\PSoC4/ADC.c ****                             + ADC_allConfigs[configNum].vrefMvValue) \
 2191              		.loc 1 1331 0
 2192 00f4 9BB2     		uxth	r3, r3
 2193 00f6 19B2     		sxth	r1, r3
 2194 00f8 2F4B     		ldr	r3, .L155+20
 2195 00fa FA68     		ldr	r2, [r7, #12]
 2196 00fc 9200     		lsl	r2, r2, #2
 2197 00fe D150     		str	r1, [r2, r3]
1334:Generated_Source\PSoC4/ADC.c ****             
1335:Generated_Source\PSoC4/ADC.c ****             /* Increment configuration number after rolling over to the next configuration*/
1336:Generated_Source\PSoC4/ADC.c **** 			if((ADC_allConfigs[configNum].channelBase
 2198              		.loc 1 1336 0
 2199 0100 2A4B     		ldr	r3, .L155+8
 2200 0102 BA68     		ldr	r2, [r7, #8]
 2201 0104 3421     		mov	r1, #52
 2202 0106 4A43     		mul	r2, r1
 2203 0108 D258     		ldr	r2, [r2, r3]
1337:Generated_Source\PSoC4/ADC.c **** 				+ ADC_allConfigs[configNum].numChannels) == chNum)
 2204              		.loc 1 1337 0
 2205 010a 2849     		ldr	r1, .L155+8
 2206 010c BB68     		ldr	r3, [r7, #8]
 2207 010e 3420     		mov	r0, #52
 2208 0110 4343     		mul	r3, r0
 2209 0112 CB18     		add	r3, r1, r3
 2210 0114 5B68     		ldr	r3, [r3, #4]
 2211 0116 D218     		add	r2, r2, r3
1336:Generated_Source\PSoC4/ADC.c **** 				+ ADC_allConfigs[configNum].numChannels) == chNum)
 2212              		.loc 1 1336 0
 2213 0118 FB68     		ldr	r3, [r7, #12]
 2214 011a 9A42     		cmp	r2, r3
 2215 011c 02D1     		bne	.L150
1338:Generated_Source\PSoC4/ADC.c **** 			{
1339:Generated_Source\PSoC4/ADC.c **** 				configNum++;
 2216              		.loc 1 1339 0
 2217 011e BB68     		ldr	r3, [r7, #8]
 2218 0120 0133     		add	r3, r3, #1
 2219 0122 BB60     		str	r3, [r7, #8]
 2220              	.L150:
1288:Generated_Source\PSoC4/ADC.c **** 		{      
 2221              		.loc 1 1288 0 discriminator 2
 2222 0124 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 64


 2223 0126 0133     		add	r3, r3, #1
 2224 0128 FB60     		str	r3, [r7, #12]
 2225              	.L140:
1288:Generated_Source\PSoC4/ADC.c **** 		{      
 2226              		.loc 1 1288 0 is_stmt 0 discriminator 1
 2227 012a FB68     		ldr	r3, [r7, #12]
 2228 012c 062B     		cmp	r3, #6
 2229 012e 00D8     		bhi	.LCB1948
 2230 0130 75E7     		b	.L151	@long jump
 2231              	.LCB1948:
1340:Generated_Source\PSoC4/ADC.c **** 			}
1341:Generated_Source\PSoC4/ADC.c **** 		} /* for(chNum = 0ul; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++) */
1342:Generated_Source\PSoC4/ADC.c ****         
1343:Generated_Source\PSoC4/ADC.c ****         #if(ADC_IRQ_REMOVE == 0u)
1344:Generated_Source\PSoC4/ADC.c ****             /* Start and set interrupt vector */
1345:Generated_Source\PSoC4/ADC.c ****             CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
 2232              		.loc 1 1345 0 is_stmt 1
 2233 0132 0F20     		mov	r0, #15
 2234 0134 0321     		mov	r1, #3
 2235 0136 FFF7FEFF 		bl	CyIntSetPriority
1346:Generated_Source\PSoC4/ADC.c ****             (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
 2236              		.loc 1 1346 0
 2237 013a 204B     		ldr	r3, .L155+24
 2238 013c 0F20     		mov	r0, #15
 2239 013e 191C     		mov	r1, r3
 2240 0140 FFF7FEFF 		bl	CyIntSetVector
1347:Generated_Source\PSoC4/ADC.c ****         #endif   /* End ADC_IRQ_REMOVE */
1348:Generated_Source\PSoC4/ADC.c ****         
1349:Generated_Source\PSoC4/ADC.c ****         /* Initialize the channel enable masks for each configuration */
1350:Generated_Source\PSoC4/ADC.c ****         for(configNum=0u; configNum < ADC_TOTAL_CONFIGS; configNum++)
 2241              		.loc 1 1350 0
 2242 0144 0023     		mov	r3, #0
 2243 0146 BB60     		str	r3, [r7, #8]
 2244 0148 0DE0     		b	.L152
 2245              	.L153:
1351:Generated_Source\PSoC4/ADC.c **** 		{
1352:Generated_Source\PSoC4/ADC.c **** 			ADC_channelEnMasks[configNum] = ADC_allConfigs[configNum].chanEn;
 2246              		.loc 1 1352 0 discriminator 3
 2247 014a 184A     		ldr	r2, .L155+8
 2248 014c BB68     		ldr	r3, [r7, #8]
 2249 014e 3421     		mov	r1, #52
 2250 0150 4B43     		mul	r3, r1
 2251 0152 D318     		add	r3, r2, r3
 2252 0154 2033     		add	r3, r3, #32
 2253 0156 1968     		ldr	r1, [r3]
 2254 0158 194B     		ldr	r3, .L155+28
 2255 015a BA68     		ldr	r2, [r7, #8]
 2256 015c 9200     		lsl	r2, r2, #2
 2257 015e D150     		str	r1, [r2, r3]
1350:Generated_Source\PSoC4/ADC.c **** 		{
 2258              		.loc 1 1350 0 discriminator 3
 2259 0160 BB68     		ldr	r3, [r7, #8]
 2260 0162 0133     		add	r3, r3, #1
 2261 0164 BB60     		str	r3, [r7, #8]
 2262              	.L152:
1350:Generated_Source\PSoC4/ADC.c **** 		{
 2263              		.loc 1 1350 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 65


 2264 0166 BB68     		ldr	r3, [r7, #8]
 2265 0168 002B     		cmp	r3, #0
 2266 016a EED0     		beq	.L153
1353:Generated_Source\PSoC4/ADC.c **** 		}
1354:Generated_Source\PSoC4/ADC.c ****         
1355:Generated_Source\PSoC4/ADC.c ****         #if(0u != ADC_ANY_CONFIG_USES_FILTER)		
1356:Generated_Source\PSoC4/ADC.c **** 		    /* Configure the common filter settings if any configuration filters */
1357:Generated_Source\PSoC4/ADC.c **** 		    ADC_UABH_A_Init(&ADC_UABH_A_FILTER_config);
1358:Generated_Source\PSoC4/ADC.c **** 		    ADC_UABH_B_Init(&ADC_UABH_B_FILTER_config);
1359:Generated_Source\PSoC4/ADC.c ****             ADC_FILTERAGND2SAR_BUFFER_Init();
1360:Generated_Source\PSoC4/ADC.c ****             /* Set several of the UAB switches or buffers based on what source is used as Vagnd/Vre
1361:Generated_Source\PSoC4/ADC.c ****             #if ADC_UABH_A_halfuab__VAGND_SRC != ADC_UABH_A_halfuab__SRC_AGNDBUF
1362:Generated_Source\PSoC4/ADC.c ****                 ADC_UABH_A_SetStaticSwitch(ADC_SW_EXTAGND, CyUAB_SW_CLOSED);
1363:Generated_Source\PSoC4/ADC.c ****             #else
1364:Generated_Source\PSoC4/ADC.c ****                 ADC_UABH_A_SetAgndPower(CyUAB_PWR_HIGH);
1365:Generated_Source\PSoC4/ADC.c ****             #endif
1366:Generated_Source\PSoC4/ADC.c ****             
1367:Generated_Source\PSoC4/ADC.c ****             /* Control UAB filter output switch with PHI3 "11" (always closed). */
1368:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_B_SRAM0_REG |= 0x4u;
1369:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_B_SRAM1_REG |= 0x4u;
1370:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_B_SetSwitch(CyUAB_SW_PO, CyUAB_CLK_PHI3);
1371:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_ANY_CONFIG_USES_FILTER != 0u */
1372:Generated_Source\PSoC4/ADC.c ****         
1373:Generated_Source\PSoC4/ADC.c ****         /* Initialize configuration zero if SelectConfig has not been called */
1374:Generated_Source\PSoC4/ADC.c ****         if(0u == ADC_selected)
 2267              		.loc 1 1374 0 is_stmt 1
 2268 016c 154B     		ldr	r3, .L155+32
 2269 016e 1B78     		ldrb	r3, [r3]
 2270 0170 002B     		cmp	r3, #0
 2271 0172 12D1     		bne	.L139
1375:Generated_Source\PSoC4/ADC.c **** 	    {
1376:Generated_Source\PSoC4/ADC.c ****             ADC_selected = 1u;
 2272              		.loc 1 1376 0
 2273 0174 134B     		ldr	r3, .L155+32
 2274 0176 0122     		mov	r2, #1
 2275 0178 1A70     		strb	r2, [r3]
1377:Generated_Source\PSoC4/ADC.c ****             configNum = 0u;
 2276              		.loc 1 1377 0
 2277 017a 0023     		mov	r3, #0
 2278 017c BB60     		str	r3, [r7, #8]
1378:Generated_Source\PSoC4/ADC.c ****             /* Change Vref selection if is was routed by Creator */
1379:Generated_Source\PSoC4/ADC.c ****             #if (ADC_VREF_ROUTED)
1380:Generated_Source\PSoC4/ADC.c ****             ADC_vrefAMux_Select((uint8)configNum);
1381:Generated_Source\PSoC4/ADC.c ****             #endif
1382:Generated_Source\PSoC4/ADC.c ****             ADC_InitConfig(&ADC_allConfigs[configNum]);
 2279              		.loc 1 1382 0
 2280 017e BB68     		ldr	r3, [r7, #8]
 2281 0180 3422     		mov	r2, #52
 2282 0182 5A43     		mul	r2, r3
 2283 0184 094B     		ldr	r3, .L155+8
 2284 0186 D318     		add	r3, r2, r3
 2285 0188 181C     		mov	r0, r3
 2286 018a FFF7FEFF 		bl	ADC_InitConfig
1383:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_CHAN_EN_REG = ADC_channelEnMasks[configNum];
 2287              		.loc 1 1383 0
 2288 018e 0E4B     		ldr	r3, .L155+36
 2289 0190 0B4A     		ldr	r2, .L155+28
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 66


 2290 0192 B968     		ldr	r1, [r7, #8]
 2291 0194 8900     		lsl	r1, r1, #2
 2292 0196 8A58     		ldr	r2, [r1, r2]
 2293 0198 1A60     		str	r2, [r3]
 2294              	.L139:
1384:Generated_Source\PSoC4/ADC.c ****             #if(0u != ADC_ANY_CONFIG_USES_FILTER)	
1385:Generated_Source\PSoC4/ADC.c ****                 ADC_filterVinMux_Select((uint8)configNum);
1386:Generated_Source\PSoC4/ADC.c ****             #endif
1387:Generated_Source\PSoC4/ADC.c ****         }           
1388:Generated_Source\PSoC4/ADC.c **** 	}
1389:Generated_Source\PSoC4/ADC.c ****     return;
 2295              		.loc 1 1389 0
 2296 019a C046     		mov	r8, r8
1390:Generated_Source\PSoC4/ADC.c **** }
 2297              		.loc 1 1390 0
 2298 019c BD46     		mov	sp, r7
 2299 019e 04B0     		add	sp, sp, #16
 2300              		@ sp needed
 2301 01a0 80BD     		pop	{r7, pc}
 2302              	.L156:
 2303 01a2 C046     		.align	2
 2304              	.L155:
 2305 01a4 00000000 		.word	ADC_initVar
 2306 01a8 00000000 		.word	ADC_channelsConfig
 2307 01ac 00000000 		.word	ADC_allConfigs
 2308 01b0 00000000 		.word	ADC_offset
 2309 01b4 10270000 		.word	10000
 2310 01b8 00000000 		.word	ADC_countsPer10Volt
 2311 01bc 00000000 		.word	ADC_ISR
 2312 01c0 08000000 		.word	ADC_channelEnMasks
 2313 01c4 00000000 		.word	ADC_selected
 2314 01c8 20003A40 		.word	1077542944
 2315              		.cfi_endproc
 2316              	.LFE24:
 2317              		.size	ADC_Init, .-ADC_Init
 2318              		.section	.text.ADC_Enable,"ax",%progbits
 2319              		.align	2
 2320              		.global	ADC_Enable
 2321              		.code	16
 2322              		.thumb_func
 2323              		.type	ADC_Enable, %function
 2324              	ADC_Enable:
 2325              	.LFB25:
1391:Generated_Source\PSoC4/ADC.c **** 
1392:Generated_Source\PSoC4/ADC.c **** /* ****************************************************************************
1393:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Enable
1394:Generated_Source\PSoC4/ADC.c **** ****************************************************************************//*
1395:Generated_Source\PSoC4/ADC.c **** *
1396:Generated_Source\PSoC4/ADC.c **** * \brief Enables the component. 
1397:Generated_Source\PSoC4/ADC.c **** *
1398:Generated_Source\PSoC4/ADC.c **** * \param None
1399:Generated_Source\PSoC4/ADC.c **** * 
1400:Generated_Source\PSoC4/ADC.c **** * \return None
1401:Generated_Source\PSoC4/ADC.c **** * 
1402:Generated_Source\PSoC4/ADC.c **** * \sideeffect
1403:Generated_Source\PSoC4/ADC.c **** *  None
1404:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 67


1405:Generated_Source\PSoC4/ADC.c **** * <b>Code Snippet</b>
1406:Generated_Source\PSoC4/ADC.c **** *  \snippet main.c snippet_ADC_Enable
1407:Generated_Source\PSoC4/ADC.c **** *
1408:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
1409:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void) 
1410:Generated_Source\PSoC4/ADC.c **** {
 2326              		.loc 1 1410 0
 2327              		.cfi_startproc
 2328 0000 80B5     		push	{r7, lr}
 2329              		.cfi_def_cfa_offset 8
 2330              		.cfi_offset 7, -8
 2331              		.cfi_offset 14, -4
 2332 0002 00AF     		add	r7, sp, #0
 2333              		.cfi_def_cfa_register 7
1411:Generated_Source\PSoC4/ADC.c **** 
1412:Generated_Source\PSoC4/ADC.c ****     #if(0u != ADC_ANY_CONFIG_USES_FILTER)	
1413:Generated_Source\PSoC4/ADC.c ****     	if((ADC_allConfigs[ADC_currentConfig].miscConfig
1414:Generated_Source\PSoC4/ADC.c ****     		& ADC_MISC_CONFIG_FILTER_PRESENT_MSK)
1415:Generated_Source\PSoC4/ADC.c ****     		== ADC_MISC_CONFIG_FILTER_PRESENT_MSK)
1416:Generated_Source\PSoC4/ADC.c ****     	{
1417:Generated_Source\PSoC4/ADC.c ****             ADC_FILTERAGND2SAR_BUFFER_Enable();
1418:Generated_Source\PSoC4/ADC.c ****     		ADC_UABH_A_Enable();
1419:Generated_Source\PSoC4/ADC.c ****     		ADC_UABH_B_Enable();
1420:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_A_SetModbitSource(31u, 31u);
1421:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_B_SetModbitSource(31u, 31u);
1422:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_A_SetStartupDelay(ADC_allConfigs[ADC_currentConfig].filterStartDelay);
1423:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_B_SetStartupDelay(ADC_allConfigs[ADC_currentConfig].filterStartDelay);
1424:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_B_Run(1u);
1425:Generated_Source\PSoC4/ADC.c ****             ADC_UABH_A_Run(1u);
1426:Generated_Source\PSoC4/ADC.c ****     	}
1427:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_ANY_CONFIG_USES_FILTER != 0u */
1428:Generated_Source\PSoC4/ADC.c ****         
1429:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_SAR_CTRL_ENABLED_MSK))
 2334              		.loc 1 1429 0
 2335 0004 0A4B     		ldr	r3, .L161
 2336 0006 1B68     		ldr	r3, [r3]
 2337 0008 002B     		cmp	r3, #0
 2338 000a 0EDB     		blt	.L158
1430:Generated_Source\PSoC4/ADC.c ****     {
1431:Generated_Source\PSoC4/ADC.c ****         while (0u != (ADC_SAR_STATUS_REG & ADC_BUSY_MSK))
 2339              		.loc 1 1431 0
 2340 000c C046     		mov	r8, r8
 2341              	.L159:
 2342              		.loc 1 1431 0 is_stmt 0 discriminator 1
 2343 000e 094B     		ldr	r3, .L161+4
 2344 0010 1B68     		ldr	r3, [r3]
 2345 0012 002B     		cmp	r3, #0
 2346 0014 FBDB     		blt	.L159
1432:Generated_Source\PSoC4/ADC.c ****         {
1433:Generated_Source\PSoC4/ADC.c ****             /* wait for SAR to go idle to avoid deadlock */
1434:Generated_Source\PSoC4/ADC.c ****         }
1435:Generated_Source\PSoC4/ADC.c ****         
1436:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_SAR_CTRL_ENABLED_MSK;
 2347              		.loc 1 1436 0 is_stmt 1
 2348 0016 064B     		ldr	r3, .L161
 2349 0018 054A     		ldr	r2, .L161
 2350 001a 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 68


 2351 001c 8021     		mov	r1, #128
 2352 001e 0906     		lsl	r1, r1, #24
 2353 0020 0A43     		orr	r2, r1
 2354 0022 1A60     		str	r2, [r3]
1437:Generated_Source\PSoC4/ADC.c ****         
1438:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
1439:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);
 2355              		.loc 1 1439 0
 2356 0024 0A20     		mov	r0, #10
 2357 0026 FFF7FEFF 		bl	CyDelayUs
 2358              	.L158:
1440:Generated_Source\PSoC4/ADC.c ****     }
1441:Generated_Source\PSoC4/ADC.c ****     return;
 2359              		.loc 1 1441 0
 2360 002a C046     		mov	r8, r8
1442:Generated_Source\PSoC4/ADC.c **** }
 2361              		.loc 1 1442 0
 2362 002c BD46     		mov	sp, r7
 2363              		@ sp needed
 2364 002e 80BD     		pop	{r7, pc}
 2365              	.L162:
 2366              		.align	2
 2367              	.L161:
 2368 0030 00003A40 		.word	1077542912
 2369 0034 A0023A40 		.word	1077543584
 2370              		.cfi_endproc
 2371              	.LFE25:
 2372              		.size	ADC_Enable, .-ADC_Enable
 2373              		.text
 2374              	.Letext0:
 2375              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2376              		.file 3 "Generated_Source\\PSoC4\\ADC.h"
 2377              		.section	.debug_info,"",%progbits
 2378              	.Ldebug_info0:
 2379 0000 DC070000 		.4byte	0x7dc
 2380 0004 0400     		.2byte	0x4
 2381 0006 00000000 		.4byte	.Ldebug_abbrev0
 2382 000a 04       		.byte	0x4
 2383 000b 01       		.uleb128 0x1
 2384 000c 05020000 		.4byte	.LASF98
 2385 0010 01       		.byte	0x1
 2386 0011 DF030000 		.4byte	.LASF99
 2387 0015 91010000 		.4byte	.LASF100
 2388 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2389 001d 00000000 		.4byte	0
 2390 0021 00000000 		.4byte	.Ldebug_line0
 2391 0025 02       		.uleb128 0x2
 2392 0026 01       		.byte	0x1
 2393 0027 06       		.byte	0x6
 2394 0028 9D000000 		.4byte	.LASF0
 2395 002c 02       		.uleb128 0x2
 2396 002d 01       		.byte	0x1
 2397 002e 08       		.byte	0x8
 2398 002f 43040000 		.4byte	.LASF1
 2399 0033 02       		.uleb128 0x2
 2400 0034 02       		.byte	0x2
 2401 0035 05       		.byte	0x5
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 69


 2402 0036 6F040000 		.4byte	.LASF2
 2403 003a 02       		.uleb128 0x2
 2404 003b 02       		.byte	0x2
 2405 003c 07       		.byte	0x7
 2406 003d B6020000 		.4byte	.LASF3
 2407 0041 02       		.uleb128 0x2
 2408 0042 04       		.byte	0x4
 2409 0043 05       		.byte	0x5
 2410 0044 CA000000 		.4byte	.LASF4
 2411 0048 02       		.uleb128 0x2
 2412 0049 04       		.byte	0x4
 2413 004a 07       		.byte	0x7
 2414 004b B2040000 		.4byte	.LASF5
 2415 004f 02       		.uleb128 0x2
 2416 0050 08       		.byte	0x8
 2417 0051 05       		.byte	0x5
 2418 0052 8F000000 		.4byte	.LASF6
 2419 0056 02       		.uleb128 0x2
 2420 0057 08       		.byte	0x8
 2421 0058 07       		.byte	0x7
 2422 0059 53000000 		.4byte	.LASF7
 2423 005d 03       		.uleb128 0x3
 2424 005e 04       		.byte	0x4
 2425 005f 05       		.byte	0x5
 2426 0060 696E7400 		.ascii	"int\000"
 2427 0064 02       		.uleb128 0x2
 2428 0065 04       		.byte	0x4
 2429 0066 07       		.byte	0x7
 2430 0067 6D010000 		.4byte	.LASF8
 2431 006b 04       		.uleb128 0x4
 2432 006c FB000000 		.4byte	.LASF9
 2433 0070 02       		.byte	0x2
 2434 0071 9801     		.2byte	0x198
 2435 0073 2C000000 		.4byte	0x2c
 2436 0077 04       		.uleb128 0x4
 2437 0078 00000000 		.4byte	.LASF10
 2438 007c 02       		.byte	0x2
 2439 007d 9901     		.2byte	0x199
 2440 007f 3A000000 		.4byte	0x3a
 2441 0083 04       		.uleb128 0x4
 2442 0084 37010000 		.4byte	.LASF11
 2443 0088 02       		.byte	0x2
 2444 0089 9A01     		.2byte	0x19a
 2445 008b 48000000 		.4byte	0x48
 2446 008f 04       		.uleb128 0x4
 2447 0090 67050000 		.4byte	.LASF12
 2448 0094 02       		.byte	0x2
 2449 0095 9C01     		.2byte	0x19c
 2450 0097 33000000 		.4byte	0x33
 2451 009b 04       		.uleb128 0x4
 2452 009c A9000000 		.4byte	.LASF13
 2453 00a0 02       		.byte	0x2
 2454 00a1 9D01     		.2byte	0x19d
 2455 00a3 41000000 		.4byte	0x41
 2456 00a7 04       		.uleb128 0x4
 2457 00a8 47030000 		.4byte	.LASF14
 2458 00ac 02       		.byte	0x2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 70


 2459 00ad 9E01     		.2byte	0x19e
 2460 00af B3000000 		.4byte	0xb3
 2461 00b3 02       		.uleb128 0x2
 2462 00b4 04       		.byte	0x4
 2463 00b5 04       		.byte	0x4
 2464 00b6 08040000 		.4byte	.LASF15
 2465 00ba 02       		.uleb128 0x2
 2466 00bb 08       		.byte	0x8
 2467 00bc 04       		.byte	0x4
 2468 00bd 01010000 		.4byte	.LASF16
 2469 00c1 04       		.uleb128 0x4
 2470 00c2 C9030000 		.4byte	.LASF17
 2471 00c6 02       		.byte	0x2
 2472 00c7 A301     		.2byte	0x1a3
 2473 00c9 4F000000 		.4byte	0x4f
 2474 00cd 02       		.uleb128 0x2
 2475 00ce 01       		.byte	0x1
 2476 00cf 08       		.byte	0x8
 2477 00d0 C4040000 		.4byte	.LASF18
 2478 00d4 04       		.uleb128 0x4
 2479 00d5 1B030000 		.4byte	.LASF19
 2480 00d9 02       		.byte	0x2
 2481 00da 4402     		.2byte	0x244
 2482 00dc E0000000 		.4byte	0xe0
 2483 00e0 05       		.uleb128 0x5
 2484 00e1 83000000 		.4byte	0x83
 2485 00e5 04       		.uleb128 0x4
 2486 00e6 CE040000 		.4byte	.LASF20
 2487 00ea 02       		.byte	0x2
 2488 00eb 5402     		.2byte	0x254
 2489 00ed F1000000 		.4byte	0xf1
 2490 00f1 06       		.uleb128 0x6
 2491 00f2 04       		.byte	0x4
 2492 00f3 F7000000 		.4byte	0xf7
 2493 00f7 07       		.uleb128 0x7
 2494 00f8 02       		.uleb128 0x2
 2495 00f9 04       		.byte	0x4
 2496 00fa 07       		.byte	0x7
 2497 00fb 4F030000 		.4byte	.LASF21
 2498 00ff 08       		.uleb128 0x8
 2499 0100 34       		.byte	0x34
 2500 0101 03       		.byte	0x3
 2501 0102 5E       		.byte	0x5e
 2502 0103 A4010000 		.4byte	0x1a4
 2503 0107 09       		.uleb128 0x9
 2504 0108 89050000 		.4byte	.LASF22
 2505 010c 03       		.byte	0x3
 2506 010d 60       		.byte	0x60
 2507 010e 83000000 		.4byte	0x83
 2508 0112 00       		.byte	0
 2509 0113 09       		.uleb128 0x9
 2510 0114 FB020000 		.4byte	.LASF23
 2511 0118 03       		.byte	0x3
 2512 0119 61       		.byte	0x61
 2513 011a 83000000 		.4byte	0x83
 2514 011e 04       		.byte	0x4
 2515 011f 09       		.uleb128 0x9
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 71


 2516 0120 2D050000 		.4byte	.LASF24
 2517 0124 03       		.byte	0x3
 2518 0125 62       		.byte	0x62
 2519 0126 83000000 		.4byte	0x83
 2520 012a 08       		.byte	0x8
 2521 012b 09       		.uleb128 0x9
 2522 012c 5C050000 		.4byte	.LASF25
 2523 0130 03       		.byte	0x3
 2524 0131 65       		.byte	0x65
 2525 0132 83000000 		.4byte	0x83
 2526 0136 0C       		.byte	0xc
 2527 0137 09       		.uleb128 0x9
 2528 0138 2A010000 		.4byte	.LASF26
 2529 013c 03       		.byte	0x3
 2530 013d 66       		.byte	0x66
 2531 013e 83000000 		.4byte	0x83
 2532 0142 10       		.byte	0x10
 2533 0143 09       		.uleb128 0x9
 2534 0144 8E030000 		.4byte	.LASF27
 2535 0148 03       		.byte	0x3
 2536 0149 67       		.byte	0x67
 2537 014a 83000000 		.4byte	0x83
 2538 014e 14       		.byte	0x14
 2539 014f 09       		.uleb128 0x9
 2540 0150 C9020000 		.4byte	.LASF28
 2541 0154 03       		.byte	0x3
 2542 0155 68       		.byte	0x68
 2543 0156 83000000 		.4byte	0x83
 2544 015a 18       		.byte	0x18
 2545 015b 09       		.uleb128 0x9
 2546 015c 47050000 		.4byte	.LASF29
 2547 0160 03       		.byte	0x3
 2548 0161 69       		.byte	0x69
 2549 0162 83000000 		.4byte	0x83
 2550 0166 1C       		.byte	0x1c
 2551 0167 09       		.uleb128 0x9
 2552 0168 2C040000 		.4byte	.LASF30
 2553 016c 03       		.byte	0x3
 2554 016d 6A       		.byte	0x6a
 2555 016e 83000000 		.4byte	0x83
 2556 0172 20       		.byte	0x20
 2557 0173 09       		.uleb128 0x9
 2558 0174 7A010000 		.4byte	.LASF31
 2559 0178 03       		.byte	0x3
 2560 0179 6B       		.byte	0x6b
 2561 017a 83000000 		.4byte	0x83
 2562 017e 24       		.byte	0x24
 2563 017f 09       		.uleb128 0x9
 2564 0180 9B030000 		.4byte	.LASF32
 2565 0184 03       		.byte	0x3
 2566 0185 6C       		.byte	0x6c
 2567 0186 83000000 		.4byte	0x83
 2568 018a 28       		.byte	0x28
 2569 018b 09       		.uleb128 0x9
 2570 018c A1040000 		.4byte	.LASF33
 2571 0190 03       		.byte	0x3
 2572 0191 6D       		.byte	0x6d
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 72


 2573 0192 9B000000 		.4byte	0x9b
 2574 0196 2C       		.byte	0x2c
 2575 0197 09       		.uleb128 0x9
 2576 0198 32050000 		.4byte	.LASF34
 2577 019c 03       		.byte	0x3
 2578 019d 6F       		.byte	0x6f
 2579 019e 83000000 		.4byte	0x83
 2580 01a2 30       		.byte	0x30
 2581 01a3 00       		.byte	0
 2582 01a4 0A       		.uleb128 0xa
 2583 01a5 18010000 		.4byte	.LASF35
 2584 01a9 03       		.byte	0x3
 2585 01aa 8B       		.byte	0x8b
 2586 01ab FF000000 		.4byte	0xff
 2587 01af 0B       		.uleb128 0xb
 2588 01b0 C0000000 		.4byte	.LASF36
 2589 01b4 01       		.byte	0x1
 2590 01b5 C5       		.byte	0xc5
 2591 01b6 00000000 		.4byte	.LFB1
 2592 01ba 34000000 		.4byte	.LFE1-.LFB1
 2593 01be 01       		.uleb128 0x1
 2594 01bf 9C       		.byte	0x9c
 2595 01c0 0C       		.uleb128 0xc
 2596 01c1 04050000 		.4byte	.LASF38
 2597 01c5 01       		.byte	0x1
 2598 01c6 E5       		.byte	0xe5
 2599 01c7 00000000 		.4byte	.LFB2
 2600 01cb 1C000000 		.4byte	.LFE2-.LFB2
 2601 01cf 01       		.uleb128 0x1
 2602 01d0 9C       		.byte	0x9c
 2603 01d1 E4010000 		.4byte	0x1e4
 2604 01d5 0D       		.uleb128 0xd
 2605 01d6 72030000 		.4byte	.LASF40
 2606 01da 01       		.byte	0x1
 2607 01db E5       		.byte	0xe5
 2608 01dc E5000000 		.4byte	0xe5
 2609 01e0 02       		.uleb128 0x2
 2610 01e1 91       		.byte	0x91
 2611 01e2 74       		.sleb128 -12
 2612 01e3 00       		.byte	0
 2613 01e4 0E       		.uleb128 0xe
 2614 01e5 79040000 		.4byte	.LASF37
 2615 01e9 01       		.byte	0x1
 2616 01ea 0601     		.2byte	0x106
 2617 01ec 00000000 		.4byte	.LFB3
 2618 01f0 1C000000 		.4byte	.LFE3-.LFB3
 2619 01f4 01       		.uleb128 0x1
 2620 01f5 9C       		.byte	0x9c
 2621 01f6 0F       		.uleb128 0xf
 2622 01f7 BA030000 		.4byte	.LASF39
 2623 01fb 01       		.byte	0x1
 2624 01fc 2601     		.2byte	0x126
 2625 01fe 00000000 		.4byte	.LFB4
 2626 0202 70010000 		.4byte	.LFE4-.LFB4
 2627 0206 01       		.uleb128 0x1
 2628 0207 9C       		.byte	0x9c
 2629 0208 3A020000 		.4byte	0x23a
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 73


 2630 020c 10       		.uleb128 0x10
 2631 020d EA040000 		.4byte	.LASF41
 2632 0211 01       		.byte	0x1
 2633 0212 2601     		.2byte	0x126
 2634 0214 3A020000 		.4byte	0x23a
 2635 0218 02       		.uleb128 0x2
 2636 0219 91       		.byte	0x91
 2637 021a 6C       		.sleb128 -20
 2638 021b 11       		.uleb128 0x11
 2639 021c 9B040000 		.4byte	.LASF42
 2640 0220 01       		.byte	0x1
 2641 0221 2801     		.2byte	0x128
 2642 0223 83000000 		.4byte	0x83
 2643 0227 02       		.uleb128 0x2
 2644 0228 91       		.byte	0x91
 2645 0229 74       		.sleb128 -12
 2646 022a 11       		.uleb128 0x11
 2647 022b 97020000 		.4byte	.LASF43
 2648 022f 01       		.byte	0x1
 2649 0230 2901     		.2byte	0x129
 2650 0232 83000000 		.4byte	0x83
 2651 0236 02       		.uleb128 0x2
 2652 0237 91       		.byte	0x91
 2653 0238 70       		.sleb128 -16
 2654 0239 00       		.byte	0
 2655 023a 06       		.uleb128 0x6
 2656 023b 04       		.byte	0x4
 2657 023c 40020000 		.4byte	0x240
 2658 0240 12       		.uleb128 0x12
 2659 0241 A4010000 		.4byte	0x1a4
 2660 0245 13       		.uleb128 0x13
 2661 0246 AF000000 		.4byte	.LASF44
 2662 024a 01       		.byte	0x1
 2663 024b 8E01     		.2byte	0x18e
 2664 024d 00000000 		.4byte	.LFB5
 2665 0251 78000000 		.4byte	.LFE5-.LFB5
 2666 0255 01       		.uleb128 0x1
 2667 0256 9C       		.byte	0x9c
 2668 0257 7A020000 		.4byte	0x27a
 2669 025b 10       		.uleb128 0x10
 2670 025c EA040000 		.4byte	.LASF41
 2671 0260 01       		.byte	0x1
 2672 0261 8E01     		.2byte	0x18e
 2673 0263 83000000 		.4byte	0x83
 2674 0267 02       		.uleb128 0x2
 2675 0268 91       		.byte	0x91
 2676 0269 74       		.sleb128 -12
 2677 026a 10       		.uleb128 0x10
 2678 026b 1E050000 		.4byte	.LASF45
 2679 026f 01       		.byte	0x1
 2680 0270 8E01     		.2byte	0x18e
 2681 0272 83000000 		.4byte	0x83
 2682 0276 02       		.uleb128 0x2
 2683 0277 91       		.byte	0x91
 2684 0278 70       		.sleb128 -16
 2685 0279 00       		.byte	0
 2686 027a 0E       		.uleb128 0xe
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 74


 2687 027b 7E000000 		.4byte	.LASF46
 2688 027f 01       		.byte	0x1
 2689 0280 C701     		.2byte	0x1c7
 2690 0282 00000000 		.4byte	.LFB6
 2691 0286 34000000 		.4byte	.LFE6-.LFB6
 2692 028a 01       		.uleb128 0x1
 2693 028b 9C       		.byte	0x9c
 2694 028c 14       		.uleb128 0x14
 2695 028d D4020000 		.4byte	.LASF47
 2696 0291 01       		.byte	0x1
 2697 0292 F101     		.2byte	0x1f1
 2698 0294 00000000 		.4byte	.LFB7
 2699 0298 50000000 		.4byte	.LFE7-.LFB7
 2700 029c 01       		.uleb128 0x1
 2701 029d 9C       		.byte	0x9c
 2702 029e 0F       		.uleb128 0xf
 2703 029f 34030000 		.4byte	.LASF48
 2704 02a3 01       		.byte	0x1
 2705 02a4 1B02     		.2byte	0x21b
 2706 02a6 00000000 		.4byte	.LFB8
 2707 02aa 38000000 		.4byte	.LFE8-.LFB8
 2708 02ae 01       		.uleb128 0x1
 2709 02af 9C       		.byte	0x9c
 2710 02b0 C4020000 		.4byte	0x2c4
 2711 02b4 10       		.uleb128 0x10
 2712 02b5 C9040000 		.4byte	.LASF49
 2713 02b9 01       		.byte	0x1
 2714 02ba 1B02     		.2byte	0x21b
 2715 02bc 83000000 		.4byte	0x83
 2716 02c0 02       		.uleb128 0x2
 2717 02c1 91       		.byte	0x91
 2718 02c2 74       		.sleb128 -12
 2719 02c3 00       		.byte	0
 2720 02c4 0F       		.uleb128 0xf
 2721 02c5 44000000 		.4byte	.LASF50
 2722 02c9 01       		.byte	0x1
 2723 02ca 5B02     		.2byte	0x25b
 2724 02cc 00000000 		.4byte	.LFB9
 2725 02d0 20000000 		.4byte	.LFE9-.LFB9
 2726 02d4 01       		.uleb128 0x1
 2727 02d5 9C       		.byte	0x9c
 2728 02d6 EA020000 		.4byte	0x2ea
 2729 02da 10       		.uleb128 0x10
 2730 02db 3E010000 		.4byte	.LASF51
 2731 02df 01       		.byte	0x1
 2732 02e0 5B02     		.2byte	0x25b
 2733 02e2 83000000 		.4byte	0x83
 2734 02e6 02       		.uleb128 0x2
 2735 02e7 91       		.byte	0x91
 2736 02e8 74       		.sleb128 -12
 2737 02e9 00       		.byte	0
 2738 02ea 0F       		.uleb128 0xf
 2739 02eb CF030000 		.4byte	.LASF52
 2740 02ef 01       		.byte	0x1
 2741 02f0 7302     		.2byte	0x273
 2742 02f2 00000000 		.4byte	.LFB10
 2743 02f6 38000000 		.4byte	.LFE10-.LFB10
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 75


 2744 02fa 01       		.uleb128 0x1
 2745 02fb 9C       		.byte	0x9c
 2746 02fc 10030000 		.4byte	0x310
 2747 0300 10       		.uleb128 0x10
 2748 0301 12030000 		.4byte	.LASF53
 2749 0305 01       		.byte	0x1
 2750 0306 7302     		.2byte	0x273
 2751 0308 83000000 		.4byte	0x83
 2752 030c 02       		.uleb128 0x2
 2753 030d 91       		.byte	0x91
 2754 030e 74       		.sleb128 -12
 2755 030f 00       		.byte	0
 2756 0310 15       		.uleb128 0x15
 2757 0311 A6030000 		.4byte	.LASF59
 2758 0315 01       		.byte	0x1
 2759 0316 9302     		.2byte	0x293
 2760 0318 83000000 		.4byte	0x83
 2761 031c 00000000 		.4byte	.LFB11
 2762 0320 60000000 		.4byte	.LFE11-.LFB11
 2763 0324 01       		.uleb128 0x1
 2764 0325 9C       		.byte	0x9c
 2765 0326 58030000 		.4byte	0x358
 2766 032a 10       		.uleb128 0x10
 2767 032b 54010000 		.4byte	.LASF54
 2768 032f 01       		.byte	0x1
 2769 0330 9302     		.2byte	0x293
 2770 0332 83000000 		.4byte	0x83
 2771 0336 02       		.uleb128 0x2
 2772 0337 91       		.byte	0x91
 2773 0338 6C       		.sleb128 -20
 2774 0339 11       		.uleb128 0x11
 2775 033a 95050000 		.4byte	.LASF55
 2776 033e 01       		.byte	0x1
 2777 033f 9502     		.2byte	0x295
 2778 0341 83000000 		.4byte	0x83
 2779 0345 02       		.uleb128 0x2
 2780 0346 91       		.byte	0x91
 2781 0347 74       		.sleb128 -12
 2782 0348 16       		.uleb128 0x16
 2783 0349 77647400 		.ascii	"wdt\000"
 2784 034d 01       		.byte	0x1
 2785 034e 9602     		.2byte	0x296
 2786 0350 83000000 		.4byte	0x83
 2787 0354 02       		.uleb128 0x2
 2788 0355 91       		.byte	0x91
 2789 0356 70       		.sleb128 -16
 2790 0357 00       		.byte	0
 2791 0358 17       		.uleb128 0x17
 2792 0359 7A030000 		.4byte	.LASF101
 2793 035d 01       		.byte	0x1
 2794 035e B902     		.2byte	0x2b9
 2795 0360 9B000000 		.4byte	0x9b
 2796 0364 00000000 		.4byte	.LFB12
 2797 0368 74000000 		.4byte	.LFE12-.LFB12
 2798 036c 01       		.uleb128 0x1
 2799 036d 9C       		.byte	0x9c
 2800 036e A0030000 		.4byte	0x3a0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 76


 2801 0372 10       		.uleb128 0x10
 2802 0373 AD040000 		.4byte	.LASF56
 2803 0377 01       		.byte	0x1
 2804 0378 B902     		.2byte	0x2b9
 2805 037a 83000000 		.4byte	0x83
 2806 037e 02       		.uleb128 0x2
 2807 037f 91       		.byte	0x91
 2808 0380 6C       		.sleb128 -20
 2809 0381 11       		.uleb128 0x11
 2810 0382 21030000 		.4byte	.LASF57
 2811 0386 01       		.byte	0x1
 2812 0387 BB02     		.2byte	0x2bb
 2813 0389 9B000000 		.4byte	0x9b
 2814 038d 02       		.uleb128 0x2
 2815 038e 91       		.byte	0x91
 2816 038f 74       		.sleb128 -12
 2817 0390 11       		.uleb128 0x11
 2818 0391 07030000 		.4byte	.LASF58
 2819 0395 01       		.byte	0x1
 2820 0396 BC02     		.2byte	0x2bc
 2821 0398 83000000 		.4byte	0x83
 2822 039c 02       		.uleb128 0x2
 2823 039d 91       		.byte	0x91
 2824 039e 70       		.sleb128 -16
 2825 039f 00       		.byte	0
 2826 03a0 18       		.uleb128 0x18
 2827 03a1 B2050000 		.4byte	.LASF60
 2828 03a5 01       		.byte	0x1
 2829 03a6 E502     		.2byte	0x2e5
 2830 03a8 8F000000 		.4byte	0x8f
 2831 03ac 00000000 		.4byte	.LFB13
 2832 03b0 44000000 		.4byte	.LFE13-.LFB13
 2833 03b4 01       		.uleb128 0x1
 2834 03b5 9C       		.byte	0x9c
 2835 03b6 D9030000 		.4byte	0x3d9
 2836 03ba 10       		.uleb128 0x10
 2837 03bb AD040000 		.4byte	.LASF56
 2838 03bf 01       		.byte	0x1
 2839 03c0 E502     		.2byte	0x2e5
 2840 03c2 83000000 		.4byte	0x83
 2841 03c6 02       		.uleb128 0x2
 2842 03c7 91       		.byte	0x91
 2843 03c8 6C       		.sleb128 -20
 2844 03c9 11       		.uleb128 0x11
 2845 03ca 2A030000 		.4byte	.LASF61
 2846 03ce 01       		.byte	0x1
 2847 03cf E702     		.2byte	0x2e7
 2848 03d1 83000000 		.4byte	0x83
 2849 03d5 02       		.uleb128 0x2
 2850 03d6 91       		.byte	0x91
 2851 03d7 74       		.sleb128 -12
 2852 03d8 00       		.byte	0
 2853 03d9 18       		.uleb128 0x18
 2854 03da 08010000 		.4byte	.LASF62
 2855 03de 01       		.byte	0x1
 2856 03df 0B03     		.2byte	0x30b
 2857 03e1 9B000000 		.4byte	0x9b
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 77


 2858 03e5 00000000 		.4byte	.LFB14
 2859 03e9 68000000 		.4byte	.LFE14-.LFB14
 2860 03ed 01       		.uleb128 0x1
 2861 03ee 9C       		.byte	0x9c
 2862 03ef 30040000 		.4byte	0x430
 2863 03f3 10       		.uleb128 0x10
 2864 03f4 AD040000 		.4byte	.LASF56
 2865 03f8 01       		.byte	0x1
 2866 03f9 0B03     		.2byte	0x30b
 2867 03fb 83000000 		.4byte	0x83
 2868 03ff 02       		.uleb128 0x2
 2869 0400 91       		.byte	0x91
 2870 0401 64       		.sleb128 -28
 2871 0402 11       		.uleb128 0x11
 2872 0403 2A030000 		.4byte	.LASF61
 2873 0407 01       		.byte	0x1
 2874 0408 0D03     		.2byte	0x30d
 2875 040a 83000000 		.4byte	0x83
 2876 040e 02       		.uleb128 0x2
 2877 040f 91       		.byte	0x91
 2878 0410 74       		.sleb128 -12
 2879 0411 11       		.uleb128 0x11
 2880 0412 8F040000 		.4byte	.LASF63
 2881 0416 01       		.byte	0x1
 2882 0417 0E03     		.2byte	0x30e
 2883 0419 8F000000 		.4byte	0x8f
 2884 041d 02       		.uleb128 0x2
 2885 041e 91       		.byte	0x91
 2886 041f 6E       		.sleb128 -18
 2887 0420 11       		.uleb128 0x11
 2888 0421 E4020000 		.4byte	.LASF64
 2889 0425 01       		.byte	0x1
 2890 0426 0F03     		.2byte	0x30f
 2891 0428 9B000000 		.4byte	0x9b
 2892 042c 02       		.uleb128 0x2
 2893 042d 91       		.byte	0x91
 2894 042e 70       		.sleb128 -16
 2895 042f 00       		.byte	0
 2896 0430 0F       		.uleb128 0xf
 2897 0431 33040000 		.4byte	.LASF65
 2898 0435 01       		.byte	0x1
 2899 0436 3A03     		.2byte	0x33a
 2900 0438 00000000 		.4byte	.LFB15
 2901 043c 30000000 		.4byte	.LFE15-.LFB15
 2902 0440 01       		.uleb128 0x1
 2903 0441 9C       		.byte	0x9c
 2904 0442 56040000 		.4byte	0x456
 2905 0446 10       		.uleb128 0x10
 2906 0447 58030000 		.4byte	.LASF66
 2907 044b 01       		.byte	0x1
 2908 044c 3A03     		.2byte	0x33a
 2909 044e 83000000 		.4byte	0x83
 2910 0452 02       		.uleb128 0x2
 2911 0453 91       		.byte	0x91
 2912 0454 74       		.sleb128 -12
 2913 0455 00       		.byte	0
 2914 0456 0F       		.uleb128 0xf
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 78


 2915 0457 61030000 		.4byte	.LASF67
 2916 045b 01       		.byte	0x1
 2917 045c 5103     		.2byte	0x351
 2918 045e 00000000 		.4byte	.LFB16
 2919 0462 30000000 		.4byte	.LFE16-.LFB16
 2920 0466 01       		.uleb128 0x1
 2921 0467 9C       		.byte	0x9c
 2922 0468 7C040000 		.4byte	0x47c
 2923 046c 10       		.uleb128 0x10
 2924 046d 0E040000 		.4byte	.LASF68
 2925 0471 01       		.byte	0x1
 2926 0472 5103     		.2byte	0x351
 2927 0474 83000000 		.4byte	0x83
 2928 0478 02       		.uleb128 0x2
 2929 0479 91       		.byte	0x91
 2930 047a 74       		.sleb128 -12
 2931 047b 00       		.byte	0
 2932 047c 0F       		.uleb128 0xf
 2933 047d 5C010000 		.4byte	.LASF69
 2934 0481 01       		.byte	0x1
 2935 0482 6C03     		.2byte	0x36c
 2936 0484 00000000 		.4byte	.LFB17
 2937 0488 20000000 		.4byte	.LFE17-.LFB17
 2938 048c 01       		.uleb128 0x1
 2939 048d 9C       		.byte	0x9c
 2940 048e A2040000 		.4byte	0x4a2
 2941 0492 10       		.uleb128 0x10
 2942 0493 3E010000 		.4byte	.LASF51
 2943 0497 01       		.byte	0x1
 2944 0498 6C03     		.2byte	0x36c
 2945 049a 83000000 		.4byte	0x83
 2946 049e 02       		.uleb128 0x2
 2947 049f 91       		.byte	0x91
 2948 04a0 74       		.sleb128 -12
 2949 04a1 00       		.byte	0
 2950 04a2 0F       		.uleb128 0xf
 2951 04a3 F6010000 		.4byte	.LASF70
 2952 04a7 01       		.byte	0x1
 2953 04a8 8603     		.2byte	0x386
 2954 04aa 00000000 		.4byte	.LFB18
 2955 04ae 20000000 		.4byte	.LFE18-.LFB18
 2956 04b2 01       		.uleb128 0x1
 2957 04b3 9C       		.byte	0x9c
 2958 04b4 C8040000 		.4byte	0x4c8
 2959 04b8 10       		.uleb128 0x10
 2960 04b9 3E010000 		.4byte	.LASF51
 2961 04bd 01       		.byte	0x1
 2962 04be 8603     		.2byte	0x386
 2963 04c0 83000000 		.4byte	0x83
 2964 04c4 02       		.uleb128 0x2
 2965 04c5 91       		.byte	0x91
 2966 04c6 74       		.sleb128 -12
 2967 04c7 00       		.byte	0
 2968 04c8 13       		.uleb128 0x13
 2969 04c9 7B050000 		.4byte	.LASF71
 2970 04cd 01       		.byte	0x1
 2971 04ce A203     		.2byte	0x3a2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 79


 2972 04d0 00000000 		.4byte	.LFB19
 2973 04d4 48000000 		.4byte	.LFE19-.LFB19
 2974 04d8 01       		.uleb128 0x1
 2975 04d9 9C       		.byte	0x9c
 2976 04da FD040000 		.4byte	0x4fd
 2977 04de 10       		.uleb128 0x10
 2978 04df AD040000 		.4byte	.LASF56
 2979 04e3 01       		.byte	0x1
 2980 04e4 A203     		.2byte	0x3a2
 2981 04e6 83000000 		.4byte	0x83
 2982 04ea 02       		.uleb128 0x2
 2983 04eb 91       		.byte	0x91
 2984 04ec 74       		.sleb128 -12
 2985 04ed 10       		.uleb128 0x10
 2986 04ee 26050000 		.4byte	.LASF72
 2987 04f2 01       		.byte	0x1
 2988 04f3 A203     		.2byte	0x3a2
 2989 04f5 8F000000 		.4byte	0x8f
 2990 04f9 02       		.uleb128 0x2
 2991 04fa 91       		.byte	0x91
 2992 04fb 72       		.sleb128 -14
 2993 04fc 00       		.byte	0
 2994 04fd 13       		.uleb128 0x13
 2995 04fe FC030000 		.4byte	.LASF73
 2996 0502 01       		.byte	0x1
 2997 0503 C303     		.2byte	0x3c3
 2998 0505 00000000 		.4byte	.LFB20
 2999 0509 44000000 		.4byte	.LFE20-.LFB20
 3000 050d 01       		.uleb128 0x1
 3001 050e 9C       		.byte	0x9c
 3002 050f 32050000 		.4byte	0x532
 3003 0513 10       		.uleb128 0x10
 3004 0514 AD040000 		.4byte	.LASF56
 3005 0518 01       		.byte	0x1
 3006 0519 C303     		.2byte	0x3c3
 3007 051b 83000000 		.4byte	0x83
 3008 051f 02       		.uleb128 0x2
 3009 0520 91       		.byte	0x91
 3010 0521 74       		.sleb128 -12
 3011 0522 10       		.uleb128 0x10
 3012 0523 07000000 		.4byte	.LASF74
 3013 0527 01       		.byte	0x1
 3014 0528 C303     		.2byte	0x3c3
 3015 052a 9B000000 		.4byte	0x9b
 3016 052e 02       		.uleb128 0x2
 3017 052f 91       		.byte	0x91
 3018 0530 70       		.sleb128 -16
 3019 0531 00       		.byte	0
 3020 0532 18       		.uleb128 0x18
 3021 0533 16000000 		.4byte	.LASF75
 3022 0537 01       		.byte	0x1
 3023 0538 E303     		.2byte	0x3e3
 3024 053a A7000000 		.4byte	0xa7
 3025 053e 00000000 		.4byte	.LFB21
 3026 0542 44010000 		.4byte	.LFE21-.LFB21
 3027 0546 01       		.uleb128 0x1
 3028 0547 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 80


 3029 0548 A7050000 		.4byte	0x5a7
 3030 054c 10       		.uleb128 0x10
 3031 054d AD040000 		.4byte	.LASF56
 3032 0551 01       		.byte	0x1
 3033 0552 E303     		.2byte	0x3e3
 3034 0554 83000000 		.4byte	0x83
 3035 0558 02       		.uleb128 0x2
 3036 0559 91       		.byte	0x91
 3037 055a 5C       		.sleb128 -36
 3038 055b 10       		.uleb128 0x10
 3039 055c 3D050000 		.4byte	.LASF76
 3040 0560 01       		.byte	0x1
 3041 0561 E303     		.2byte	0x3e3
 3042 0563 8F000000 		.4byte	0x8f
 3043 0567 02       		.uleb128 0x2
 3044 0568 91       		.byte	0x91
 3045 0569 5A       		.sleb128 -38
 3046 056a 11       		.uleb128 0x11
 3047 056b 82040000 		.4byte	.LASF77
 3048 056f 01       		.byte	0x1
 3049 0570 E503     		.2byte	0x3e5
 3050 0572 A7000000 		.4byte	0xa7
 3051 0576 02       		.uleb128 0x2
 3052 0577 91       		.byte	0x91
 3053 0578 6C       		.sleb128 -20
 3054 0579 11       		.uleb128 0x11
 3055 057a 4F010000 		.4byte	.LASF78
 3056 057e 01       		.byte	0x1
 3057 057f E603     		.2byte	0x3e6
 3058 0581 83000000 		.4byte	0x83
 3059 0585 02       		.uleb128 0x2
 3060 0586 91       		.byte	0x91
 3061 0587 60       		.sleb128 -32
 3062 0588 11       		.uleb128 0x11
 3063 0589 A1020000 		.4byte	.LASF79
 3064 058d 01       		.byte	0x1
 3065 058e E703     		.2byte	0x3e7
 3066 0590 83000000 		.4byte	0x83
 3067 0594 02       		.uleb128 0x2
 3068 0595 91       		.byte	0x91
 3069 0596 64       		.sleb128 -28
 3070 0597 11       		.uleb128 0x11
 3071 0598 F0020000 		.4byte	.LASF80
 3072 059c 01       		.byte	0x1
 3073 059d E803     		.2byte	0x3e8
 3074 059f 83000000 		.4byte	0x83
 3075 05a3 02       		.uleb128 0x2
 3076 05a4 91       		.byte	0x91
 3077 05a5 68       		.sleb128 -24
 3078 05a6 00       		.byte	0
 3079 05a7 18       		.uleb128 0x18
 3080 05a8 18040000 		.4byte	.LASF81
 3081 05ac 01       		.byte	0x1
 3082 05ad 2A04     		.2byte	0x42a
 3083 05af 8F000000 		.4byte	0x8f
 3084 05b3 00000000 		.4byte	.LFB22
 3085 05b7 6C010000 		.4byte	.LFE22-.LFB22
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 81


 3086 05bb 01       		.uleb128 0x1
 3087 05bc 9C       		.byte	0x9c
 3088 05bd 1C060000 		.4byte	0x61c
 3089 05c1 10       		.uleb128 0x10
 3090 05c2 AD040000 		.4byte	.LASF56
 3091 05c6 01       		.byte	0x1
 3092 05c7 2A04     		.2byte	0x42a
 3093 05c9 83000000 		.4byte	0x83
 3094 05cd 02       		.uleb128 0x2
 3095 05ce 91       		.byte	0x91
 3096 05cf 64       		.sleb128 -28
 3097 05d0 10       		.uleb128 0x10
 3098 05d1 3D050000 		.4byte	.LASF76
 3099 05d5 01       		.byte	0x1
 3100 05d6 2A04     		.2byte	0x42a
 3101 05d8 8F000000 		.4byte	0x8f
 3102 05dc 02       		.uleb128 0x2
 3103 05dd 91       		.byte	0x91
 3104 05de 62       		.sleb128 -30
 3105 05df 11       		.uleb128 0x11
 3106 05e0 6D050000 		.4byte	.LASF82
 3107 05e4 01       		.byte	0x1
 3108 05e5 2C04     		.2byte	0x42c
 3109 05e7 8F000000 		.4byte	0x8f
 3110 05eb 02       		.uleb128 0x2
 3111 05ec 91       		.byte	0x91
 3112 05ed 76       		.sleb128 -10
 3113 05ee 11       		.uleb128 0x11
 3114 05ef 4F010000 		.4byte	.LASF78
 3115 05f3 01       		.byte	0x1
 3116 05f4 2D04     		.2byte	0x42d
 3117 05f6 83000000 		.4byte	0x83
 3118 05fa 02       		.uleb128 0x2
 3119 05fb 91       		.byte	0x91
 3120 05fc 68       		.sleb128 -24
 3121 05fd 11       		.uleb128 0x11
 3122 05fe A1020000 		.4byte	.LASF79
 3123 0602 01       		.byte	0x1
 3124 0603 2E04     		.2byte	0x42e
 3125 0605 83000000 		.4byte	0x83
 3126 0609 02       		.uleb128 0x2
 3127 060a 91       		.byte	0x91
 3128 060b 6C       		.sleb128 -20
 3129 060c 11       		.uleb128 0x11
 3130 060d F0020000 		.4byte	.LASF80
 3131 0611 01       		.byte	0x1
 3132 0612 2F04     		.2byte	0x42f
 3133 0614 83000000 		.4byte	0x83
 3134 0618 02       		.uleb128 0x2
 3135 0619 91       		.byte	0x91
 3136 061a 70       		.sleb128 -16
 3137 061b 00       		.byte	0
 3138 061c 18       		.uleb128 0x18
 3139 061d D3000000 		.4byte	.LASF83
 3140 0621 01       		.byte	0x1
 3141 0622 7604     		.2byte	0x476
 3142 0624 9B000000 		.4byte	0x9b
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 82


 3143 0628 00000000 		.4byte	.LFB23
 3144 062c 60010000 		.4byte	.LFE23-.LFB23
 3145 0630 01       		.uleb128 0x1
 3146 0631 9C       		.byte	0x9c
 3147 0632 91060000 		.4byte	0x691
 3148 0636 10       		.uleb128 0x10
 3149 0637 AD040000 		.4byte	.LASF56
 3150 063b 01       		.byte	0x1
 3151 063c 7604     		.2byte	0x476
 3152 063e 83000000 		.4byte	0x83
 3153 0642 02       		.uleb128 0x2
 3154 0643 91       		.byte	0x91
 3155 0644 4C       		.sleb128 -52
 3156 0645 10       		.uleb128 0x10
 3157 0646 3D050000 		.4byte	.LASF76
 3158 064a 01       		.byte	0x1
 3159 064b 7604     		.2byte	0x476
 3160 064d 8F000000 		.4byte	0x8f
 3161 0651 02       		.uleb128 0x2
 3162 0652 91       		.byte	0x91
 3163 0653 4A       		.sleb128 -54
 3164 0654 11       		.uleb128 0x11
 3165 0655 10050000 		.4byte	.LASF84
 3166 0659 01       		.byte	0x1
 3167 065a 7804     		.2byte	0x478
 3168 065c C1000000 		.4byte	0xc1
 3169 0660 02       		.uleb128 0x2
 3170 0661 91       		.byte	0x91
 3171 0662 60       		.sleb128 -32
 3172 0663 11       		.uleb128 0x11
 3173 0664 4F010000 		.4byte	.LASF78
 3174 0668 01       		.byte	0x1
 3175 0669 7904     		.2byte	0x479
 3176 066b 83000000 		.4byte	0x83
 3177 066f 02       		.uleb128 0x2
 3178 0670 91       		.byte	0x91
 3179 0671 54       		.sleb128 -44
 3180 0672 11       		.uleb128 0x11
 3181 0673 A1020000 		.4byte	.LASF79
 3182 0677 01       		.byte	0x1
 3183 0678 7A04     		.2byte	0x47a
 3184 067a 83000000 		.4byte	0x83
 3185 067e 02       		.uleb128 0x2
 3186 067f 91       		.byte	0x91
 3187 0680 58       		.sleb128 -40
 3188 0681 11       		.uleb128 0x11
 3189 0682 F0020000 		.4byte	.LASF80
 3190 0686 01       		.byte	0x1
 3191 0687 7B04     		.2byte	0x47b
 3192 0689 83000000 		.4byte	0x83
 3193 068d 02       		.uleb128 0x2
 3194 068e 91       		.byte	0x91
 3195 068f 5C       		.sleb128 -36
 3196 0690 00       		.byte	0
 3197 0691 13       		.uleb128 0x13
 3198 0692 29000000 		.4byte	.LASF85
 3199 0696 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 83


 3200 0697 FF04     		.2byte	0x4ff
 3201 0699 00000000 		.4byte	.LFB24
 3202 069d CC010000 		.4byte	.LFE24-.LFB24
 3203 06a1 01       		.uleb128 0x1
 3204 06a2 9C       		.byte	0x9c
 3205 06a3 D5060000 		.4byte	0x6d5
 3206 06a7 11       		.uleb128 0x11
 3207 06a8 9B040000 		.4byte	.LASF42
 3208 06ac 01       		.byte	0x1
 3209 06ad 0105     		.2byte	0x501
 3210 06af 83000000 		.4byte	0x83
 3211 06b3 02       		.uleb128 0x2
 3212 06b4 91       		.byte	0x91
 3213 06b5 74       		.sleb128 -12
 3214 06b6 11       		.uleb128 0x11
 3215 06b7 87010000 		.4byte	.LASF86
 3216 06bb 01       		.byte	0x1
 3217 06bc 0205     		.2byte	0x502
 3218 06be 83000000 		.4byte	0x83
 3219 06c2 02       		.uleb128 0x2
 3220 06c3 91       		.byte	0x91
 3221 06c4 70       		.sleb128 -16
 3222 06c5 11       		.uleb128 0x11
 3223 06c6 0F000000 		.4byte	.LASF87
 3224 06ca 01       		.byte	0x1
 3225 06cb 0305     		.2byte	0x503
 3226 06cd 9B000000 		.4byte	0x9b
 3227 06d1 02       		.uleb128 0x2
 3228 06d2 91       		.byte	0x91
 3229 06d3 6C       		.sleb128 -20
 3230 06d4 00       		.byte	0
 3231 06d5 14       		.uleb128 0x14
 3232 06d6 51050000 		.4byte	.LASF88
 3233 06da 01       		.byte	0x1
 3234 06db 8105     		.2byte	0x581
 3235 06dd 00000000 		.4byte	.LFB25
 3236 06e1 38000000 		.4byte	.LFE25-.LFB25
 3237 06e5 01       		.uleb128 0x1
 3238 06e6 9C       		.byte	0x9c
 3239 06e7 19       		.uleb128 0x19
 3240 06e8 32000000 		.4byte	.LASF89
 3241 06ec 01       		.byte	0x1
 3242 06ed 31       		.byte	0x31
 3243 06ee 83000000 		.4byte	0x83
 3244 06f2 05       		.uleb128 0x5
 3245 06f3 03       		.byte	0x3
 3246 06f4 04000000 		.4byte	ADC_currentConfig
 3247 06f8 1A       		.uleb128 0x1a
 3248 06f9 83000000 		.4byte	0x83
 3249 06fd 08070000 		.4byte	0x708
 3250 0701 1B       		.uleb128 0x1b
 3251 0702 F8000000 		.4byte	0xf8
 3252 0706 00       		.byte	0
 3253 0707 00       		.byte	0
 3254 0708 19       		.uleb128 0x19
 3255 0709 5C040000 		.4byte	.LASF90
 3256 070d 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 84


 3257 070e 32       		.byte	0x32
 3258 070f F8060000 		.4byte	0x6f8
 3259 0713 05       		.uleb128 0x5
 3260 0714 03       		.byte	0x3
 3261 0715 08000000 		.4byte	ADC_channelEnMasks
 3262 0719 1A       		.uleb128 0x1a
 3263 071a 83000000 		.4byte	0x83
 3264 071e 29070000 		.4byte	0x729
 3265 0722 1B       		.uleb128 0x1b
 3266 0723 F8000000 		.4byte	0xf8
 3267 0727 06       		.byte	0x6
 3268 0728 00       		.byte	0
 3269 0729 19       		.uleb128 0x19
 3270 072a F1040000 		.4byte	.LASF91
 3271 072e 01       		.byte	0x1
 3272 072f 38       		.byte	0x38
 3273 0730 3A070000 		.4byte	0x73a
 3274 0734 05       		.uleb128 0x5
 3275 0735 03       		.byte	0x3
 3276 0736 00000000 		.4byte	ADC_channelsConfig
 3277 073a 12       		.uleb128 0x12
 3278 073b 19070000 		.4byte	0x719
 3279 073f 1C       		.uleb128 0x1c
 3280 0740 43010000 		.4byte	.LASF92
 3281 0744 01       		.byte	0x1
 3282 0745 2B       		.byte	0x2b
 3283 0746 6B000000 		.4byte	0x6b
 3284 074a 05       		.uleb128 0x5
 3285 074b 03       		.byte	0x3
 3286 074c 00000000 		.4byte	ADC_initVar
 3287 0750 1C       		.uleb128 0x1c
 3288 0751 A5050000 		.4byte	.LASF93
 3289 0755 01       		.byte	0x1
 3290 0756 2D       		.byte	0x2d
 3291 0757 6B000000 		.4byte	0x6b
 3292 075b 05       		.uleb128 0x5
 3293 075c 03       		.byte	0x3
 3294 075d 00000000 		.4byte	ADC_selected
 3295 0761 1A       		.uleb128 0x1a
 3296 0762 8F000000 		.4byte	0x8f
 3297 0766 71070000 		.4byte	0x771
 3298 076a 1B       		.uleb128 0x1b
 3299 076b F8000000 		.4byte	0xf8
 3300 076f 06       		.byte	0x6
 3301 0770 00       		.byte	0
 3302 0771 1C       		.uleb128 0x1c
 3303 0772 51040000 		.4byte	.LASF94
 3304 0776 01       		.byte	0x1
 3305 0777 2E       		.byte	0x2e
 3306 0778 82070000 		.4byte	0x782
 3307 077c 05       		.uleb128 0x5
 3308 077d 03       		.byte	0x3
 3309 077e 00000000 		.4byte	ADC_offset
 3310 0782 05       		.uleb128 0x5
 3311 0783 61070000 		.4byte	0x761
 3312 0787 1A       		.uleb128 0x1a
 3313 0788 9B000000 		.4byte	0x9b
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 85


 3314 078c 97070000 		.4byte	0x797
 3315 0790 1B       		.uleb128 0x1b
 3316 0791 F8000000 		.4byte	0xf8
 3317 0795 06       		.byte	0x6
 3318 0796 00       		.byte	0
 3319 0797 1C       		.uleb128 0x1c
 3320 0798 E7000000 		.4byte	.LASF95
 3321 079c 01       		.byte	0x1
 3322 079d 2F       		.byte	0x2f
 3323 079e A8070000 		.4byte	0x7a8
 3324 07a2 05       		.uleb128 0x5
 3325 07a3 03       		.byte	0x3
 3326 07a4 00000000 		.4byte	ADC_countsPer10Volt
 3327 07a8 05       		.uleb128 0x5
 3328 07a9 87070000 		.4byte	0x787
 3329 07ad 1A       		.uleb128 0x1a
 3330 07ae A4010000 		.4byte	0x1a4
 3331 07b2 BD070000 		.4byte	0x7bd
 3332 07b6 1B       		.uleb128 0x1b
 3333 07b7 F8000000 		.4byte	0xf8
 3334 07bb 00       		.byte	0
 3335 07bc 00       		.byte	0
 3336 07bd 1D       		.uleb128 0x1d
 3337 07be DB040000 		.4byte	.LASF96
 3338 07c2 03       		.byte	0x3
 3339 07c3 3D02     		.2byte	0x23d
 3340 07c5 C9070000 		.4byte	0x7c9
 3341 07c9 12       		.uleb128 0x12
 3342 07ca AD070000 		.4byte	0x7ad
 3343 07ce 1D       		.uleb128 0x1d
 3344 07cf 6A000000 		.4byte	.LASF97
 3345 07d3 03       		.byte	0x3
 3346 07d4 3E02     		.2byte	0x23e
 3347 07d6 DA070000 		.4byte	0x7da
 3348 07da 12       		.uleb128 0x12
 3349 07db 19070000 		.4byte	0x719
 3350 07df 00       		.byte	0
 3351              		.section	.debug_abbrev,"",%progbits
 3352              	.Ldebug_abbrev0:
 3353 0000 01       		.uleb128 0x1
 3354 0001 11       		.uleb128 0x11
 3355 0002 01       		.byte	0x1
 3356 0003 25       		.uleb128 0x25
 3357 0004 0E       		.uleb128 0xe
 3358 0005 13       		.uleb128 0x13
 3359 0006 0B       		.uleb128 0xb
 3360 0007 03       		.uleb128 0x3
 3361 0008 0E       		.uleb128 0xe
 3362 0009 1B       		.uleb128 0x1b
 3363 000a 0E       		.uleb128 0xe
 3364 000b 55       		.uleb128 0x55
 3365 000c 17       		.uleb128 0x17
 3366 000d 11       		.uleb128 0x11
 3367 000e 01       		.uleb128 0x1
 3368 000f 10       		.uleb128 0x10
 3369 0010 17       		.uleb128 0x17
 3370 0011 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 86


 3371 0012 00       		.byte	0
 3372 0013 02       		.uleb128 0x2
 3373 0014 24       		.uleb128 0x24
 3374 0015 00       		.byte	0
 3375 0016 0B       		.uleb128 0xb
 3376 0017 0B       		.uleb128 0xb
 3377 0018 3E       		.uleb128 0x3e
 3378 0019 0B       		.uleb128 0xb
 3379 001a 03       		.uleb128 0x3
 3380 001b 0E       		.uleb128 0xe
 3381 001c 00       		.byte	0
 3382 001d 00       		.byte	0
 3383 001e 03       		.uleb128 0x3
 3384 001f 24       		.uleb128 0x24
 3385 0020 00       		.byte	0
 3386 0021 0B       		.uleb128 0xb
 3387 0022 0B       		.uleb128 0xb
 3388 0023 3E       		.uleb128 0x3e
 3389 0024 0B       		.uleb128 0xb
 3390 0025 03       		.uleb128 0x3
 3391 0026 08       		.uleb128 0x8
 3392 0027 00       		.byte	0
 3393 0028 00       		.byte	0
 3394 0029 04       		.uleb128 0x4
 3395 002a 16       		.uleb128 0x16
 3396 002b 00       		.byte	0
 3397 002c 03       		.uleb128 0x3
 3398 002d 0E       		.uleb128 0xe
 3399 002e 3A       		.uleb128 0x3a
 3400 002f 0B       		.uleb128 0xb
 3401 0030 3B       		.uleb128 0x3b
 3402 0031 05       		.uleb128 0x5
 3403 0032 49       		.uleb128 0x49
 3404 0033 13       		.uleb128 0x13
 3405 0034 00       		.byte	0
 3406 0035 00       		.byte	0
 3407 0036 05       		.uleb128 0x5
 3408 0037 35       		.uleb128 0x35
 3409 0038 00       		.byte	0
 3410 0039 49       		.uleb128 0x49
 3411 003a 13       		.uleb128 0x13
 3412 003b 00       		.byte	0
 3413 003c 00       		.byte	0
 3414 003d 06       		.uleb128 0x6
 3415 003e 0F       		.uleb128 0xf
 3416 003f 00       		.byte	0
 3417 0040 0B       		.uleb128 0xb
 3418 0041 0B       		.uleb128 0xb
 3419 0042 49       		.uleb128 0x49
 3420 0043 13       		.uleb128 0x13
 3421 0044 00       		.byte	0
 3422 0045 00       		.byte	0
 3423 0046 07       		.uleb128 0x7
 3424 0047 15       		.uleb128 0x15
 3425 0048 00       		.byte	0
 3426 0049 27       		.uleb128 0x27
 3427 004a 19       		.uleb128 0x19
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 87


 3428 004b 00       		.byte	0
 3429 004c 00       		.byte	0
 3430 004d 08       		.uleb128 0x8
 3431 004e 13       		.uleb128 0x13
 3432 004f 01       		.byte	0x1
 3433 0050 0B       		.uleb128 0xb
 3434 0051 0B       		.uleb128 0xb
 3435 0052 3A       		.uleb128 0x3a
 3436 0053 0B       		.uleb128 0xb
 3437 0054 3B       		.uleb128 0x3b
 3438 0055 0B       		.uleb128 0xb
 3439 0056 01       		.uleb128 0x1
 3440 0057 13       		.uleb128 0x13
 3441 0058 00       		.byte	0
 3442 0059 00       		.byte	0
 3443 005a 09       		.uleb128 0x9
 3444 005b 0D       		.uleb128 0xd
 3445 005c 00       		.byte	0
 3446 005d 03       		.uleb128 0x3
 3447 005e 0E       		.uleb128 0xe
 3448 005f 3A       		.uleb128 0x3a
 3449 0060 0B       		.uleb128 0xb
 3450 0061 3B       		.uleb128 0x3b
 3451 0062 0B       		.uleb128 0xb
 3452 0063 49       		.uleb128 0x49
 3453 0064 13       		.uleb128 0x13
 3454 0065 38       		.uleb128 0x38
 3455 0066 0B       		.uleb128 0xb
 3456 0067 00       		.byte	0
 3457 0068 00       		.byte	0
 3458 0069 0A       		.uleb128 0xa
 3459 006a 16       		.uleb128 0x16
 3460 006b 00       		.byte	0
 3461 006c 03       		.uleb128 0x3
 3462 006d 0E       		.uleb128 0xe
 3463 006e 3A       		.uleb128 0x3a
 3464 006f 0B       		.uleb128 0xb
 3465 0070 3B       		.uleb128 0x3b
 3466 0071 0B       		.uleb128 0xb
 3467 0072 49       		.uleb128 0x49
 3468 0073 13       		.uleb128 0x13
 3469 0074 00       		.byte	0
 3470 0075 00       		.byte	0
 3471 0076 0B       		.uleb128 0xb
 3472 0077 2E       		.uleb128 0x2e
 3473 0078 00       		.byte	0
 3474 0079 3F       		.uleb128 0x3f
 3475 007a 19       		.uleb128 0x19
 3476 007b 03       		.uleb128 0x3
 3477 007c 0E       		.uleb128 0xe
 3478 007d 3A       		.uleb128 0x3a
 3479 007e 0B       		.uleb128 0xb
 3480 007f 3B       		.uleb128 0x3b
 3481 0080 0B       		.uleb128 0xb
 3482 0081 27       		.uleb128 0x27
 3483 0082 19       		.uleb128 0x19
 3484 0083 11       		.uleb128 0x11
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 88


 3485 0084 01       		.uleb128 0x1
 3486 0085 12       		.uleb128 0x12
 3487 0086 06       		.uleb128 0x6
 3488 0087 40       		.uleb128 0x40
 3489 0088 18       		.uleb128 0x18
 3490 0089 9642     		.uleb128 0x2116
 3491 008b 19       		.uleb128 0x19
 3492 008c 00       		.byte	0
 3493 008d 00       		.byte	0
 3494 008e 0C       		.uleb128 0xc
 3495 008f 2E       		.uleb128 0x2e
 3496 0090 01       		.byte	0x1
 3497 0091 3F       		.uleb128 0x3f
 3498 0092 19       		.uleb128 0x19
 3499 0093 03       		.uleb128 0x3
 3500 0094 0E       		.uleb128 0xe
 3501 0095 3A       		.uleb128 0x3a
 3502 0096 0B       		.uleb128 0xb
 3503 0097 3B       		.uleb128 0x3b
 3504 0098 0B       		.uleb128 0xb
 3505 0099 27       		.uleb128 0x27
 3506 009a 19       		.uleb128 0x19
 3507 009b 11       		.uleb128 0x11
 3508 009c 01       		.uleb128 0x1
 3509 009d 12       		.uleb128 0x12
 3510 009e 06       		.uleb128 0x6
 3511 009f 40       		.uleb128 0x40
 3512 00a0 18       		.uleb128 0x18
 3513 00a1 9642     		.uleb128 0x2116
 3514 00a3 19       		.uleb128 0x19
 3515 00a4 01       		.uleb128 0x1
 3516 00a5 13       		.uleb128 0x13
 3517 00a6 00       		.byte	0
 3518 00a7 00       		.byte	0
 3519 00a8 0D       		.uleb128 0xd
 3520 00a9 05       		.uleb128 0x5
 3521 00aa 00       		.byte	0
 3522 00ab 03       		.uleb128 0x3
 3523 00ac 0E       		.uleb128 0xe
 3524 00ad 3A       		.uleb128 0x3a
 3525 00ae 0B       		.uleb128 0xb
 3526 00af 3B       		.uleb128 0x3b
 3527 00b0 0B       		.uleb128 0xb
 3528 00b1 49       		.uleb128 0x49
 3529 00b2 13       		.uleb128 0x13
 3530 00b3 02       		.uleb128 0x2
 3531 00b4 18       		.uleb128 0x18
 3532 00b5 00       		.byte	0
 3533 00b6 00       		.byte	0
 3534 00b7 0E       		.uleb128 0xe
 3535 00b8 2E       		.uleb128 0x2e
 3536 00b9 00       		.byte	0
 3537 00ba 3F       		.uleb128 0x3f
 3538 00bb 19       		.uleb128 0x19
 3539 00bc 03       		.uleb128 0x3
 3540 00bd 0E       		.uleb128 0xe
 3541 00be 3A       		.uleb128 0x3a
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 89


 3542 00bf 0B       		.uleb128 0xb
 3543 00c0 3B       		.uleb128 0x3b
 3544 00c1 05       		.uleb128 0x5
 3545 00c2 27       		.uleb128 0x27
 3546 00c3 19       		.uleb128 0x19
 3547 00c4 11       		.uleb128 0x11
 3548 00c5 01       		.uleb128 0x1
 3549 00c6 12       		.uleb128 0x12
 3550 00c7 06       		.uleb128 0x6
 3551 00c8 40       		.uleb128 0x40
 3552 00c9 18       		.uleb128 0x18
 3553 00ca 9742     		.uleb128 0x2117
 3554 00cc 19       		.uleb128 0x19
 3555 00cd 00       		.byte	0
 3556 00ce 00       		.byte	0
 3557 00cf 0F       		.uleb128 0xf
 3558 00d0 2E       		.uleb128 0x2e
 3559 00d1 01       		.byte	0x1
 3560 00d2 3F       		.uleb128 0x3f
 3561 00d3 19       		.uleb128 0x19
 3562 00d4 03       		.uleb128 0x3
 3563 00d5 0E       		.uleb128 0xe
 3564 00d6 3A       		.uleb128 0x3a
 3565 00d7 0B       		.uleb128 0xb
 3566 00d8 3B       		.uleb128 0x3b
 3567 00d9 05       		.uleb128 0x5
 3568 00da 27       		.uleb128 0x27
 3569 00db 19       		.uleb128 0x19
 3570 00dc 11       		.uleb128 0x11
 3571 00dd 01       		.uleb128 0x1
 3572 00de 12       		.uleb128 0x12
 3573 00df 06       		.uleb128 0x6
 3574 00e0 40       		.uleb128 0x40
 3575 00e1 18       		.uleb128 0x18
 3576 00e2 9742     		.uleb128 0x2117
 3577 00e4 19       		.uleb128 0x19
 3578 00e5 01       		.uleb128 0x1
 3579 00e6 13       		.uleb128 0x13
 3580 00e7 00       		.byte	0
 3581 00e8 00       		.byte	0
 3582 00e9 10       		.uleb128 0x10
 3583 00ea 05       		.uleb128 0x5
 3584 00eb 00       		.byte	0
 3585 00ec 03       		.uleb128 0x3
 3586 00ed 0E       		.uleb128 0xe
 3587 00ee 3A       		.uleb128 0x3a
 3588 00ef 0B       		.uleb128 0xb
 3589 00f0 3B       		.uleb128 0x3b
 3590 00f1 05       		.uleb128 0x5
 3591 00f2 49       		.uleb128 0x49
 3592 00f3 13       		.uleb128 0x13
 3593 00f4 02       		.uleb128 0x2
 3594 00f5 18       		.uleb128 0x18
 3595 00f6 00       		.byte	0
 3596 00f7 00       		.byte	0
 3597 00f8 11       		.uleb128 0x11
 3598 00f9 34       		.uleb128 0x34
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 90


 3599 00fa 00       		.byte	0
 3600 00fb 03       		.uleb128 0x3
 3601 00fc 0E       		.uleb128 0xe
 3602 00fd 3A       		.uleb128 0x3a
 3603 00fe 0B       		.uleb128 0xb
 3604 00ff 3B       		.uleb128 0x3b
 3605 0100 05       		.uleb128 0x5
 3606 0101 49       		.uleb128 0x49
 3607 0102 13       		.uleb128 0x13
 3608 0103 02       		.uleb128 0x2
 3609 0104 18       		.uleb128 0x18
 3610 0105 00       		.byte	0
 3611 0106 00       		.byte	0
 3612 0107 12       		.uleb128 0x12
 3613 0108 26       		.uleb128 0x26
 3614 0109 00       		.byte	0
 3615 010a 49       		.uleb128 0x49
 3616 010b 13       		.uleb128 0x13
 3617 010c 00       		.byte	0
 3618 010d 00       		.byte	0
 3619 010e 13       		.uleb128 0x13
 3620 010f 2E       		.uleb128 0x2e
 3621 0110 01       		.byte	0x1
 3622 0111 3F       		.uleb128 0x3f
 3623 0112 19       		.uleb128 0x19
 3624 0113 03       		.uleb128 0x3
 3625 0114 0E       		.uleb128 0xe
 3626 0115 3A       		.uleb128 0x3a
 3627 0116 0B       		.uleb128 0xb
 3628 0117 3B       		.uleb128 0x3b
 3629 0118 05       		.uleb128 0x5
 3630 0119 27       		.uleb128 0x27
 3631 011a 19       		.uleb128 0x19
 3632 011b 11       		.uleb128 0x11
 3633 011c 01       		.uleb128 0x1
 3634 011d 12       		.uleb128 0x12
 3635 011e 06       		.uleb128 0x6
 3636 011f 40       		.uleb128 0x40
 3637 0120 18       		.uleb128 0x18
 3638 0121 9642     		.uleb128 0x2116
 3639 0123 19       		.uleb128 0x19
 3640 0124 01       		.uleb128 0x1
 3641 0125 13       		.uleb128 0x13
 3642 0126 00       		.byte	0
 3643 0127 00       		.byte	0
 3644 0128 14       		.uleb128 0x14
 3645 0129 2E       		.uleb128 0x2e
 3646 012a 00       		.byte	0
 3647 012b 3F       		.uleb128 0x3f
 3648 012c 19       		.uleb128 0x19
 3649 012d 03       		.uleb128 0x3
 3650 012e 0E       		.uleb128 0xe
 3651 012f 3A       		.uleb128 0x3a
 3652 0130 0B       		.uleb128 0xb
 3653 0131 3B       		.uleb128 0x3b
 3654 0132 05       		.uleb128 0x5
 3655 0133 27       		.uleb128 0x27
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 91


 3656 0134 19       		.uleb128 0x19
 3657 0135 11       		.uleb128 0x11
 3658 0136 01       		.uleb128 0x1
 3659 0137 12       		.uleb128 0x12
 3660 0138 06       		.uleb128 0x6
 3661 0139 40       		.uleb128 0x40
 3662 013a 18       		.uleb128 0x18
 3663 013b 9642     		.uleb128 0x2116
 3664 013d 19       		.uleb128 0x19
 3665 013e 00       		.byte	0
 3666 013f 00       		.byte	0
 3667 0140 15       		.uleb128 0x15
 3668 0141 2E       		.uleb128 0x2e
 3669 0142 01       		.byte	0x1
 3670 0143 3F       		.uleb128 0x3f
 3671 0144 19       		.uleb128 0x19
 3672 0145 03       		.uleb128 0x3
 3673 0146 0E       		.uleb128 0xe
 3674 0147 3A       		.uleb128 0x3a
 3675 0148 0B       		.uleb128 0xb
 3676 0149 3B       		.uleb128 0x3b
 3677 014a 05       		.uleb128 0x5
 3678 014b 27       		.uleb128 0x27
 3679 014c 19       		.uleb128 0x19
 3680 014d 49       		.uleb128 0x49
 3681 014e 13       		.uleb128 0x13
 3682 014f 11       		.uleb128 0x11
 3683 0150 01       		.uleb128 0x1
 3684 0151 12       		.uleb128 0x12
 3685 0152 06       		.uleb128 0x6
 3686 0153 40       		.uleb128 0x40
 3687 0154 18       		.uleb128 0x18
 3688 0155 9742     		.uleb128 0x2117
 3689 0157 19       		.uleb128 0x19
 3690 0158 01       		.uleb128 0x1
 3691 0159 13       		.uleb128 0x13
 3692 015a 00       		.byte	0
 3693 015b 00       		.byte	0
 3694 015c 16       		.uleb128 0x16
 3695 015d 34       		.uleb128 0x34
 3696 015e 00       		.byte	0
 3697 015f 03       		.uleb128 0x3
 3698 0160 08       		.uleb128 0x8
 3699 0161 3A       		.uleb128 0x3a
 3700 0162 0B       		.uleb128 0xb
 3701 0163 3B       		.uleb128 0x3b
 3702 0164 05       		.uleb128 0x5
 3703 0165 49       		.uleb128 0x49
 3704 0166 13       		.uleb128 0x13
 3705 0167 02       		.uleb128 0x2
 3706 0168 18       		.uleb128 0x18
 3707 0169 00       		.byte	0
 3708 016a 00       		.byte	0
 3709 016b 17       		.uleb128 0x17
 3710 016c 2E       		.uleb128 0x2e
 3711 016d 01       		.byte	0x1
 3712 016e 03       		.uleb128 0x3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 92


 3713 016f 0E       		.uleb128 0xe
 3714 0170 3A       		.uleb128 0x3a
 3715 0171 0B       		.uleb128 0xb
 3716 0172 3B       		.uleb128 0x3b
 3717 0173 05       		.uleb128 0x5
 3718 0174 27       		.uleb128 0x27
 3719 0175 19       		.uleb128 0x19
 3720 0176 49       		.uleb128 0x49
 3721 0177 13       		.uleb128 0x13
 3722 0178 11       		.uleb128 0x11
 3723 0179 01       		.uleb128 0x1
 3724 017a 12       		.uleb128 0x12
 3725 017b 06       		.uleb128 0x6
 3726 017c 40       		.uleb128 0x40
 3727 017d 18       		.uleb128 0x18
 3728 017e 9742     		.uleb128 0x2117
 3729 0180 19       		.uleb128 0x19
 3730 0181 01       		.uleb128 0x1
 3731 0182 13       		.uleb128 0x13
 3732 0183 00       		.byte	0
 3733 0184 00       		.byte	0
 3734 0185 18       		.uleb128 0x18
 3735 0186 2E       		.uleb128 0x2e
 3736 0187 01       		.byte	0x1
 3737 0188 3F       		.uleb128 0x3f
 3738 0189 19       		.uleb128 0x19
 3739 018a 03       		.uleb128 0x3
 3740 018b 0E       		.uleb128 0xe
 3741 018c 3A       		.uleb128 0x3a
 3742 018d 0B       		.uleb128 0xb
 3743 018e 3B       		.uleb128 0x3b
 3744 018f 05       		.uleb128 0x5
 3745 0190 27       		.uleb128 0x27
 3746 0191 19       		.uleb128 0x19
 3747 0192 49       		.uleb128 0x49
 3748 0193 13       		.uleb128 0x13
 3749 0194 11       		.uleb128 0x11
 3750 0195 01       		.uleb128 0x1
 3751 0196 12       		.uleb128 0x12
 3752 0197 06       		.uleb128 0x6
 3753 0198 40       		.uleb128 0x40
 3754 0199 18       		.uleb128 0x18
 3755 019a 9642     		.uleb128 0x2116
 3756 019c 19       		.uleb128 0x19
 3757 019d 01       		.uleb128 0x1
 3758 019e 13       		.uleb128 0x13
 3759 019f 00       		.byte	0
 3760 01a0 00       		.byte	0
 3761 01a1 19       		.uleb128 0x19
 3762 01a2 34       		.uleb128 0x34
 3763 01a3 00       		.byte	0
 3764 01a4 03       		.uleb128 0x3
 3765 01a5 0E       		.uleb128 0xe
 3766 01a6 3A       		.uleb128 0x3a
 3767 01a7 0B       		.uleb128 0xb
 3768 01a8 3B       		.uleb128 0x3b
 3769 01a9 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 93


 3770 01aa 49       		.uleb128 0x49
 3771 01ab 13       		.uleb128 0x13
 3772 01ac 02       		.uleb128 0x2
 3773 01ad 18       		.uleb128 0x18
 3774 01ae 00       		.byte	0
 3775 01af 00       		.byte	0
 3776 01b0 1A       		.uleb128 0x1a
 3777 01b1 01       		.uleb128 0x1
 3778 01b2 01       		.byte	0x1
 3779 01b3 49       		.uleb128 0x49
 3780 01b4 13       		.uleb128 0x13
 3781 01b5 01       		.uleb128 0x1
 3782 01b6 13       		.uleb128 0x13
 3783 01b7 00       		.byte	0
 3784 01b8 00       		.byte	0
 3785 01b9 1B       		.uleb128 0x1b
 3786 01ba 21       		.uleb128 0x21
 3787 01bb 00       		.byte	0
 3788 01bc 49       		.uleb128 0x49
 3789 01bd 13       		.uleb128 0x13
 3790 01be 2F       		.uleb128 0x2f
 3791 01bf 0B       		.uleb128 0xb
 3792 01c0 00       		.byte	0
 3793 01c1 00       		.byte	0
 3794 01c2 1C       		.uleb128 0x1c
 3795 01c3 34       		.uleb128 0x34
 3796 01c4 00       		.byte	0
 3797 01c5 03       		.uleb128 0x3
 3798 01c6 0E       		.uleb128 0xe
 3799 01c7 3A       		.uleb128 0x3a
 3800 01c8 0B       		.uleb128 0xb
 3801 01c9 3B       		.uleb128 0x3b
 3802 01ca 0B       		.uleb128 0xb
 3803 01cb 49       		.uleb128 0x49
 3804 01cc 13       		.uleb128 0x13
 3805 01cd 3F       		.uleb128 0x3f
 3806 01ce 19       		.uleb128 0x19
 3807 01cf 02       		.uleb128 0x2
 3808 01d0 18       		.uleb128 0x18
 3809 01d1 00       		.byte	0
 3810 01d2 00       		.byte	0
 3811 01d3 1D       		.uleb128 0x1d
 3812 01d4 34       		.uleb128 0x34
 3813 01d5 00       		.byte	0
 3814 01d6 03       		.uleb128 0x3
 3815 01d7 0E       		.uleb128 0xe
 3816 01d8 3A       		.uleb128 0x3a
 3817 01d9 0B       		.uleb128 0xb
 3818 01da 3B       		.uleb128 0x3b
 3819 01db 05       		.uleb128 0x5
 3820 01dc 49       		.uleb128 0x49
 3821 01dd 13       		.uleb128 0x13
 3822 01de 3F       		.uleb128 0x3f
 3823 01df 19       		.uleb128 0x19
 3824 01e0 3C       		.uleb128 0x3c
 3825 01e1 19       		.uleb128 0x19
 3826 01e2 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 94


 3827 01e3 00       		.byte	0
 3828 01e4 00       		.byte	0
 3829              		.section	.debug_aranges,"",%progbits
 3830 0000 DC000000 		.4byte	0xdc
 3831 0004 0200     		.2byte	0x2
 3832 0006 00000000 		.4byte	.Ldebug_info0
 3833 000a 04       		.byte	0x4
 3834 000b 00       		.byte	0
 3835 000c 0000     		.2byte	0
 3836 000e 0000     		.2byte	0
 3837 0010 00000000 		.4byte	.LFB1
 3838 0014 34000000 		.4byte	.LFE1-.LFB1
 3839 0018 00000000 		.4byte	.LFB2
 3840 001c 1C000000 		.4byte	.LFE2-.LFB2
 3841 0020 00000000 		.4byte	.LFB3
 3842 0024 1C000000 		.4byte	.LFE3-.LFB3
 3843 0028 00000000 		.4byte	.LFB4
 3844 002c 70010000 		.4byte	.LFE4-.LFB4
 3845 0030 00000000 		.4byte	.LFB5
 3846 0034 78000000 		.4byte	.LFE5-.LFB5
 3847 0038 00000000 		.4byte	.LFB6
 3848 003c 34000000 		.4byte	.LFE6-.LFB6
 3849 0040 00000000 		.4byte	.LFB7
 3850 0044 50000000 		.4byte	.LFE7-.LFB7
 3851 0048 00000000 		.4byte	.LFB8
 3852 004c 38000000 		.4byte	.LFE8-.LFB8
 3853 0050 00000000 		.4byte	.LFB9
 3854 0054 20000000 		.4byte	.LFE9-.LFB9
 3855 0058 00000000 		.4byte	.LFB10
 3856 005c 38000000 		.4byte	.LFE10-.LFB10
 3857 0060 00000000 		.4byte	.LFB11
 3858 0064 60000000 		.4byte	.LFE11-.LFB11
 3859 0068 00000000 		.4byte	.LFB12
 3860 006c 74000000 		.4byte	.LFE12-.LFB12
 3861 0070 00000000 		.4byte	.LFB13
 3862 0074 44000000 		.4byte	.LFE13-.LFB13
 3863 0078 00000000 		.4byte	.LFB14
 3864 007c 68000000 		.4byte	.LFE14-.LFB14
 3865 0080 00000000 		.4byte	.LFB15
 3866 0084 30000000 		.4byte	.LFE15-.LFB15
 3867 0088 00000000 		.4byte	.LFB16
 3868 008c 30000000 		.4byte	.LFE16-.LFB16
 3869 0090 00000000 		.4byte	.LFB17
 3870 0094 20000000 		.4byte	.LFE17-.LFB17
 3871 0098 00000000 		.4byte	.LFB18
 3872 009c 20000000 		.4byte	.LFE18-.LFB18
 3873 00a0 00000000 		.4byte	.LFB19
 3874 00a4 48000000 		.4byte	.LFE19-.LFB19
 3875 00a8 00000000 		.4byte	.LFB20
 3876 00ac 44000000 		.4byte	.LFE20-.LFB20
 3877 00b0 00000000 		.4byte	.LFB21
 3878 00b4 44010000 		.4byte	.LFE21-.LFB21
 3879 00b8 00000000 		.4byte	.LFB22
 3880 00bc 6C010000 		.4byte	.LFE22-.LFB22
 3881 00c0 00000000 		.4byte	.LFB23
 3882 00c4 60010000 		.4byte	.LFE23-.LFB23
 3883 00c8 00000000 		.4byte	.LFB24
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 95


 3884 00cc CC010000 		.4byte	.LFE24-.LFB24
 3885 00d0 00000000 		.4byte	.LFB25
 3886 00d4 38000000 		.4byte	.LFE25-.LFB25
 3887 00d8 00000000 		.4byte	0
 3888 00dc 00000000 		.4byte	0
 3889              		.section	.debug_ranges,"",%progbits
 3890              	.Ldebug_ranges0:
 3891 0000 00000000 		.4byte	.LFB1
 3892 0004 34000000 		.4byte	.LFE1
 3893 0008 00000000 		.4byte	.LFB2
 3894 000c 1C000000 		.4byte	.LFE2
 3895 0010 00000000 		.4byte	.LFB3
 3896 0014 1C000000 		.4byte	.LFE3
 3897 0018 00000000 		.4byte	.LFB4
 3898 001c 70010000 		.4byte	.LFE4
 3899 0020 00000000 		.4byte	.LFB5
 3900 0024 78000000 		.4byte	.LFE5
 3901 0028 00000000 		.4byte	.LFB6
 3902 002c 34000000 		.4byte	.LFE6
 3903 0030 00000000 		.4byte	.LFB7
 3904 0034 50000000 		.4byte	.LFE7
 3905 0038 00000000 		.4byte	.LFB8
 3906 003c 38000000 		.4byte	.LFE8
 3907 0040 00000000 		.4byte	.LFB9
 3908 0044 20000000 		.4byte	.LFE9
 3909 0048 00000000 		.4byte	.LFB10
 3910 004c 38000000 		.4byte	.LFE10
 3911 0050 00000000 		.4byte	.LFB11
 3912 0054 60000000 		.4byte	.LFE11
 3913 0058 00000000 		.4byte	.LFB12
 3914 005c 74000000 		.4byte	.LFE12
 3915 0060 00000000 		.4byte	.LFB13
 3916 0064 44000000 		.4byte	.LFE13
 3917 0068 00000000 		.4byte	.LFB14
 3918 006c 68000000 		.4byte	.LFE14
 3919 0070 00000000 		.4byte	.LFB15
 3920 0074 30000000 		.4byte	.LFE15
 3921 0078 00000000 		.4byte	.LFB16
 3922 007c 30000000 		.4byte	.LFE16
 3923 0080 00000000 		.4byte	.LFB17
 3924 0084 20000000 		.4byte	.LFE17
 3925 0088 00000000 		.4byte	.LFB18
 3926 008c 20000000 		.4byte	.LFE18
 3927 0090 00000000 		.4byte	.LFB19
 3928 0094 48000000 		.4byte	.LFE19
 3929 0098 00000000 		.4byte	.LFB20
 3930 009c 44000000 		.4byte	.LFE20
 3931 00a0 00000000 		.4byte	.LFB21
 3932 00a4 44010000 		.4byte	.LFE21
 3933 00a8 00000000 		.4byte	.LFB22
 3934 00ac 6C010000 		.4byte	.LFE22
 3935 00b0 00000000 		.4byte	.LFB23
 3936 00b4 60010000 		.4byte	.LFE23
 3937 00b8 00000000 		.4byte	.LFB24
 3938 00bc CC010000 		.4byte	.LFE24
 3939 00c0 00000000 		.4byte	.LFB25
 3940 00c4 38000000 		.4byte	.LFE25
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 96


 3941 00c8 00000000 		.4byte	0
 3942 00cc 00000000 		.4byte	0
 3943              		.section	.debug_line,"",%progbits
 3944              	.Ldebug_line0:
 3945 0000 CB030000 		.section	.debug_str,"MS",%progbits,1
 3945      02004900 
 3945      00000201 
 3945      FB0E0D00 
 3945      01010101 
 3946              	.LASF10:
 3947 0000 75696E74 		.ascii	"uint16\000"
 3947      313600
 3948              	.LASF74:
 3949 0007 61646347 		.ascii	"adcGain\000"
 3949      61696E00 
 3950              	.LASF87:
 3951 000f 636F756E 		.ascii	"counts\000"
 3951      747300
 3952              	.LASF75:
 3953 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 3953      436F756E 
 3953      7473546F 
 3953      5F566F6C 
 3953      747300
 3954              	.LASF85:
 3955 0029 4144435F 		.ascii	"ADC_Init\000"
 3955      496E6974 
 3955      00
 3956              	.LASF89:
 3957 0032 4144435F 		.ascii	"ADC_currentConfig\000"
 3957      63757272 
 3957      656E7443 
 3957      6F6E6669 
 3957      6700
 3958              	.LASF50:
 3959 0044 4144435F 		.ascii	"ADC_SetEosMask\000"
 3959      53657445 
 3959      6F734D61 
 3959      736B00
 3960              	.LASF7:
 3961 0053 6C6F6E67 		.ascii	"long long unsigned int\000"
 3961      206C6F6E 
 3961      6720756E 
 3961      7369676E 
 3961      65642069 
 3962              	.LASF97:
 3963 006a 4144435F 		.ascii	"ADC_InputsPlacement\000"
 3963      496E7075 
 3963      7473506C 
 3963      6163656D 
 3963      656E7400 
 3964              	.LASF46:
 3965 007e 4144435F 		.ascii	"ADC_StartConvert\000"
 3965      53746172 
 3965      74436F6E 
 3965      76657274 
 3965      00
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 97


 3966              	.LASF6:
 3967 008f 6C6F6E67 		.ascii	"long long int\000"
 3967      206C6F6E 
 3967      6720696E 
 3967      7400
 3968              	.LASF0:
 3969 009d 7369676E 		.ascii	"signed char\000"
 3969      65642063 
 3969      68617200 
 3970              	.LASF13:
 3971 00a9 696E7433 		.ascii	"int32\000"
 3971      3200
 3972              	.LASF44:
 3973 00af 4144435F 		.ascii	"ADC_SelectConfig\000"
 3973      53656C65 
 3973      6374436F 
 3973      6E666967 
 3973      00
 3974              	.LASF36:
 3975 00c0 4144435F 		.ascii	"ADC_Start\000"
 3975      53746172 
 3975      7400
 3976              	.LASF4:
 3977 00ca 6C6F6E67 		.ascii	"long int\000"
 3977      20696E74 
 3977      00
 3978              	.LASF83:
 3979 00d3 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 3979      436F756E 
 3979      7473546F 
 3979      5F75566F 
 3979      6C747300 
 3980              	.LASF95:
 3981 00e7 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 3981      636F756E 
 3981      74735065 
 3981      72313056 
 3981      6F6C7400 
 3982              	.LASF9:
 3983 00fb 75696E74 		.ascii	"uint8\000"
 3983      3800
 3984              	.LASF16:
 3985 0101 646F7562 		.ascii	"double\000"
 3985      6C6500
 3986              	.LASF62:
 3987 0108 4144435F 		.ascii	"ADC_GetResult32\000"
 3987      47657452 
 3987      6573756C 
 3987      74333200 
 3988              	.LASF35:
 3989 0118 4144435F 		.ascii	"ADC_CONFIG_STRUCT\000"
 3989      434F4E46 
 3989      49475F53 
 3989      54525543 
 3989      5400
 3990              	.LASF26:
 3991 012a 73616D70 		.ascii	"sampleTime01\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 98


 3991      6C655469 
 3991      6D653031 
 3991      00
 3992              	.LASF11:
 3993 0137 75696E74 		.ascii	"uint32\000"
 3993      333200
 3994              	.LASF51:
 3995 013e 6D61736B 		.ascii	"mask\000"
 3995      00
 3996              	.LASF92:
 3997 0143 4144435F 		.ascii	"ADC_initVar\000"
 3997      696E6974 
 3997      56617200 
 3998              	.LASF78:
 3999 014f 74656D70 		.ascii	"temp\000"
 3999      00
 4000              	.LASF54:
 4001 0154 7265744D 		.ascii	"retMode\000"
 4001      6F646500 
 4002              	.LASF69:
 4003 015c 4144435F 		.ascii	"ADC_SetLimitMask\000"
 4003      5365744C 
 4003      696D6974 
 4003      4D61736B 
 4003      00
 4004              	.LASF8:
 4005 016d 756E7369 		.ascii	"unsigned int\000"
 4005      676E6564 
 4005      20696E74 
 4005      00
 4006              	.LASF31:
 4007 017a 72616E67 		.ascii	"rangeIntMask\000"
 4007      65496E74 
 4007      4D61736B 
 4007      00
 4008              	.LASF86:
 4009 0187 636F6E66 		.ascii	"configNum\000"
 4009      69674E75 
 4009      6D00
 4010              	.LASF100:
 4011 0191 433A5C55 		.ascii	"C:\\Users\\Christopher Kuzma\\Downloads\\Cypress Th"
 4011      73657273 
 4011      5C436872 
 4011      6973746F 
 4011      70686572 
 4012 01c0 696E675C 		.ascii	"ing\\EnvironmentSensing.cydsn\\EnvironmentSensing.c"
 4012      456E7669 
 4012      726F6E6D 
 4012      656E7453 
 4012      656E7369 
 4013 01f1 7964736E 		.ascii	"ydsn\000"
 4013      00
 4014              	.LASF70:
 4015 01f6 4144435F 		.ascii	"ADC_SetSatMask\000"
 4015      53657453 
 4015      61744D61 
 4015      736B00
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 99


 4016              	.LASF98:
 4017 0205 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4017      4320342E 
 4017      392E3320 
 4017      32303135 
 4017      30333033 
 4018 0238 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 4018      20726576 
 4018      6973696F 
 4018      6E203232 
 4018      31323230 
 4019 026b 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 4019      30202D66 
 4019      66756E63 
 4019      74696F6E 
 4019      2D736563 
 4020              	.LASF43:
 4021 0297 746D7052 		.ascii	"tmpRegVal\000"
 4021      65675661 
 4021      6C00
 4022              	.LASF79:
 4023 02a1 61766572 		.ascii	"averageAdcSamplesDiv\000"
 4023      61676541 
 4023      64635361 
 4023      6D706C65 
 4023      73446976 
 4024              	.LASF3:
 4025 02b6 73686F72 		.ascii	"short unsigned int\000"
 4025      7420756E 
 4025      7369676E 
 4025      65642069 
 4025      6E7400
 4026              	.LASF28:
 4027 02c9 72616E67 		.ascii	"rangeThres\000"
 4027      65546872 
 4027      657300
 4028              	.LASF47:
 4029 02d4 4144435F 		.ascii	"ADC_StopConvert\000"
 4029      53746F70 
 4029      436F6E76 
 4029      65727400 
 4030              	.LASF64:
 4031 02e4 66696E61 		.ascii	"finalResult\000"
 4031      6C526573 
 4031      756C7400 
 4032              	.LASF80:
 4033 02f0 72617743 		.ascii	"rawChannel\000"
 4033      68616E6E 
 4033      656C00
 4034              	.LASF23:
 4035 02fb 6E756D43 		.ascii	"numChannels\000"
 4035      68616E6E 
 4035      656C7300 
 4036              	.LASF58:
 4037 0307 6368616E 		.ascii	"chanConfig\000"
 4037      436F6E66 
 4037      696700
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 100


 4038              	.LASF53:
 4039 0312 6368616E 		.ascii	"chanMask\000"
 4039      4D61736B 
 4039      00
 4040              	.LASF19:
 4041 031b 72656733 		.ascii	"reg32\000"
 4041      3200
 4042              	.LASF57:
 4043 0321 69735369 		.ascii	"isSigned\000"
 4043      676E6564 
 4043      00
 4044              	.LASF61:
 4045 032a 61646352 		.ascii	"adcResult\000"
 4045      6573756C 
 4045      7400
 4046              	.LASF48:
 4047 0334 4144435F 		.ascii	"ADC_SetConvertMode\000"
 4047      53657443 
 4047      6F6E7665 
 4047      72744D6F 
 4047      646500
 4048              	.LASF14:
 4049 0347 666C6F61 		.ascii	"float32\000"
 4049      74333200 
 4050              	.LASF21:
 4051 034f 73697A65 		.ascii	"sizetype\000"
 4051      74797065 
 4051      00
 4052              	.LASF66:
 4053 0358 6C6F774C 		.ascii	"lowLimit\000"
 4053      696D6974 
 4053      00
 4054              	.LASF67:
 4055 0361 4144435F 		.ascii	"ADC_SetHighLimit\000"
 4055      53657448 
 4055      6967684C 
 4055      696D6974 
 4055      00
 4056              	.LASF40:
 4057 0372 61646472 		.ascii	"address\000"
 4057      65737300 
 4058              	.LASF101:
 4059 037a 4144435F 		.ascii	"ADC_IsChannelSigned\000"
 4059      49734368 
 4059      616E6E65 
 4059      6C536967 
 4059      6E656400 
 4060              	.LASF27:
 4061 038e 73616D70 		.ascii	"sampleTime23\000"
 4061      6C655469 
 4061      6D653233 
 4061      00
 4062              	.LASF32:
 4063 039b 73617449 		.ascii	"satIntMask\000"
 4063      6E744D61 
 4063      736B00
 4064              	.LASF59:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 101


 4065 03a6 4144435F 		.ascii	"ADC_IsEndConversion\000"
 4065      4973456E 
 4065      64436F6E 
 4065      76657273 
 4065      696F6E00 
 4066              	.LASF39:
 4067 03ba 4144435F 		.ascii	"ADC_InitConfig\000"
 4067      496E6974 
 4067      436F6E66 
 4067      696700
 4068              	.LASF17:
 4069 03c9 696E7436 		.ascii	"int64\000"
 4069      3400
 4070              	.LASF52:
 4071 03cf 4144435F 		.ascii	"ADC_SetChanMask\000"
 4071      53657443 
 4071      68616E4D 
 4071      61736B00 
 4072              	.LASF99:
 4073 03df 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 4073      72617465 
 4073      645F536F 
 4073      75726365 
 4073      5C50536F 
 4074              	.LASF73:
 4075 03fc 4144435F 		.ascii	"ADC_SetGain\000"
 4075      53657447 
 4075      61696E00 
 4076              	.LASF15:
 4077 0408 666C6F61 		.ascii	"float\000"
 4077      7400
 4078              	.LASF68:
 4079 040e 68696768 		.ascii	"highLimit\000"
 4079      4C696D69 
 4079      7400
 4080              	.LASF81:
 4081 0418 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 4081      436F756E 
 4081      7473546F 
 4081      5F6D566F 
 4081      6C747300 
 4082              	.LASF30:
 4083 042c 6368616E 		.ascii	"chanEn\000"
 4083      456E00
 4084              	.LASF65:
 4085 0433 4144435F 		.ascii	"ADC_SetLowLimit\000"
 4085      5365744C 
 4085      6F774C69 
 4085      6D697400 
 4086              	.LASF1:
 4087 0443 756E7369 		.ascii	"unsigned char\000"
 4087      676E6564 
 4087      20636861 
 4087      7200
 4088              	.LASF94:
 4089 0451 4144435F 		.ascii	"ADC_offset\000"
 4089      6F666673 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 102


 4089      657400
 4090              	.LASF90:
 4091 045c 4144435F 		.ascii	"ADC_channelEnMasks\000"
 4091      6368616E 
 4091      6E656C45 
 4091      6E4D6173 
 4091      6B7300
 4092              	.LASF2:
 4093 046f 73686F72 		.ascii	"short int\000"
 4093      7420696E 
 4093      7400
 4094              	.LASF37:
 4095 0479 4144435F 		.ascii	"ADC_Stop\000"
 4095      53746F70 
 4095      00
 4096              	.LASF77:
 4097 0482 72657375 		.ascii	"result_Volts\000"
 4097      6C745F56 
 4097      6F6C7473 
 4097      00
 4098              	.LASF63:
 4099 048f 61646352 		.ascii	"adcResult16\000"
 4099      6573756C 
 4099      74313600 
 4100              	.LASF42:
 4101 049b 63684E75 		.ascii	"chNum\000"
 4101      6D00
 4102              	.LASF33:
 4103 04a1 76726566 		.ascii	"vrefMvValue\000"
 4103      4D765661 
 4103      6C756500 
 4104              	.LASF56:
 4105 04ad 6368616E 		.ascii	"chan\000"
 4105      00
 4106              	.LASF5:
 4107 04b2 6C6F6E67 		.ascii	"long unsigned int\000"
 4107      20756E73 
 4107      69676E65 
 4107      6420696E 
 4107      7400
 4108              	.LASF18:
 4109 04c4 63686172 		.ascii	"char\000"
 4109      00
 4110              	.LASF49:
 4111 04c9 6D6F6465 		.ascii	"mode\000"
 4111      00
 4112              	.LASF20:
 4113 04ce 63796973 		.ascii	"cyisraddress\000"
 4113      72616464 
 4113      72657373 
 4113      00
 4114              	.LASF96:
 4115 04db 4144435F 		.ascii	"ADC_allConfigs\000"
 4115      616C6C43 
 4115      6F6E6669 
 4115      677300
 4116              	.LASF41:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 103


 4117 04ea 636F6E66 		.ascii	"config\000"
 4117      696700
 4118              	.LASF91:
 4119 04f1 4144435F 		.ascii	"ADC_channelsConfig\000"
 4119      6368616E 
 4119      6E656C73 
 4119      436F6E66 
 4119      696700
 4120              	.LASF38:
 4121 0504 4144435F 		.ascii	"ADC_StartEx\000"
 4121      53746172 
 4121      74457800 
 4122              	.LASF84:
 4123 0510 72657375 		.ascii	"result_uVolts\000"
 4123      6C745F75 
 4123      566F6C74 
 4123      7300
 4124              	.LASF45:
 4125 051e 72657374 		.ascii	"restart\000"
 4125      61727400 
 4126              	.LASF72:
 4127 0526 6F666673 		.ascii	"offset\000"
 4127      657400
 4128              	.LASF24:
 4129 052d 6374726C 		.ascii	"ctrl\000"
 4129      00
 4130              	.LASF34:
 4131 0532 6D697363 		.ascii	"miscConfig\000"
 4131      436F6E66 
 4131      696700
 4132              	.LASF76:
 4133 053d 61646343 		.ascii	"adcCounts\000"
 4133      6F756E74 
 4133      7300
 4134              	.LASF29:
 4135 0547 72616E67 		.ascii	"rangeCond\000"
 4135      65436F6E 
 4135      6400
 4136              	.LASF88:
 4137 0551 4144435F 		.ascii	"ADC_Enable\000"
 4137      456E6162 
 4137      6C6500
 4138              	.LASF25:
 4139 055c 73616D70 		.ascii	"sampleCtrl\000"
 4139      6C654374 
 4139      726C00
 4140              	.LASF12:
 4141 0567 696E7431 		.ascii	"int16\000"
 4141      3600
 4142              	.LASF82:
 4143 056d 72657375 		.ascii	"result_mVolts\000"
 4143      6C745F6D 
 4143      566F6C74 
 4143      7300
 4144              	.LASF71:
 4145 057b 4144435F 		.ascii	"ADC_SetOffset\000"
 4145      5365744F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\cclwqoH0.s 			page 104


 4145      66667365 
 4145      7400
 4146              	.LASF22:
 4147 0589 6368616E 		.ascii	"channelBase\000"
 4147      6E656C42 
 4147      61736500 
 4148              	.LASF55:
 4149 0595 656E644F 		.ascii	"endOfConversion\000"
 4149      66436F6E 
 4149      76657273 
 4149      696F6E00 
 4150              	.LASF93:
 4151 05a5 4144435F 		.ascii	"ADC_selected\000"
 4151      73656C65 
 4151      63746564 
 4151      00
 4152              	.LASF60:
 4153 05b2 4144435F 		.ascii	"ADC_GetResult16\000"
 4153      47657452 
 4153      6573756C 
 4153      74313600 
 4154              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
